<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟云</title>
  <subtitle>let it be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lxmoses.com/"/>
  <updated>2016-12-15T01:29:00.000Z</updated>
  <id>http://blog.lxmoses.com/</id>
  
  <author>
    <name>moses</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unix文件的时间</title>
    <link href="http://blog.lxmoses.com/2016/12/15/Unix%E6%96%87%E4%BB%B6%E7%9A%84%E6%97%B6%E9%97%B4/"/>
    <id>http://blog.lxmoses.com/2016/12/15/Unix文件的时间/</id>
    <published>2016-12-15T00:58:26.000Z</published>
    <updated>2016-12-15T01:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Unix对于每个文件维护了3个时间字段，它们的意义如下图所示：<br><img src="/images/与Unix文件相关的3个时间值.jpg" alt=""><br>很多影响到i节点的操作，如更改文件的访问权限、更改用户id、更改链接数等，但它们并没有更改文件的实际内容。因为i节点中的所有信息都是与文件的实际内容分开存放的。</p>
<p>POSIX(Portable Operating System Interface)修改文件的访问时间和修改时间<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">futimens</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct</span> timespec times[<span class="number">2</span>])</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">utimensat</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">char</span> * path, <span class="keyword">const</span> <span class="keyword">struct</span> timespec times[<span class="number">2</span>], <span class="keyword">int</span> flag)</span></span>;</div></pre></td></tr></table></figure><br>Single UNIX Specification的XSI扩展<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">utimes</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * pathname, <span class="keyword">const</span> <span class="keyword">struct</span> timeval times[<span class="number">2</span>])</span></span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Unix对于每个文件维护了3个时间字段，它们的意义如下图所示：&lt;br&gt;&lt;img src=&quot;/images/与Unix文件相关的3个时间值.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;很多影响到i节点的操作，如更改文件的访问权限、更改用户id、更改链接数等，但它们并没有更改文件的实际内容
    
    </summary>
    
      <category term="重温apue" scheme="http://blog.lxmoses.com/categories/%E9%87%8D%E6%B8%A9apue/"/>
    
    
      <category term="Unix" scheme="http://blog.lxmoses.com/tags/Unix/"/>
    
      <category term="文件" scheme="http://blog.lxmoses.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>完美删除临时文件</title>
    <link href="http://blog.lxmoses.com/2016/12/14/%E5%AE%8C%E7%BE%8E%E5%88%A0%E9%99%A4%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.lxmoses.com/2016/12/14/完美删除临时文件/</id>
    <published>2016-12-14T06:38:41.000Z</published>
    <updated>2016-12-15T01:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔者曾经写过一个爬虫，里面涉及到一些临时文件的操作。在解析页面时总会有各种各样的异常导致临时文件删除失败。如今对Unix文件系统有了一些更为深入的理解，这个问题也迎刃而解。<br>Unix文件系统中有个非常重要的概念，i节点。文件系统中的每个目录项都会指向一个i节点，每个i节点中都有一个链接计数，其值是指向该i节点的目录项数。只有当链接计数减少至0时，才可删除文件(也就是释放该文件占用的数据块).另一个条件也会阻止删除文件的内容——只要有进程打开了该文件，其内容也不会删除。<br>关闭一个文件时，内核首先检查打开该文件的进程个数；如果这个计数达到0，内核再去检查其链接计数；如果计数也是0，那么就删除该文件的内容。<br>这意味着我们可以在创建一个临时文件的时候就调用unlink函数，程序结束之后(无论是正常还是异常结束)临时文件都会被删除。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔者曾经写过一个爬虫，里面涉及到一些临时文件的操作。在解析页面时总会有各种各样的异常导致临时文件删除失败。如今对Unix文件系统有了一些更为深入的理解，这个问题也迎刃而解。&lt;br&gt;Unix文件系统中有个非常重要的概念，i节点。文件系统中的每个目录项都会指向一个i节点，每个i
    
    </summary>
    
      <category term="重温apue" scheme="http://blog.lxmoses.com/categories/%E9%87%8D%E6%B8%A9apue/"/>
    
    
      <category term="Unix" scheme="http://blog.lxmoses.com/tags/Unix/"/>
    
      <category term="OS" scheme="http://blog.lxmoses.com/tags/OS/"/>
    
      <category term="文件" scheme="http://blog.lxmoses.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>深入了解原子操作</title>
    <link href="http://blog.lxmoses.com/2016/12/14/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.lxmoses.com/2016/12/14/深入了解原子操作/</id>
    <published>2016-12-14T04:41:46.000Z</published>
    <updated>2016-12-14T04:47:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>原子操作指的是由多步组成的一个操作。如果该操作原子地执行，则要么执行完所有步骤，要么一步也不执行，不可能只执行所有步骤的一个子集。<br>关于原子操作的概念和定义很早以前都知道了，但是对于其底层实现细节却知之不详。<br>今天看到一篇不错的文章，参见<a href="http://www.cnblogs.com/fanzhidongyzby/p/3654855.html" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原子操作指的是由多步组成的一个操作。如果该操作原子地执行，则要么执行完所有步骤，要么一步也不执行，不可能只执行所有步骤的一个子集。&lt;br&gt;关于原子操作的概念和定义很早以前都知道了，但是对于其底层实现细节却知之不详。&lt;br&gt;今天看到一篇不错的文章，参见&lt;a href=&quot;htt
    
    </summary>
    
      <category term="重温apue" scheme="http://blog.lxmoses.com/categories/%E9%87%8D%E6%B8%A9apue/"/>
    
    
      <category term="Unix" scheme="http://blog.lxmoses.com/tags/Unix/"/>
    
      <category term="OS" scheme="http://blog.lxmoses.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Unix内核中的文件数据结构</title>
    <link href="http://blog.lxmoses.com/2016/12/14/Unix%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://blog.lxmoses.com/2016/12/14/Unix内核中的文件数据结构/</id>
    <published>2016-12-14T03:06:54.000Z</published>
    <updated>2016-12-14T03:25:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>打开文件的内核数据结构<br><img src="/images/打开文件的内核数据结构.jpeg" alt=""><br>两个独立进程各自打开同一个文件<br><img src="/images/打开文件的内核数据结构.jpeg" alt=""><br>内核使用3种数据结构表示打开文件，它们的关系决定了在文件共享方面一个进程对另一个进程的可能产生的影响。</p>
<h2 id="进程表项"><a href="#进程表项" class="headerlink" title="进程表项"></a>进程表项</h2><p>每个进程在进程表中都有一个记录项，记录项中包含一张打开的文件描述表，可将其视为一个矢量，每个描述符占用一项。与每个文件描述符关联的是：<br>a.文件描述符标志<br>b.指向一个文件表项的指针</p>
<h2 id="文件表项"><a href="#文件表项" class="headerlink" title="文件表项"></a>文件表项</h2><p>内核为所有打开文件维持一张文件表。每个文件表项包含：<br>a.文件状态标志(读、写、添写、同步和非阻塞等)<br>b.当前文件偏移量<br>c.指向该文件v节点表项的指针</p>
<h2 id="v节点项"><a href="#v节点项" class="headerlink" title="v节点项"></a>v节点项</h2><p>每个打开文件都有一个v节点结构。v节点包含了文件类型和对此文件进行各种操作函数的指针。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打开文件的内核数据结构&lt;br&gt;&lt;img src=&quot;/images/打开文件的内核数据结构.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;两个独立进程各自打开同一个文件&lt;br&gt;&lt;img src=&quot;/images/打开文件的内核数据结构.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;内核使用3种数据结
    
    </summary>
    
      <category term="重温apue" scheme="http://blog.lxmoses.com/categories/%E9%87%8D%E6%B8%A9apue/"/>
    
    
      <category term="Unix" scheme="http://blog.lxmoses.com/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>Unix时间值</title>
    <link href="http://blog.lxmoses.com/2016/12/14/Unix%E6%97%B6%E9%97%B4%E5%80%BC/"/>
    <id>http://blog.lxmoses.com/2016/12/14/Unix时间值/</id>
    <published>2016-12-14T01:57:19.000Z</published>
    <updated>2016-12-14T02:32:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>历史上，Unix系统使用过不同的时间值。<br>(1)日历时间。该值是自协调世界时1970年1月1日00:00:00这个特定时间以来所经过的秒数累计值。系统基本数据类型time_t用于保存这种时间值。<br>(2)进程时间。Unix系统为一个进程维护了3个进程时间值。<br>时钟时间：又称为墙上时钟时间，它是进程运行的时间总量。<br>用户cpu时间：执行用户指令所用的时间量。<br>系统cpu时间：为该进程执行内核程序所经历的时间。<br>要取得任一进程的时钟时间、用户时间和系统时间可通过执行命令time（1），其参数是要度量其执行时间的命令。例如：time ls<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">time ls</div><div class="line">Desktop   Documents Downloads Library   Movies    Music     Pictures  Public    oh-my-zsh solarized workspace</div><div class="line">ls -G  0.00s user 0.00s system 82% cpu 0.008 total</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;历史上，Unix系统使用过不同的时间值。&lt;br&gt;(1)日历时间。该值是自协调世界时1970年1月1日00:00:00这个特定时间以来所经过的秒数累计值。系统基本数据类型time_t用于保存这种时间值。&lt;br&gt;(2)进程时间。Unix系统为一个进程维护了3个进程时间值。&lt;br
    
    </summary>
    
      <category term="重温apue" scheme="http://blog.lxmoses.com/categories/%E9%87%8D%E6%B8%A9apue/"/>
    
    
      <category term="Unix" scheme="http://blog.lxmoses.com/tags/Unix/"/>
    
      <category term="OS" scheme="http://blog.lxmoses.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>文件I/O和标准I/O</title>
    <link href="http://blog.lxmoses.com/2016/12/14/%E6%96%87%E4%BB%B6I-O%E5%92%8C%E6%A0%87%E5%87%86I-O/"/>
    <id>http://blog.lxmoses.com/2016/12/14/文件I-O和标准I-O/</id>
    <published>2016-12-14T00:48:42.000Z</published>
    <updated>2016-12-14T00:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>标准I/O是ANSI C建立的一个标准I/O模型，是一个标准函数包和stdio.h头文件中的定义，具有一定的可移植性。标准IO库处理很多细节。例如缓存分配，以优化长度执行IO等。标准的IO提供了三种类型的缓存。<br>（1）全缓存：当填满标准IO缓存后才进行实际的IO操作。<br>（2）行缓存：当输入或输出中遇到新行符时，标准IO库执行IO操作。<br>（3）不带缓存：stderr就是了。</p>
<p>文件I/O：文件I/O称之为不带缓存的IO（unbuffered I/O)。不带缓存指的是每个read，write都调用内核中的一个系统调用。也就是一般所说的低级I/O——操作系统提供的基本IO服务，与os绑定，特定于linix或unix平台。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标准I/O是ANSI C建立的一个标准I/O模型，是一个标准函数包和stdio.h头文件中的定义，具有一定的可移植性。标准IO库处理很多细节。例如缓存分配，以优化长度执行IO等。标准的IO提供了三种类型的缓存。&lt;br&gt;（1）全缓存：当填满标准IO缓存后才进行实际的IO操作。
    
    </summary>
    
      <category term="重温apue" scheme="http://blog.lxmoses.com/categories/%E9%87%8D%E6%B8%A9apue/"/>
    
    
      <category term="Unix" scheme="http://blog.lxmoses.com/tags/Unix/"/>
    
      <category term="IO" scheme="http://blog.lxmoses.com/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>Unix体系结构</title>
    <link href="http://blog.lxmoses.com/2016/12/14/Unix%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>http://blog.lxmoses.com/2016/12/14/Unix体系结构/</id>
    <published>2016-12-13T23:55:24.000Z</published>
    <updated>2016-12-14T01:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Unix体系结构.jpg" alt=""><br>从严格意义上来说，可将操作系统定义为一种软件，它控制计算机硬件资源，提供程序运行环境。我们通常将这种软件称为内核(kernel),因为它相对较小，而且位于环境的核心。<br>内核的接口被称为系统调用(system call)。公用函数库构建在系统调用接口之上，应用程序既可使用公用函数库，也可使用系统调用。shell是一个特殊的应用程序，为运行其他程序提供了一个接口。<br>从广义上来说，操作系统包括了内核和一些其他软件，这些软件使得计算机能够发挥作用，并使计算机具有自己的特性。这里所说的其他软件包括实用程序、应用程序、shell以及公用函数库等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Unix体系结构.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;从严格意义上来说，可将操作系统定义为一种软件，它控制计算机硬件资源，提供程序运行环境。我们通常将这种软件称为内核(kernel),因为它相对较小，而且位于环境的核心。&lt;br&gt;内核的接口被称
    
    </summary>
    
      <category term="重温apue" scheme="http://blog.lxmoses.com/categories/%E9%87%8D%E6%B8%A9apue/"/>
    
    
      <category term="Unix" scheme="http://blog.lxmoses.com/tags/Unix/"/>
    
      <category term="OS" scheme="http://blog.lxmoses.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>再回学校</title>
    <link href="http://blog.lxmoses.com/2016/12/13/%E5%86%8D%E5%9B%9E%E5%AD%A6%E6%A0%A1/"/>
    <id>http://blog.lxmoses.com/2016/12/13/再回学校/</id>
    <published>2016-12-13T14:29:07.000Z</published>
    <updated>2016-12-13T23:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>这学期开学刚刚换了新工作之后，汤老师群里发来职位邀请。去了，不合适，走了。<br>今天办理完最后的离职手续，回想这份工作经历，除了工作内容不符合我的职业规划之外其他什么都好。在公司呆这么久，都是干一些打杂的内容，诸如写写脚本、购买服务器之类的。<br>辞职之后回到母校，刚开始觉得挺轻松的，终于不用早九晚九的上班了。然而，自从今年三月份出来实习之后，再也回不到那种无忧无虑打游戏的日子了。<br>仔细想想，还是好好提升下自己的技术。从明天开始，还是去图书馆打磨下自己的技术吧。<br>这条路早已没有回头路。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这学期开学刚刚换了新工作之后，汤老师群里发来职位邀请。去了，不合适，走了。&lt;br&gt;今天办理完最后的离职手续，回想这份工作经历，除了工作内容不符合我的职业规划之外其他什么都好。在公司呆这么久，都是干一些打杂的内容，诸如写写脚本、购买服务器之类的。&lt;br&gt;辞职之后回到母校，刚开
    
    </summary>
    
      <category term="随笔" scheme="http://blog.lxmoses.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>再多的理智也抹不去这淡淡的愁</title>
    <link href="http://blog.lxmoses.com/2016/12/08/%E6%97%A0%E5%A5%88/"/>
    <id>http://blog.lxmoses.com/2016/12/08/无奈/</id>
    <published>2016-12-08T05:15:26.000Z</published>
    <updated>2016-12-13T23:58:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>。。。。。。。。。。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;。。。。。。。。。。。。。&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://blog.lxmoses.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活" scheme="http://blog.lxmoses.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>失眠录（1）</title>
    <link href="http://blog.lxmoses.com/2016/12/08/%E5%A4%B1%E7%9C%A0%E5%BD%95%EF%BC%881%EF%BC%89/"/>
    <id>http://blog.lxmoses.com/2016/12/08/失眠录（1）/</id>
    <published>2016-12-07T17:34:32.000Z</published>
    <updated>2016-12-13T23:57:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天和一些朋友聊了一个有趣的话题–关于如何追女生，一位朋友提出很多攻略，另一位朋友则感叹老实人注定孤独。<br>从笔者的角度来说，更倾向于简单直接的方式，崇尚大道至简。<br>之所以会这样想笔者自我剖析有两个原因：笔者是个屌丝，不会那些套路，不想否定自己的价值；不屑或者不愿意用华丽的外表或者说套路装饰笔者认为最重要的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天和一些朋友聊了一个有趣的话题–关于如何追女生，一位朋友提出很多攻略，另一位朋友则感叹老实人注定孤独。&lt;br&gt;从笔者的角度来说，更倾向于简单直接的方式，崇尚大道至简。&lt;br&gt;之所以会这样想笔者自我剖析有两个原因：笔者是个屌丝，不会那些套路，不想否定自己的价值；不屑或者不愿
    
    </summary>
    
      <category term="失眠录" scheme="http://blog.lxmoses.com/categories/%E5%A4%B1%E7%9C%A0%E5%BD%95/"/>
    
    
      <category term="随笔" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>是结局也是开始</title>
    <link href="http://blog.lxmoses.com/2016/12/07/%E8%BE%9E%E8%81%8C/"/>
    <id>http://blog.lxmoses.com/2016/12/07/辞职/</id>
    <published>2016-12-07T11:37:16.000Z</published>
    <updated>2016-12-13T23:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在vps上面搭了一个博客，后面服务器到期了也没管。最近比较闲，重新搭建博客，这次懒得折腾了，直接挂在github上面算了，尽管有时候会被墙。<br>说来也巧，上次的博客最后一片博文是辞职的时候写的，这次亦然。<br>回顾第一次出来实习，那时跟打了鸡血似的，想到第二天就要开始上班彻夜难眠。如今几经波折，面试了十来家公司，待了四个公司。现实总是跟理想有出入，不过除了工作以外也遇到了一些有趣的·人，经历了一些有趣的事。<br>岂能尽如人意？ 继续走，继续看，是结局也是开始。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在vps上面搭了一个博客，后面服务器到期了也没管。最近比较闲，重新搭建博客，这次懒得折腾了，直接挂在github上面算了，尽管有时候会被墙。&lt;br&gt;说来也巧，上次的博客最后一片博文是辞职的时候写的，这次亦然。&lt;br&gt;回顾第一次出来实习，那时跟打了鸡血似的，想到第二天就要
    
    </summary>
    
      <category term="随笔" scheme="http://blog.lxmoses.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
