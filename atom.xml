<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟云</title>
  <subtitle>let it be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lxmoses.com/"/>
  <updated>2017-04-07T08:48:50.000Z</updated>
  <id>http://blog.lxmoses.com/</id>
  
  <author>
    <name>moses</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>支付反馈可重入</title>
    <link href="http://blog.lxmoses.com/2017/04/07/%E6%94%AF%E4%BB%98%E5%8F%8D%E9%A6%88%E5%8F%AF%E9%87%8D%E5%85%A5/"/>
    <id>http://blog.lxmoses.com/2017/04/07/支付反馈可重入/</id>
    <published>2017-04-07T08:04:17.000Z</published>
    <updated>2017-04-07T08:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做支付,支付平台通知支付结果时，可能会重复通知。<br>为了解决这一问题，有三种思路。 锁，事务，缓存队列。<br>这里选择用缓存队列结合chan实现支付重复反馈可重入<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputTradeno = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</div><div class="line"><span class="keyword">var</span> outputStatus = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanLoop</span><span class="params">()</span></span>&#123;</div><div class="line">	 hashmap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">10000</span>)</div><div class="line">	 <span class="keyword">var</span> queue common.StringFIFO</div><div class="line">	 queue.Init(<span class="number">10000</span>)</div><div class="line">	 <span class="keyword">for</span> &#123;</div><div class="line">		tradeno := &lt;- inputTradeno</div><div class="line">		<span class="keyword">if</span> _, ok := hashmap[tradeno]; ok&#123;</div><div class="line">			outputStatus &lt;- <span class="literal">true</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> queue.Full()&#123;</div><div class="line">				oldestTradeno, _ := queue.Pop()</div><div class="line">				<span class="built_in">delete</span>(hashmap, oldestTradeno)</div><div class="line">			&#125;</div><div class="line">			queue.Push(tradeno)</div><div class="line">			hashmap[tradeno] = <span class="keyword">struct</span> &#123;&#125;&#123;&#125;</div><div class="line">			outputStatus &lt;- <span class="literal">false</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">look</span><span class="params">(tradeno <span class="keyword">string</span>)</span> <span class="title">bool</span></span>&#123;</div><div class="line">	inputTradeno &lt;- tradeno</div><div class="line">	ret := &lt;- outputStatus</div><div class="line">	<span class="keyword">return</span> ret</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">go</span> chanLoop()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">wftNotify</span><span class="params">(c * gin.Context)</span></span>&#123;</div><div class="line">	<span class="comment">//检验威富通是否重复通知</span></div><div class="line">	<span class="keyword">if</span> look(notifyReq.Out_trade_no)&#123;</div><div class="line">	<span class="comment">//已经缓存当前订单，说明威富通重复通知</span></div><div class="line">		common.LogError(<span class="string">"该订单已经处理"</span>)</div><div class="line">		c.Writer.WriteString(wxpay.WFT_RETURN_MSG_SUCCESS)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做支付,支付平台通知支付结果时，可能会重复通知。&lt;br&gt;为了解决这一问题，有三种思路。 锁，事务，缓存队列。&lt;br&gt;这里选择用缓存队列结合chan实现支付重复反馈可重入&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="并发控制" scheme="http://blog.lxmoses.com/tags/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    
      <category term="channel" scheme="http://blog.lxmoses.com/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>C++闭包探索</title>
    <link href="http://blog.lxmoses.com/2017/03/31/c-%E9%97%AD%E5%8C%85%E6%8E%A2%E7%B4%A2/"/>
    <id>http://blog.lxmoses.com/2017/03/31/c-闭包探索/</id>
    <published>2017-03-31T08:09:18.000Z</published>
    <updated>2017-03-31T08:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 利用c++类嵌套内部类实现闭包</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> ITest</div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">()</span></span></div><div class="line">		&#123;</div><div class="line">			process();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">virtual</span> ~ITest()&#123;&#125;</div><div class="line">	<span class="keyword">protected</span>:</div><div class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"><span class="function">ITest * <span class="title">test</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">class</span> Test: <span class="keyword">public</span> ITest</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">public</span>:</div><div class="line">			<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span></div><div class="line">			&#123;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"嵌套内部类:"</span> &lt;&lt; <span class="string">" Count is "</span> &lt;&lt; count++ &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *  利用函数内部类实现闭包</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*Func)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</div><div class="line"></div><div class="line"><span class="function">Func <span class="title">testFunc</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">100</span>;</div><div class="line"></div><div class="line">	<span class="keyword">class</span> Test</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">public</span>:</div><div class="line">			<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * pName = <span class="literal">NULL</span>)</span></span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(pName == <span class="literal">NULL</span>)&#123;</div><div class="line">					pName = <span class="string">"moses"</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"函数内部类:"</span>&lt;&lt; pName &lt;&lt; <span class="string">" Count is "</span>&lt;&lt; count-- &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">			&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> Test::process;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * c++新特性lambda表达式实现闭包</div><div class="line"> */</div><div class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">const</span> <span class="keyword">char</span> *)&gt; lambdaTest()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">100</span>;</div><div class="line"></div><div class="line">	<span class="keyword">auto</span> func = [count] (<span class="keyword">const</span> <span class="keyword">char</span> * pName = <span class="literal">NULL</span>) <span class="keyword">mutable</span> &#123;</div><div class="line">		<span class="keyword">if</span>(pName == <span class="literal">NULL</span>)&#123;</div><div class="line">			pName = <span class="string">"moses"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"lambda : "</span> &lt;&lt; pName &lt;&lt; <span class="string">" Count is "</span> &lt;&lt; count-- &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> func;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="c++" scheme="http://blog.lxmoses.com/tags/c/"/>
    
      <category term="闭包" scheme="http://blog.lxmoses.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Reflection-Go</title>
    <link href="http://blog.lxmoses.com/2017/03/31/reflection-go/"/>
    <id>http://blog.lxmoses.com/2017/03/31/reflection-go/</id>
    <published>2017-03-31T03:15:35.000Z</published>
    <updated>2017-03-31T05:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射简介"><a href="#反射简介" class="headerlink" title="反射简介"></a>反射简介</h2><p>Reflection(反射)在计算机中表示 程序能够检查自身结构的能力，尤其是类型。 它是元编程的一种形式。<br>本文中，我们主要理解Go语言中的的反射运作机制。每个编程语言的反射模型不大相同，很多语言根本不支持反射(C、C++)。笔者在学校主要就是学的C/C++,因此对于反射这个概念不是很清晰，最近接触Go语言，所以从go的角度探索下反射, 下文中谈到“反射”时，默认为时Go语言中的反射。</p>
<h2 id="类型和接口"><a href="#类型和接口" class="headerlink" title="类型和接口"></a>类型和接口</h2><p>反射建立在类型系统之上，因此我们从类型基础知识说起。<br>Go是静态语言。每个变量都有且只有一个静态类型，在编译时就已经确定。<br>关于类型，一个重要的分类是接口类型（interface），每个接口类型都代表固定的方法集合。一个接口变量可以指向（接口变量类似于C中的指针）任何类型的具体值，只要这个值实现了该接口类型的所有方法。<br>一个非常非常重要的接口类型是空接口，即:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span>&#123;&#125;	</div></pre></td></tr></table></figure><br>它代表一个空集，没有任何方法。由于任何具体的值都有零个或更多个方法，因此类型为interface{}的变量能够存储任何值。<br>有人说，Go的接口是动态类型的。这个说法是错误的！接口变量也是静态类型的，它永远只有一个相同的静态类型。如果在运行时它存储的值发生了变化，这个必须满足接口类型的方法集合。这是Go的特性。</p>
<h2 id="接口变量的表示"><a href="#接口变量的表示" class="headerlink" title="接口变量的表示"></a>接口变量的表示</h2><p>interface变量存储一对值:赋给改变量的具体的值、值类型的描述符。更确切的说，值就是实现该接口的底层数据，类型就是底层数据类型的描述。举个例子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r io.Reader</div><div class="line">tyy, err := os.OpenFile(<span class="string">"/dev/tty"</span>, os.O_RDWR, <span class="number">0</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">r = tty</div></pre></td></tr></table></figure><br>在这个例子中，变量r在结构上包含一个(key, value)对:(tty, <em> os.File)。注意：类型os.File不仅仅实现了Read方法。虽然接口变量只提供Read函数的调用权，但是底层的值包含了关于这个值的所有类型消息。所以我们能够做这样的类型转换:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> w io.Writer</div><div class="line">w = r.(io.Writer)</div></pre></td></tr></table></figure><br>上面的第二行代码是一个类型断言，它判定变量r内部的实际值也继承了io.Writer接口，所以才能被赋值给w。赋值之后，w就指向了(tty, </em> os.File）对，和变量r指向的是同一个(value, type)对。<br>不管底层具体值的方法集有多大，由于接口的静态类型限制，接口变量只能调用特定的一些方法。<br>继续看下面的代码:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> empty <span class="keyword">interface</span>&#123;&#125;</div><div class="line">empty = w</div></pre></td></tr></table></figure><br>这里的空接口变量也包含(tty, * os.File)对。这一点很容易理解:空接口变量可以存储任何具体值以及该值的所有描述信息。<br>这里没有使用类型断言,因为w满足空接口的所有方法。另外需要注意的一点是，(value, type)对中的type必须是具体的类型(struct 或 基本类型),不能是接口类型。</p>
<h2 id="反射可以将“接口类型变量”转换为“反射类型”对象"><a href="#反射可以将“接口类型变量”转换为“反射类型”对象" class="headerlink" title="反射可以将“接口类型变量”转换为“反射类型”对象"></a>反射可以将“接口类型变量”转换为“反射类型”对象</h2><p>这里反射类型指reflect.Type和reflect.Value。<br>首先了解下reflect包的两种类型Type和Value。这两种类型使访问接口内的数据成为可能。它们对应两个简单的方法，分别是reflect.TypeOf和reflect.ValueOf,分别是用来读取接口变量的reflect.Type和reflect.Value部分。<br>首先，我们看下reflect.TypeOf:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"reflect"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">	fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(x))</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这行代码会打印出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>: <span class="keyword">float64</span></div></pre></td></tr></table></figure><br>为什么没看到接口？ 这段代码看起来只是把一个float64类型的变量x传递给reflect.TypeOf,事实上查阅一下TypeOf的文档:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Type</span></span></div></pre></td></tr></table></figure><br>我们调用reflect.TypeOf(x)时，x被存储在一个空接口变量中被传递过去，然后reflect.TypeOf对空接口变量进行拆解，恢复其类型信息。<br>函数reflect.ValueOf也会对底层的值进行恢复:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">fmt.Println(<span class="string">"value:"</span>, reflect.ValueOf(x))</div></pre></td></tr></table></figure><br>上面这段代码会打印出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">value: &lt;<span class="keyword">float64</span> Value&gt;</div></pre></td></tr></table></figure><br>类型 reflect.Type 和 reflect.Value 都有很多方法，我们可以检查和使用它们。这里我们举几个例子。类型 reflect.Value 有一个方法 Type()，它会返回一个 reflect.Type 类型的对象。Type和 Value都有一个名为 Kind 的方法，它会返回一个常量，表示底层数据的类型，常见值有：Uint、Float64、Slice等。Value类型也有一些类似于Int、Float的方法，用来提取底层的数据。Int方法用来提取 int64, Float方法用来提取 float64，参考下面的代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">fmt.Println(<span class="string">"type:"</span>, v.Type())</div><div class="line">fmt.Println(<span class="string">"kind is float64:"</span>, v.Kind() == reflect.Float64)</div><div class="line">fmt.Println(<span class="string">"value:"</span>, v.Float())</div></pre></td></tr></table></figure><br>上面这段代码会打印出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>: <span class="keyword">float64</span></div><div class="line">kind is <span class="keyword">float64</span>: <span class="literal">true</span></div><div class="line">value: <span class="number">3.4</span></div></pre></td></tr></table></figure><br>反射库提供了很多值得列出来单独讨论的属性。首先是介绍下Value 的 getter 和 setter 方法。为了保证API 的精简，这两个方法操作的是某一组类型范围最大的那个。比如，处理任何含符号整型数，都使用 int64。也就是说 Value 类型的Int 方法返回值为 int64类型，SetInt 方法接收的参数类型也是 int64 类型。实际使用时，可能需要转化为实际的类型。<br>第二个属性是反射类型变量（reflection object）的 Kind 方法 会返回底层数据的类型，而不是静态类型。如果一个反射类型对象包含一个用户定义的整型数,看代码:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></div><div class="line"><span class="keyword">var</span> x MyInt = <span class="number">7</span></div><div class="line">v := relect.ValueOf(x)</div></pre></td></tr></table></figure><br>上面的代码中，虽然变量 v 的静态类型是MyInt，不是 int，Kind 方法仍然返回 reflect.Int。换句话说， Kind 方法不会像 Type 方法一样区分 MyInt 和 int。</p>
<h2 id="反射可以将“反射类型对象”转换为“接口类型变量”"><a href="#反射可以将“反射类型对象”转换为“接口类型变量”" class="headerlink" title="反射可以将“反射类型对象”转换为“接口类型变量”"></a>反射可以将“反射类型对象”转换为“接口类型变量”</h2><p>根据一个 reflect.Value 类型的变量，我们可以使用 Interface 方法恢复其接口类型的值。事实上，这个方法会把 type 和 value 信息打包并填充到一个接口变量中，然后返回。其函数声明如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Interface returns v's value as an interface&#123;&#125;.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Interface</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;</div></pre></td></tr></table></figure><br>然后我们可以通过断言，恢复底层的具体值:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">y := v.Interface().(<span class="keyword">float64</span>)</div><div class="line">fmt.Println(y)</div></pre></td></tr></table></figure><br>事实上，我们可以更好地利用这一特性。标准库中的 fmt.Println 和 fmt.Printf 等函数都接收空接口变量作为参数，fmt 包内部会对接口变量进行拆包（前面的例子中，我们也做过类似的操作）。因此，fmt 包的打印函数在打印 reflect.Value 类型变量的数据时，只需要把 Interface 方法的结果传给 格式化打印程序:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Println(v.Interface())</div></pre></td></tr></table></figure></p>
<h2 id="如果要修改“反射类型对象”，其值必须是“可写的”-settable"><a href="#如果要修改“反射类型对象”，其值必须是“可写的”-settable" class="headerlink" title="如果要修改“反射类型对象”，其值必须是“可写的”(settable)"></a>如果要修改“反射类型对象”，其值必须是“可写的”(settable)</h2><p>“可写性”有些类似于寻址能力，但是更严格。它是反射类型变量的一种属性，赋予该变量修改底层存储数据的能力。“可写性”最终是由一个事实决定的：反射对象是否存储了原始值。举个代码例子：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">v.SetFLoat(<span class="number">7.1</span>)</div></pre></td></tr></table></figure><br>如果这行代码能够成功执行，它不会更新 x ，虽然看起来变量 v 是根据 x 创建的。相反，它会更新 x 存在于 反射对象 v 内部的一个拷贝，而变量 x 本身完全不受影响。这会造成迷惑，并且没有任何意义，所以是不合法的。“可写性”就是为了避免这个问题而设计的。<br>上面的代码中，我们把变量 x 的一个拷贝传递给函数，因此不期望它会改变 x 的值。如果期望函数 f 能够修改变量 x，我们必须传递 x 的地址（即指向 x 的指针）给函数 f，如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(&amp;x)</div></pre></td></tr></table></figure><br>反射的工作机制是一样的。如果你想通过反射修改变量x，就要把想要修改的变量的指针传递给反射库。<br>首先，像通常一样初始化变量x，然后创建一个指向它的反射对象，名字为p:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">p := reflect.ValueOf(&amp;x)</div><div class="line">fmt.Println(<span class="string">"type of p:"</span>, p.Type())</div><div class="line">fmt.Println(<span class="string">"settability of p:"</span>, p.CanSet())</div></pre></td></tr></table></figure><br>这段代码的输出是:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> of p: * <span class="keyword">float64</span></div><div class="line">settability of p: <span class="literal">false</span></div></pre></td></tr></table></figure><br>反射对象p是不可写的，但是我们也无意修改p，事实上我们要修改的是 * p。为了得到p指向的数据，可以调用Value类型的Elem方法。Elem方法能够对指针进行“解引用”,然后将结果存储到Value类型对象v中:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v := p.Elem()</div><div class="line">fmt.Printlen(<span class="string">"settability of v:"</span>, v.CanSet())</div></pre></td></tr></table></figure><br>上面这段代码的输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">settability of v: <span class="literal">true</span></div></pre></td></tr></table></figure><br>由于变量v代表x，因此我们可以使用v.SetFloat修改x的值:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v.SetFloat(<span class="number">7.1</span>)</div><div class="line">fmt.Println(v.Interface())</div><div class="line">fmt.Println(x)</div></pre></td></tr></table></figure><br>上面的代码输出如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">7.1</span></div><div class="line"><span class="number">7.1</span></div></pre></td></tr></table></figure><br>反射不太容易理解，reflect.Type 和 reflect.Value 会混淆正在执行的程序，但是它做的事情正是编程语言做的事情。记住：只要反射对象要修改它们表示的对象，就必须获取它们表示的对象的地址。</p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>把反射应用到结构体时，常用的方式是 使用反射修改一个结构体的某些字段。只要拥有结构体的地址，我们就可以修改它的字段。<br>下面是一个简单的例子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</div><div class="line">	A <span class="keyword">int</span></div><div class="line">	B <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line">t := T&#123;<span class="number">23</span>, <span class="string">"skidoo"</span>&#125;</div><div class="line">s := reflect.ValueOf(&amp;t).Elem()</div><div class="line">	typeOfT := s.Type()</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; s.NumField(); i++ &#123;</div><div class="line">		f := s.Field(i)</div><div class="line">		fmt.Printf(<span class="string">"%d: %s %s = %v\n"</span>, i,</div><div class="line">			typeOfT.Field(i).Name, f.Type(), f.Interface())</div><div class="line">	&#125;</div></pre></td></tr></table></figure><br>上面这段代码的输出如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>: A <span class="keyword">int</span> = <span class="number">23</span></div><div class="line"><span class="number">1</span>: B <span class="keyword">string</span> = skidoo</div></pre></td></tr></table></figure><br>这里有一点需要指出:变量 T 的字段都是首字母大写的（暴露到外部），因为struct中只有暴露到外部的字段才是“可写的”。<br>由于变量 s 包含一个“可写的”反射对象，我们可以修改结构体的字段:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.Field(<span class="number">0</span>).SetInt(<span class="number">77</span>)</div><div class="line">s.Field(<span class="number">1</span>).SetString(<span class="string">"Sunset Strip"</span>)</div><div class="line">fmt.Println(<span class="string">"t is now"</span>, t)</div></pre></td></tr></table></figure><br>上面的代码输出如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t is now &#123;<span class="number">77</span> Sunset Strip&#125;</div></pre></td></tr></table></figure><br>如果变量s是通过t，而不是&amp;t创建的，调用SetInt和SetString将会失败，因为t的字段是不可写的。<br>顺便一提，struct中的tag可以通过反射获得:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tag := s.Field(<span class="number">0</span>).Tag.Get(<span class="string">"testtag"</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;反射简介&quot;&gt;&lt;a href=&quot;#反射简介&quot; class=&quot;headerlink&quot; title=&quot;反射简介&quot;&gt;&lt;/a&gt;反射简介&lt;/h2&gt;&lt;p&gt;Reflection(反射)在计算机中表示 程序能够检查自身结构的能力，尤其是类型。 它是元编程的一种形式。&lt;br&gt;本文中，
    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="reflecttion" scheme="http://blog.lxmoses.com/tags/reflecttion/"/>
    
  </entry>
  
  <entry>
    <title>Goroutine &amp; Channel</title>
    <link href="http://blog.lxmoses.com/2017/03/22/goroutine/"/>
    <id>http://blog.lxmoses.com/2017/03/22/goroutine/</id>
    <published>2017-03-22T10:03:39.000Z</published>
    <updated>2017-03-22T10:27:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习go语言，go语言一大特性就是并发。 参见<a href="http://hustcat.github.io/channel/" target="_blank" rel="external">这篇博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习go语言，go语言一大特性就是并发。 参见&lt;a href=&quot;http://hustcat.github.io/channel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇博客&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="并发" scheme="http://blog.lxmoses.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Do-While妙用</title>
    <link href="http://blog.lxmoses.com/2017/03/15/do-while%E5%A6%99%E7%94%A8/"/>
    <id>http://blog.lxmoses.com/2017/03/15/do-while妙用/</id>
    <published>2017-03-15T03:07:05.000Z</published>
    <updated>2017-03-15T03:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于do-while，笔者之前一直停留在学习c++基础语法时的理解，然而后面读框架代码时经常看到do…while(0)这样的用法，当时不理解这样用的用意。<br>纸上得来终觉浅，绝知此事要躬行。 当我们看技术书籍或者看一些优秀的项目源码时，对于很多小地方可能也就是一目置之，自己亲身经历一次才会深刻的明白，这里也提醒自己以后多多注意细节。<br>最近在实现一个类的初始化函数如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> MapFactory::init()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">bool</span> ret = <span class="literal">false</span>;</div><div class="line">	ret = initSimple();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initMiddle();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initHard();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initSpecial();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>当时笔者在写上面这段代码时就感觉好麻烦，好多的return语句。<br>然而，我们可以巧妙地借用下循环里break的思路，优化如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> MapFactory::init()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">bool</span> ret = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">do</span>&#123;</div><div class="line">		ret = initSimple();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initMiddle();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initHard();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initSpecial();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">while</span>(<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>当然上面的例子并没有恰当地表现出这个技巧的实用之处，因为上面的代码在每一次调用之时无外乎失败就直接返回，但是假如子初始化函数失败还需要释放资源，比如指针之类的。嗯，自行体会。</p>
<p>之前在阅读的代码中看到的do…while(0)代码更为常见的是红定义中，参加下面代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) do&#123; delete p; p = NULL;&#125; while(0)</span></div></pre></td></tr></table></figure><br>假设这里去掉do…while(0),<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) delete p; p = NULL;</span></div></pre></td></tr></table></figure><br>注意下面宏调用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != p) SAFE_DELETE(p)</div><div class="line"><span class="keyword">else</span> <span class="keyword">do</span> something</div></pre></td></tr></table></figure><br>这里如果是下面的定义方式，程序编译会报错，这里的do-while相当于提供了一种健壮的宏定义方式，至于个中细节，自行体会。<br>最后我想说的是，程序就像是一件艺术品，没有最好的代码实现， 只有更好，更优雅的代码。只有在一次又一次的实战中不断总结，才能不断提升自己。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于do-while，笔者之前一直停留在学习c++基础语法时的理解，然而后面读框架代码时经常看到do…while(0)这样的用法，当时不理解这样用的用意。&lt;br&gt;纸上得来终觉浅，绝知此事要躬行。 当我们看技术书籍或者看一些优秀的项目源码时，对于很多小地方可能也就是一目置之，
    
    </summary>
    
      <category term="编程技巧" scheme="http://blog.lxmoses.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="编程技巧" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>关于随机数</title>
    <link href="http://blog.lxmoses.com/2017/03/14/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://blog.lxmoses.com/2017/03/14/关于随机数/</id>
    <published>2017-03-14T08:14:40.000Z</published>
    <updated>2017-03-14T08:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在设计一个随机数时遇到了一些问题：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>(<span class="number">10</span>);</div><div class="line"><span class="keyword">int</span> index = <span class="built_in">floor</span>(CCRANDOM_0_1() * <span class="built_in">array</span>.size)</div></pre></td></tr></table></figure><br>就是xcode里上面简单的几行代码，让我纠结很久。经过测试，主要原因是，xcode里float或者double转换成int时不能正确转换，至于原因，在下搜索很久都没找到答案， 暂时就这样不了了之吧。<br>嗯，于是发现了c++ 11关于随机数的新特性，上述代码改为如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></div><div class="line"></div><div class="line">srand(time(<span class="literal">NULL</span>));</div><div class="line"><span class="built_in">std</span>::default_random_engine e;</div><div class="line"><span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; u(<span class="number">0</span>, <span class="built_in">array</span>.size());</div><div class="line"><span class="keyword">auto</span> index = u(e);</div></pre></td></tr></table></figure><br>路漫漫其修远兮。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在设计一个随机数时遇到了一些问题：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div
    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="c++" scheme="http://blog.lxmoses.com/tags/c/"/>
    
      <category term="随机数" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Javascript继承详解</title>
    <link href="http://blog.lxmoses.com/2017/03/13/javascript%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.lxmoses.com/2017/03/13/javascript继承详解/</id>
    <published>2017-03-13T03:42:40.000Z</published>
    <updated>2017-03-13T03:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近要用cocos2d-js开发游戏，所以有必要学习下js，在此mark下js的继承。<br>参见三生石上的系列博客：<br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html" target="_blank" rel="external">javascript继承详解(一)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/08/1519251.html" target="_blank" rel="external">javascript继承详解(二)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/09/1519890.html" target="_blank" rel="external">javascript继承详解(三)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/13/1522647.html" target="_blank" rel="external">javascript继承详解(四)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/14/1523523.html" target="_blank" rel="external">javascript继承详解(五)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/15/1524263.html" target="_blank" rel="external">javascript继承详解(六)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于最近要用cocos2d-js开发游戏，所以有必要学习下js，在此mark下js的继承。&lt;br&gt;参见三生石上的系列博客：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&quot; 
    
    </summary>
    
      <category term="js" scheme="http://blog.lxmoses.com/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.lxmoses.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2d-Js游戏引擎在各平台运行概要</title>
    <link href="http://blog.lxmoses.com/2017/03/10/cocos2d-js%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%9C%A8%E5%90%84%E5%B9%B3%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%A6%82%E8%A6%81/"/>
    <id>http://blog.lxmoses.com/2017/03/10/cocos2d-js游戏引擎在各平台运行概要/</id>
    <published>2017-03-10T02:49:24.000Z</published>
    <updated>2017-03-10T02:51:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://forum.cocos.com/t/cocos2d-js/23080" target="_blank" rel="external">转自这里 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://forum.cocos.com/t/cocos2d-js/23080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转自这里 &lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
      <category term="cocos2d-JS" scheme="http://blog.lxmoses.com/tags/cocos2d-JS/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2dx打包apk</title>
    <link href="http://blog.lxmoses.com/2017/03/09/cocos2dx%E6%89%93%E5%8C%85apk/"/>
    <id>http://blog.lxmoses.com/2017/03/09/cocos2dx打包apk/</id>
    <published>2017-03-09T03:54:18.000Z</published>
    <updated>2017-03-09T06:02:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天晚上第一次开始着手将cocos2dx project打包apk，在此记录下。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h4><p>下载jdk，并安装</p>
<h4 id="ndk"><a href="#ndk" class="headerlink" title="ndk"></a>ndk</h4><p>下载ndk，并解压</p>
<h3 id="android-sdk"><a href="#android-sdk" class="headerlink" title="android sdk"></a>android sdk</h3><p>下载android, sdk并解压</p>
<h4 id="ant"><a href="#ant" class="headerlink" title="ant"></a>ant</h4><p>下载ant, 并解压</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>进入cocos目录，运行setup.py,按提示操作即可。</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>进入cocos工程主目录，利用cocos工具编译如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos compile -p android --ap android-25<span class="comment">#--ap代表sdk版本</span></div></pre></td></tr></table></figure><br>上面的步骤会在cocos工程文件里生成一个apk文件，大功告成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天晚上第一次开始着手将cocos2dx project打包apk，在此记录下。&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;h4 id=&quot;jdk&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2dx内存管理机制</title>
    <link href="http://blog.lxmoses.com/2017/03/06/cocos2dx%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.lxmoses.com/2017/03/06/cocos2dx内存管理机制/</id>
    <published>2017-03-06T09:28:26.000Z</published>
    <updated>2017-03-07T02:08:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>cocos2dx里的所有节点对象都继承自Ref<br>下面是Ref的源代码核心部分摘录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Ref</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">retain</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Ref * <span class="title">autorelease</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getReferenceCount</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">	Ref();</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">virtual</span> ~Ref();</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> _referenceCount;</div><div class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> AutoreleasePool;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Ref::Ref(): _referenceCount(<span class="number">1</span>)&#123;&#125;</div><div class="line">Ref::~Ref() &#123;&#125;</div><div class="line"><span class="keyword">void</span> Ref::retain()</div><div class="line">&#123;</div><div class="line">	assert(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should be greater than 0"</span>);</div><div class="line">	++_referenceCount;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> Ref::release()</div><div class="line">&#123;</div><div class="line">	assert(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should be greater than 0"</span>);</div><div class="line">	--_referenceCount;</div><div class="line">	<span class="keyword">if</span>(_referenceCount == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">delete</span> <span class="keyword">this</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">Ref * Ref::autorelease()</div><div class="line">&#123;</div><div class="line">	PoolManager::getInstance()-&gt;getCurrentPool()-&gt;addObject(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Ref::getReferenceCount() <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> _referenceCount;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>可以看到Ref主要就是运用了引用计数，在一个节点的create函数中通常都会都会调用autorelease,在这个函数中调用的是AutoreleasePool的addObject方法。<br>下面是AutoreleasePool以及PoolManager的源代码实现核心部分摘录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> AutoreleasePool</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	AutoreleasePool();<span class="comment">//warning Don't create an autorelease pool in heap, create it in stack.</span></div><div class="line">	AutoreleasePool(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name);</div><div class="line">	~AutoreleasePool();</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addObject</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Ref *&gt; _managedObjectArray;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> _name;</div><div class="line">&#125;</div><div class="line">AutoreleasePool::AutoreleasePool() : _name(<span class="string">""</span>)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.reserve(<span class="number">150</span>);</div><div class="line">	PoolManager::getInstance()-&gt;push(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">AutoreleasePool::AutoreleasePool(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name):_name(name)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.reserve(<span class="number">150</span>);</div><div class="line">	PoolManager::getInstance()-&gt;push(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">AutoreleasePool::~AutoreleasePool()</div><div class="line">&#123;</div><div class="line">	clear();</div><div class="line">	PoolManager::getInstance()-&gt;pop();</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> AutoreleasePool::addObject(Ref * object)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.push_back(object);</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> AutoreleasePool::clear()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Ref*&gt; releasings;</div><div class="line">	releasings.swap(_managedObjectArray);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;obj : releasings)</div><div class="line">	&#123;</div><div class="line">		obj-&gt;release();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> PoolManager</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">static</span> PoolManager * <span class="title">getInstance</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">AutoreleasePool * <span class="title">getCurrentPool</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> AutoreleasePool;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	PoolManager();</div><div class="line">	~PoolManager();</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(AutoreleasePool * pool)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</div><div class="line">	<span class="keyword">static</span> PoolManager * s_singleInstance;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AutoreleasePool *&gt; _releasePoolStack;</div><div class="line">&#125;</div><div class="line">PoolManager * PoolManager::getInstance()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (s_singleInstance == <span class="literal">nullptr</span>)</div><div class="line">	&#123;</div><div class="line">		s_singleInstance = <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) PoolManager();</div><div class="line">		<span class="comment">// Add the first auto release pool</span></div><div class="line">		<span class="keyword">new</span> AutoreleasePool(<span class="string">"cocos2d autorelease pool"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> s_singleInstance;</div><div class="line">&#125;</div><div class="line">PoolManager::PoolManager()</div><div class="line">&#123;</div><div class="line">	_releasePoolStack.reserve(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">PoolManager::~PoolManager()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(!_releasePoolStack.empty())</div><div class="line">	&#123;</div><div class="line">		AutoreleasePool * pool = _releasePoolStack.back();</div><div class="line">		<span class="keyword">delete</span> pool;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">PoolManager::getCurrentPool() <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> _releasePoolStack.back();</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> PoolManager::push(AutoreleasePool * pool)</div><div class="line">&#123;</div><div class="line">	    _releasePoolStack.push_back(pool);</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> PoolManager::pop()</div><div class="line">&#123;</div><div class="line">	assert(!_releasePoolStack.empty());</div><div class="line">	_releasePoolStack.pop_back();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>总结：<br>1.autorelease()的实质是将对象加入自动释放池，对象的引用计数不会立刻减1，在自动释放池被回收时对象执行release()。<br>2.autorelease()只有在自动释放池被释放时才会进行一次释放操作，如果对象释放的次数超过了应有的次数，则这个错误在调用autorelease()时并不会被发现，只有当自动释放池被释放时（通常也就是游戏的每一帧结束时），游戏才会崩溃。在这种情况下，定位错误就变得十分困难了。例如，在游戏中，一个对象含有1个引用计数，但是却被调用了两次autorelease()。在第二次调用autorelease()时，游戏会继续执行这一帧，结束游戏时才会崩溃，很难及时找到出错的地点。因此，我们建议在开发过程中应该避免滥用autorelease()，只在工厂方法等不得不用的情况下使用，尽量以release()来释放对象引用。<br>3.autorelease()并不是毫无代价的，其背后的释放池机制同样需要占用内存和CPU资源。过多的使用autorelease()会增加自动释放池的管理和释放池维护对象存取释放的支出。在内存和CPU资源本就不足的程序中使得系统资源更加紧张。此时就需要我们合理创建自动释放池管理对象autorelease。<br>不用的对象推荐使用release()来释放对象引用，立即回收。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cocos2dx里的所有节点对象都继承自Ref&lt;br&gt;下面是Ref的源代码核心部分摘录&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;
    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
      <category term="内存管理" scheme="http://blog.lxmoses.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Lambda--C++</title>
    <link href="http://blog.lxmoses.com/2017/03/02/lambda-c/"/>
    <id>http://blog.lxmoses.com/2017/03/02/lambda-c/</id>
    <published>2017-03-02T14:33:08.000Z</published>
    <updated>2017-03-02T14:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>参见<a href="https://www.devbean.net/2012/05/cpp11-lambda/" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参见&lt;a href=&quot;https://www.devbean.net/2012/05/cpp11-lambda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="lambda" scheme="http://blog.lxmoses.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>由Cocos2d-X工程入口窥见代理模式</title>
    <link href="http://blog.lxmoses.com/2017/03/02/%E7%94%B1Cocos2d-x%E5%B7%A5%E7%A8%8B%E5%85%A5%E5%8F%A3%E7%AA%A5%E8%A7%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.lxmoses.com/2017/03/02/由Cocos2d-x工程入口窥见代理模式/</id>
    <published>2017-03-02T05:29:02.000Z</published>
    <updated>2017-03-02T05:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://www.cnblogs.com/huashu/p/4446997.html" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;http://www.cnblogs.com/huashu/p/4446997.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
      <category term="设计模式" scheme="http://blog.lxmoses.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>记一次Github域名解析异常</title>
    <link href="http://blog.lxmoses.com/2017/02/17/github%E5%9F%9F%E5%90%8D%E6%B1%A1%E6%9F%93/"/>
    <id>http://blog.lxmoses.com/2017/02/17/github域名污染/</id>
    <published>2017-02-17T09:44:52.000Z</published>
    <updated>2017-02-17T10:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天写完博客后部署至github时，老是报错。如下图所示：<br><img src="/images/部署报错.png" alt=""><br>ping github.com如下图所示：<br><img src="/images/github域名解析异常.png" alt=""><br>更改host文件之后，可正常部署。<br><img src="/images/修改hosts文件.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天写完博客后部署至github时，老是报错。如下图所示：&lt;br&gt;&lt;img src=&quot;/images/部署报错.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;ping github.com如下图所示：&lt;br&gt;&lt;img src=&quot;/images/github域名解析异常.png&quot; alt=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回家</title>
    <link href="http://blog.lxmoses.com/2017/02/17/%E5%9B%9E%E5%AE%B6/"/>
    <id>http://blog.lxmoses.com/2017/02/17/回家/</id>
    <published>2017-02-17T01:40:03.000Z</published>
    <updated>2017-02-17T04:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离上次回家已经一年了，放假之后意兴阑珊，买了车票就踏上了回家的路。<br>第一件事就是前往驾校继续学习科目三，每天早上六点半去驾校，冷！师傅是个好人，了解到我时间很紧的情况之后，将已经安排的三个名额让出一个给我，非常感谢！学车的时候师傅天天吼我，但是无所谓~ 我把所有能犯的错都犯了两遍最后完美通过考试。<br>考试之余就是玩游戏以及打麻将了，哈哈，带回来的书一次也没看！老家的小伙伴一直在催我回去打牌，科目三过了之后迫不及待回到老家。早上打，下午打，晚上打。今年玩的血战，技术不行，运气不行，带回家的两千五输完了，哈哈。<br>今年结婚的亲戚特别多，连着三四天都有亲戚结婚，忽然发现周围的小伙伴都结婚了，伯伯还说我这个是钱也输了，媳妇也没有，哈哈。<br>正月十二，去家里附近的餐馆过了个生。<br>预约到二月十五日考科目四，顺利通过科目四。<br>买的十六号晚上的票，领走前一天接到一个电话，五年来最大的好消息。 仿佛命运的转折点，这是转运的节奏么。<br>2016，很精彩。2017，我会有怎样的经历？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上次回家已经一年了，放假之后意兴阑珊，买了车票就踏上了回家的路。&lt;br&gt;第一件事就是前往驾校继续学习科目三，每天早上六点半去驾校，冷！师傅是个好人，了解到我时间很紧的情况之后，将已经安排的三个名额让出一个给我，非常感谢！学车的时候师傅天天吼我，但是无所谓~ 我把所有能犯
    
    </summary>
    
      <category term="随笔" scheme="http://blog.lxmoses.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>DNS（域名系统）</title>
    <link href="http://blog.lxmoses.com/2017/01/07/DNS%EF%BC%88%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
    <id>http://blog.lxmoses.com/2017/01/07/DNS（域名系统）/</id>
    <published>2017-01-07T02:40:04.000Z</published>
    <updated>2017-01-07T11:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>DNS（域名系统）是一种用于TCP/IP应用程序的分布式数据库，它提供主机名字和IP地址之间的转换及有关电子邮件的选路信息。<br>从应用的角度上看，对DNS的访问是通过一个地址解析器（resolver）来完成的。在Unix主机中，该解析器主要是通过两个库函数gethostbyname（3）和gethostbyaddress（3）来访问的。</p>
<h2 id="DNS基础"><a href="#DNS基础" class="headerlink" title="DNS基础"></a>DNS基础</h2><p>DNS的名字空间和Unix的文件系统相似，也具有层次结构。下图显示了这种层次结构。<br><img src="/images/DNS的层次组织.jpg" alt=""><br>每个节点（上图中的圆圈）有一个至多63个字符长的标识。这棵树的树根是没有任何标识的特殊节点。命名标识中一律不区分大小写。命名树上任何一个节点的域名就是将从该节点到最高节点的域名串连起来，中间使用一个点“.”分割这些域名。域名树中的每个节点必须有一个唯一的域名，但域名树中的不同节点可使用相同的标识。<br>顶级域名被分为三个部分：<br>（1）arpa是一个用作地址到名字转换的特殊域<br>（2）7个3字符长的普通域，有些书也将这些域称为组织域。<br>（3）所有2字符长的域均是基于ISO3166中定义的国家代码，这些域被称为国家域，或地理域。 常见的me域名是前南斯拉夫地区西南部的国家黑山共和国（Montenegro，旧译“门的内哥罗”）的国家域名。现在也推出了一些新的域名，比如cloud顶级域名，属于国际通用新顶级域名，与.com、.net一样。然而.cloud域名行业特性更强，适合云计算设备、跳伞、天气预报等类型的企业或个人均可注册使用。<br>DNS的一个重要特征是DNS中域名中的授权，没有哪个机构来管理域名树中的每个标识，相反只有一个机构，即网络信息中心NIC负责分配顶级域和委派其他指定区域的授权机构。<br>一个独立管理的DNS子树称为一个区域。一个常见的区域是一个二级域，如noao.edu.许多二级域将它们的区域划分为更小的区域。例如大学可能根据不同的系来划分区域，公司可能根据不同的部门来划分区域。<br>一旦一个区域的授权机构被委派后，有它负责向该区域提供多个名字服务器。当一个新系统假如到一个区域中时，该区域的DNS管理者为该新系统申请一个域名和一个IP地址，并将它们加到名字服务器的数据库中。一个名字服务器负责一个或多个区域。一个区域的管理者必须为该区域提供一个主名字服务器和至少一个辅助名字服务器。主、辅名字服务器必须是独立和冗余的，以便当某个名字服务器发生故障不会影响该区域的名字服务。当一个新主机加入一个区域时，区域管理者将适当的信息（最少包括名字和IP地址）加入到运行在主名字服务器上的一个磁盘文件中，然后通知主名字服务器重新调入它的配置文件。辅名字服务器（通常是每隔3个小时）向主名字服务器询问是否有新数据。如果有新数据，则通过区域传送方式获得新数据。<br>当一个名字服务器没有请求的信息时，它必须与其它的名字服务器联系，这正是DNS的分布特性。然而，并不是每个名字服务器都知道如何同其他名字服务器联系。相反，每个名字服务器必须知道如何同根的名字服务器联系。所有的主名字服务器必须知道如何同根的名字服务器联系。跟服务器则知道所有二级域中的每个授权名字服务器的名字和位置（即IP地址）。这意味着这样一个反复的过程：正在处理请求的名字服务器与跟服务器联系，跟服务器告诉它与另一个名字服务器联系。<br>为了减少Internet上DNS的通信量，所有的名字服务器均使用高速缓存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;DNS（域名系统）是一种用于TCP/IP应用程序的分布式数据库，它提供主机名字和IP地址之间的转换及有关电子邮件的选路信息。&lt;br&gt;从应用的
    
    </summary>
    
      <category term="TCP/IP详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="DNS" scheme="http://blog.lxmoses.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>UDP（用户数据报协议）</title>
    <link href="http://blog.lxmoses.com/2017/01/06/UDP%EF%BC%88%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE%EF%BC%89/"/>
    <id>http://blog.lxmoses.com/2017/01/06/UDP（用户数据报协议）/</id>
    <published>2017-01-06T03:01:30.000Z</published>
    <updated>2017-01-06T07:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>UDP是一个简单地面向数据报的传输层协议：进程的每个输出操作正好产生一个UDP数据报，并组装成一份待发送的IP数据报。这与面向流字符的协议不同，如TCP,应用程序产生的全体数据与真正发送的单个IP数据报可能没有什么联系。<br>UDP数据报封装成一份IP数据报，如下图所示。<br><img src="/images/UDP封装.jpg" alt=""><br>UDP不提供可靠性：它把应用程序传给IP层的数据发送出去，但是并不保证它们能到达目的地。</p>
<h2 id="UDP首部"><a href="#UDP首部" class="headerlink" title="UDP首部"></a>UDP首部</h2><p>UDP首部的各字段如下图所示。<br><img src="/images/UDP首部.png" alt=""><br>端口号表示发送进程和接收进程。<br>UDP长度字段指的是UDP首部和UDP数据的字节长度。该字段的最小值为8字节（发送一份0字节的UDP数据报是ok的）。<br>UDP校验和，UDP和TCP在首部中都有覆盖它们首部和数据的检验和。UDP的检验和是可选的，而TCP的检验和是必需的。UDP的数据报的长度可以为奇数字节，但是检验和算法是把若干个16bit字相加。解决方法是必要时在最后增加填充字节0，这只是为了检验和的计算（也就是说，可能增加的填充字节不被传送）。其次，UDP数据报和TCP段都包括一个12字节长的伪首部，它是为了计算检验和而设置的。UDP校验和是一个端到端的校验和。它由发送端计算，然后由接收端验证。其目的是为了发现UDP首部和数据在发送端到接收端之间发生的任何改动。不要完全相信数据链路（如以太网，令牌环等）的CRC检验，应该始终打开端到端的检验和功能。而且如果你的数据很有价值，也不要完全相信UDP和TCP的校验和，因为这些都是简单地检验和，不能检测出所有可能发生的差错。</p>
<h2 id="UDP服务器的设计"><a href="#UDP服务器的设计" class="headerlink" title="UDP服务器的设计"></a>UDP服务器的设计</h2><h3 id="客户IP地址及端口号"><a href="#客户IP地址及端口号" class="headerlink" title="客户IP地址及端口号"></a>客户IP地址及端口号</h3><p>来自客户的事UDP数据报。IP首部包含源端和目的端IP地址，UDP首部包含了源端和目的端的UDP端口号。<br>这个特性允许一个交互UDP服务器对多个客户进行处理。给每个发送请求的客户端发回应答。</p>
<h3 id="目的IP地址"><a href="#目的IP地址" class="headerlink" title="目的IP地址"></a>目的IP地址</h3><p>一些应用程序需要知道数据报是发送给谁的，这要求操作系统从接收到的UDP数据报中将目的IP地址交给应用程序。不幸的是，并所有的操作系统都提供这个功能。</p>
<h3 id="UDP输入队列"><a href="#UDP输入队列" class="headerlink" title="UDP输入队列"></a>UDP输入队列</h3><p>通常程序所使用的每个UDP端口都与一个有限大小的输入队列相联系。这意味着，来自不同客户的差不多同时到达的请求将由UDP自动排队。接收到的UDP数据报以其接收顺序交给应用程序（在应用程序要求交送下一个数据报时）。然而，排队溢出造成内核中的UDP模块丢弃数据报的可能性是存在的。</p>
<h3 id="限制本地IP地址"><a href="#限制本地IP地址" class="headerlink" title="限制本地IP地址"></a>限制本地IP地址</h3><p>大多数UDP服务器在创建UDP端点时都使其本地IP地址具有通配符（wildcard）的特点。这就表明进入的UDP数据报如果其目的地为服务器端口，那么在任何本地接口均可接受到它。<br>当服务器创建端点时，它可以把其中一个主机本地IP地址包括广播地址指定为端点的本地IP地址。只有当目的IP地址与指定的地址相匹配时，进入的UDP数据报才能被送达这个端点。<br>有可能在相同的端口上启动不同的服务器，每个服务器具有不同的本地IP地址。但是，一般必须告诉系统应用程序重用相同的端口是没问题的。使用socket API时，必须指定SO_REUSEADDR选项。</p>
<h3 id="限制远端IP地址"><a href="#限制远端IP地址" class="headerlink" title="限制远端IP地址"></a>限制远端IP地址</h3><p>大多数系统允许UDP端点对远端地址进行限制。这说明端点将只能接收特定IP地址和端口号的UDP数据报。</p>
<h3 id="每个端口有多个接收者"><a href="#每个端口有多个接收者" class="headerlink" title="每个端口有多个接收者"></a>每个端口有多个接收者</h3><p>大多数的系统在某一时刻只允许一个程序端点与某个本地IP地址及UDP端口号关联。<br>在一个支持多播的系统上，这种情况将发生变化。多个端点可以使用同一个IP地址和UDP端口号，尽管应用程序通常必须告诉API是可行的。使用socket API时，必须指定SO_REUSEADDR选项。当UDP数据报到达目的IP地址为多播地址或广播地址，而且目的IP地址和端口号处有多个端点时，就向每个端点传送一份数据报的复制。但是如果UDP数据报到达的是一个单播地址，那么只向其中一个端点传送一份数据报的复制。选择哪个端点传送数据取决于各个不同的系统实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;UDP是一个简单地面向数据报的传输层协议：进程的每个输出操作正好产生一个UDP数据报，并组装成一份待发送的IP数据报。这与面向流字符的协议不
    
    </summary>
    
      <category term="TCP/IP详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="网络编程" scheme="http://blog.lxmoses.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="UDP" scheme="http://blog.lxmoses.com/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>在终端里查看外网Ip的方法</title>
    <link href="http://blog.lxmoses.com/2017/01/05/%E5%9C%A8%E7%BB%88%E7%AB%AF%E9%87%8C%E6%9F%A5%E7%9C%8B%E5%A4%96%E7%BD%91ip%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.lxmoses.com/2017/01/05/在终端里查看外网ip的方法/</id>
    <published>2017-01-05T04:36:29.000Z</published>
    <updated>2017-01-05T04:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="https://segmentfault.com/a/1190000000302955" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;https://segmentfault.com/a/1190000000302955&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="计算机基础" scheme="http://blog.lxmoses.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="IP" scheme="http://blog.lxmoses.com/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>IP:网际协议</title>
    <link href="http://blog.lxmoses.com/2017/01/04/IP-%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AE/"/>
    <id>http://blog.lxmoses.com/2017/01/04/IP-网际协议/</id>
    <published>2017-01-04T14:26:36.000Z</published>
    <updated>2017-01-06T11:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>IP是TCP/IP协议族中最为核心的协议。所有的TCP、UDP、ICMP、及IGMP数据都以IP数据报格式传输。<br>IP提供不可靠、无连接的数据报传送服务。<br>不可靠的意思是它不能保证IP数据报能成功到达目的地。任何要求的可靠性必须由上层来提供（如TCP）。<br>无连接这个术语的意思是IP并不维护任何关于后续数据报的状态信息。如果一信源向相同的信宿发送两个连续的数据报（先是A，然后是B），每个数据报都是独立地进行路由选择，可能选择不同的路线，因此B可能在A之前先到达。</p>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>互联网上的每个接口必须有一个唯一的Internet地址（IP地址）。IP地址具有一定的结构，五类不同的IP地址格式如下图所示。<br><img src="/images/五种不同格式的互联网地址.png" alt=""><br>有三类IP地址：单播地址（目的端为单个主机）、广播地址（目的端为给定网络上的所有主机）以及多播地址（目的端为同一组内的所有主机）</p>
<h2 id="IP首部"><a href="#IP首部" class="headerlink" title="IP首部"></a>IP首部</h2><p><img src="/images/IP数据报格式及首部中的各字段.jpg" alt=""><br>IP数据包的格式如上图所示, 普通的IP首部长为20个字节，除非含有选项字段。分析上图的首部，最高位在左边，记为0bit，最低位在右边，记为31bit。这种传输次序称作big endian字节序，由于TCP、IP首部中的所有二进制整数在网络中传输时都要求以这种次序，因此又称为网络字节序。以其他形式存储二进制整数的机器，例如little endian格式，则必须在传输数据之前把首部转换成网络字节序。<br>目前最常用的协议版本号是4，因此IP有时也称作IPV4.<br>首部长度指的是首部占32bit字的数目，包括任何选项。<br>服务类型（TOS)字段包括一个3bit的优先权字段（现在已被忽略），4bit的TOS字段和1bit未用但必须置为0.4bit的TOS分别代表：最小时延、最大吞吐量、最高可靠性和最小费用。<br>总长度字段是指整个IP数据报的长度，以字节为单位。由于该字段长16比特，所以IP数据报最长可达65535字节。<br>标识字段唯一地标识主机发送的每一份数据报。<br>TTL（time to live）生存时间字段设置了数据报可以经过的最多路由数器数。它指定了数据报的生存时间。TTL的初始值由源主机设置（通常为32或64），一旦经过一个处理它的路由器，它的值就减1。当该字段的值为0时，数据包就被丢弃，并发送ICMP报文通知源主机。<br>协议字段是一个长度为8bit的数值。1表示ICMP协议，2表示IGMP协议，6表示TCP协议，17表示UDP协议。<br>首部检验和字段是根据IP首部计算的校验码。具体可参见<a href="https://blog.lxmoses.com/2017/01/04/ip首部检验和/">这里</a><br>每一份IP数据报都包含源IP地址和目的IP地址。<br>最后一个是任选项，是数据报中的一个可变长的可选信息。</p>
<h2 id="IP路由选择"><a href="#IP路由选择" class="headerlink" title="IP路由选择"></a>IP路由选择</h2><p>此部分比较复杂，在以后的博文中会进行详细研究。</p>
<h2 id="子网寻址"><a href="#子网寻址" class="headerlink" title="子网寻址"></a>子网寻址</h2><p>现在所有的主机都要求支持子网编址。不是把IP地址看成单纯由单纯的一个网络号和一个主机号组成，而是把主机号再分成一个子网号和一个主机号。<br>这么做的原因是因为A类和B类地址为主机号分配了太多的空间，可分别容纳的主机数量为2的24次方-2和2的2的16次方-2（由于全0或全1的主机号是无效的，因此我们把总数-2）.事实上，在一个网络中人们并不安排这么多的主机。<br>从InterNIC获得某类IP网络号后，就由当地的系统管理员来进行分配，有他决定来决定是否建立子网，以及分配多少比特给子网号和主机号。<br>子网对外部路由器来说隐藏了内部网络阻止（一个校园或公司内部）的细节。<br>与30个C类地址，用一个包含30个子网的B类地址的好处是，它可以缩小Internet路由表的规模。</p>
<h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>子网掩码是一个32bit的值，其中值为1的比特留个网络号和子网号，为0的比特留给主机号。<br>尽管IP地址一般以点分十进制表示，但是子网掩码却经常用十六进制来表示。<br>给定子网掩码后，主机就可以确定IP数据报的目的是：<br>（1）本子网上的主机<br>（2）本网络中的其他主机<br>（3）其他网络上的主机</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;IP是TCP/IP协议族中最为核心的协议。所有的TCP、UDP、ICMP、及IGMP数据都以IP数据报格式传输。&lt;br&gt;IP提供不可靠、无连
    
    </summary>
    
      <category term="TCP/IP协议详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="网络编程" scheme="http://blog.lxmoses.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>IP首部检验和</title>
    <link href="http://blog.lxmoses.com/2017/01/04/ip%E9%A6%96%E9%83%A8%E6%A3%80%E9%AA%8C%E5%92%8C/"/>
    <id>http://blog.lxmoses.com/2017/01/04/ip首部检验和/</id>
    <published>2017-01-04T13:40:48.000Z</published>
    <updated>2017-01-06T11:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在发送数据时，为了计算数IP据报的校验和。应该按如下步骤：<br>（1）把IP数据报的校验和都置为0。<br>（2）把首部看成以16位为单位的数字组成，依次进行二进制反码求和。<br>（3）把得到的结果存入校验和字段中。<br>在接收数据时，计算数据报的校验和相对简单，按如下步骤：<br>（1）把首部看成以16位为单位的数字组成，依次进行二进制反码求和，包括校验和字段。<br>（2）检查计算出的校验和的结果是否等于零。<br>（3）如果等于零，说明被整除，校验是和正确。否则，校验和就是错误的，协议栈要抛弃这个数据包。<br>下面是校验代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="title">checksum</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> *buf,<span class="keyword">int</span> nword)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> sum;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(sum=<span class="number">0</span>;nword&gt;<span class="number">0</span>;nword--)&#123;</div><div class="line">		sum += *buf++;</div><div class="line">		sum = (sum&gt;&gt;<span class="number">16</span>) + (sum&amp;<span class="number">0xffff</span>);<span class="comment">//相加后最高位如果有进位，加到低位。</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ~sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">short</span> iph[]=&#123;<span class="number">0x4500</span>,<span class="number">0x00ad</span>,<span class="number">0x7755</span>,<span class="number">0x4000</span>,<span class="number">0x8006</span>,</div><div class="line">		<span class="number">0x0000</span>,<span class="number">0x0a97</span>,<span class="number">0x7819</span>,<span class="number">0x0a97</span>,<span class="number">0x781d</span>&#125;;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">short</span> cksum;</div><div class="line"></div><div class="line">	cksum=checksum(iph,<span class="number">20</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%X\n"</span>,cksum);</div><div class="line">	iph[<span class="number">5</span>]=cksum;</div><div class="line">	cksum=checksum(iph,<span class="number">20</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%X\n"</span>,cksum);</div><div class="line">	<span class="keyword">if</span>(cksum)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Checksum is incorrect!\n"</span>);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Checksum is correct!\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>上面的算法应该包含一些数理规律，对此笔者懒得追究了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在发送数据时，为了计算数IP据报的校验和。应该按如下步骤：&lt;br&gt;（1）把IP数据报的校验和都置为0。&lt;br&gt;（2）把首部看成以16位为单位的数字组成，依次进行二进制反码求和。&lt;br&gt;（3）把得到的结果存入校验和字段中。&lt;br&gt;在接收数据时，计算数据报的校验和相对简单，按如
    
    </summary>
    
      <category term="TCP/IP协议详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="网络编程" scheme="http://blog.lxmoses.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机数的表示和存储</title>
    <link href="http://blog.lxmoses.com/2017/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E6%95%B0%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://blog.lxmoses.com/2017/01/04/计算机中数的存储/</id>
    <published>2017-01-04T12:33:30.000Z</published>
    <updated>2017-01-04T12:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://www.cnblogs.com/lyfruit/archive/2013/04/07/3003376.html" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;http://www.cnblogs.com/lyfruit/archive/2013/04/07/3003376.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="计算机基础" scheme="http://blog.lxmoses.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="编码" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
