<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟云</title>
  <subtitle>let it be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lxmoses.com/"/>
  <updated>2020-06-29T11:08:30.182Z</updated>
  <id>http://blog.lxmoses.com/</id>
  
  <author>
    <name>moses</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>火车进站</title>
    <link href="http://blog.lxmoses.com/2020/06/29/%E7%81%AB%E8%BD%A6%E8%BF%9B%E7%AB%99/"/>
    <id>http://blog.lxmoses.com/2020/06/29/火车进站/</id>
    <published>2020-06-29T11:03:24.000Z</published>
    <updated>2020-06-29T11:08:30.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">给定一个正整数N代表火车数量，0&lt;N&lt;10，接下来输入火车入站的序列，一共N辆火车，每辆火车以数字1-9编号，火车站只有一个方向进出，同时停靠在火车站的列车中，只有后进站的出站了，先进站的才能出站。要求以字典序排序输出火车出站的序列号。</div></pre></td></tr></table></figure>
<h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">有多组测试用例，每一组第一行输入一个正整数N（0&lt;N&lt;10），第二行包括N个正整数，范围为1到9。</div></pre></td></tr></table></figure>
<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">输出以字典序从小到大排序的火车出站序列号，每个编号以空格隔开，每个输出序列换行，具体见sample。</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">1 2 3</div></pre></td></tr></table></figure>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1 2 3</div><div class="line">1 3 2</div><div class="line">2 1 3</div><div class="line">2 3 1</div><div class="line">3 2 1</div></pre></td></tr></table></figure>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"sort"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> stack []<span class="keyword">string</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stack)</span> <span class="title">push</span><span class="params">(v <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	*s = <span class="built_in">append</span>(*s, v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stack)</span> <span class="title">pop</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	l := <span class="built_in">len</span>(*s)</div><div class="line">	result := (*s)[l<span class="number">-1</span>]</div><div class="line">	*s = (*s)[<span class="number">0</span> : l<span class="number">-1</span>]</div><div class="line">	<span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stack)</span> <span class="title">unshift</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	result := (*s)[<span class="number">0</span>]</div><div class="line">	*s = (*s)[<span class="number">1</span>:]</div><div class="line">	<span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stack)</span> <span class="title">empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(*s) == <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">var</span> N <span class="keyword">uint8</span></div><div class="line">		_, err := fmt.Scan(&amp;N)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">break</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> trainList = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, N)</div><div class="line">		<span class="keyword">for</span> i := <span class="keyword">uint8</span>(<span class="number">0</span>); i &lt; N; i++ &#123;</div><div class="line">			<span class="keyword">var</span> train <span class="keyword">string</span></div><div class="line">			fmt.Scan(&amp;train)</div><div class="line">			trainList = <span class="built_in">append</span>(trainList, train)</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		pre := stack(trainList)</div><div class="line">		in := stack&#123;&#125;</div><div class="line">		out := stack&#123;&#125;</div><div class="line">		handle(pre, in, out)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sort.Strings(results)</div><div class="line">	<span class="keyword">for</span> _, result := <span class="keyword">range</span> results &#123;</div><div class="line">		fmt.Println(result)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">	results []<span class="keyword">string</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(pre, in, out stack)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> pre.empty() &amp;&amp; in.empty() &#123;</div><div class="line">		results = <span class="built_in">append</span>(results, strings.Join(out, <span class="string">" "</span>))</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> !pre.empty() &#123;</div><div class="line">		prec := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(pre))</div><div class="line">		inc := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(in))</div><div class="line">		outc := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(out))</div><div class="line"></div><div class="line">		<span class="built_in">copy</span>(prec, pre)</div><div class="line">		<span class="built_in">copy</span>(inc, in)</div><div class="line">		<span class="built_in">copy</span>(outc, out)</div><div class="line"></div><div class="line">		pres := stack(prec)</div><div class="line">		ins := stack(inc)</div><div class="line">		outs := stack(outc)</div><div class="line"></div><div class="line">		ins.push(pres.unshift())</div><div class="line">		handle(pres, ins, outs)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> !in.empty() &#123;</div><div class="line">		prec := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(pre))</div><div class="line">		inc := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(in))</div><div class="line">		outc := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(out))</div><div class="line"></div><div class="line">		<span class="built_in">copy</span>(prec, pre)</div><div class="line">		<span class="built_in">copy</span>(inc, in)</div><div class="line">		<span class="built_in">copy</span>(outc, out)</div><div class="line"></div><div class="line">		pres := stack(prec)</div><div class="line">		ins := stack(inc)</div><div class="line">		outs := stack(outc)</div><div class="line"></div><div class="line">		outs.push(ins.pop())</div><div class="line">		handle(pres, ins, outs)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.lxmoses.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于Ipv4和ipv6</title>
    <link href="http://blog.lxmoses.com/2019/03/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8Eipv4%E5%92%8Cipv6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.lxmoses.com/2019/03/07/记一次关于ipv4和ipv6的问题/</id>
    <published>2019-03-07T08:09:05.000Z</published>
    <updated>2019-03-07T08:21:27.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>服务器监听10000端口, 客户端可以建立tcp连接但是服务端始终无法收到数据.</p>
<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>笔者首先排查了客户端程序, 发现整个过程没什么问题, 客户端成功的建立了tcp连接并且发送了数据. 随后笔者在服务端加日志发现服务器并没有accept任何连接. 猜测可能是端口占用问题，果然发现迅雷占用了10000端口.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>让笔者纳闷的是为什么端口被占用却没有报错.<br>原来迅雷占用了10000端口, 但是netstat显示迅雷占用的ipv4, 服务器监听端口的时候会监听ipv4/ipv6连接. 虽然ipv4被占用了但是还是成功的监听了ipv6端口. 当客户端建立连接时选择的是ipv4端口, 所以便出现了上述让笔者感觉怪异的现象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;服务器监听10000端口, 客户端可以建立tcp连接但是服务端始终无法收到数据.&lt;/p&gt;
&lt;h2 id=&quot;排查&quot;&gt;&lt;a href=&quot;#排查&quot;
    
    </summary>
    
      <category term="网络编程" scheme="http://blog.lxmoses.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程技巧" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://blog.lxmoses.com/2018/05/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://blog.lxmoses.com/2018/05/21/动态规划/</id>
    <published>2018-05-21T12:02:18.000Z</published>
    <updated>2018-05-21T13:51:38.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Those who cannot remember the past are condemned to repeat it.<br>动态规划算法的核心是记住已经求过的解，记住求解的方式有两种：自顶向下的备忘录法和自底向上。</p>
<h2 id="小试牛刀-杠条切割问题"><a href="#小试牛刀-杠条切割问题" class="headerlink" title="小试牛刀-杠条切割问题"></a>小试牛刀-杠条切割问题</h2><p><img src="/images/杠条切割.png" alt=""><br>上图节选自算法导论。</p>
<h3 id="经典朴素递归"><a href="#经典朴素递归" class="headerlink" title="经典朴素递归"></a>经典朴素递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">CutRod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (curRodLen == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=curRodLen; ++curRodLen) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = rodLen2Price[i] + CutRod(rodLen2Price, curRodLen-i);</div><div class="line">        q = q &lt; tmp ? tmp : q;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> q;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自顶向下递归实现的CutRod效率很差，原因在于CutRod反复地用相同的参数值对自身进行递归调用，即它反复求解相同的子问题。而且由于递归调用次数太多会栈溢出。</p>
<h3 id="动态规划-自顶向下"><a href="#动态规划-自顶向下" class="headerlink" title="动态规划-自顶向下"></a>动态规划-自顶向下</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">MemorizedCutRodAux</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen, <span class="keyword">int</span> *optimalRodTotalMoney)</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"调用MemorizedCutRodAux"</span>&lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span> (optimalRodTotalMoney[curRodLen] &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> optimalRodTotalMoney[curRodLen];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (curRodLen == <span class="number">0</span>) &#123;</div><div class="line">        q = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=curRodLen ; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = rodLen2Price[i] + MemorizedCutRodAux(rodLen2Price, curRodLen-i, optimalRodTotalMoney);</div><div class="line">            q = (q &lt; tmp ? tmp : q);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    optimalRodTotalMoney[curRodLen] = q;</div><div class="line">    <span class="keyword">return</span> q;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">MemorizedCutRod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> * optimalRodTotalMoney = <span class="keyword">new</span> <span class="keyword">int</span>[curRodLen + <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= curRodLen; ++i) &#123;</div><div class="line">        optimalRodTotalMoney[i] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> MemorizedCutRodAux(rodLen2Price, curRodLen, optimalRodTotalMoney);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方法仍按自然的递归形式编写过程，但过程会保存每个子问题的解。当需要一个子问题的解时，过程首先检查是否已经保存过此解。如果是，则直接返回保存的值，从而节省了计算时间；否则，按通常方式计算这个子问题。</p>
<h3 id="动态规划-自底向上"><a href="#动态规划-自底向上" class="headerlink" title="动态规划-自底向上"></a>动态规划-自底向上</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BUCutRod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen, <span class="keyword">int</span> * optimalRodTotalMoney, <span class="keyword">int</span> *optimalSolution)</span> </span>&#123;</div><div class="line">    optimalRodTotalMoney[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=curRodLen; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> q = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = rodLen2Price[j] + optimalRodTotalMoney[i-j];</div><div class="line">            <span class="keyword">if</span> (q &lt; tmp) &#123;</div><div class="line">                q = tmp;</div><div class="line">                optimalSolution[i] = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        optimalRodTotalMoney[i] = q;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintBUCutRod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen, <span class="keyword">int</span> * optimalRodTotalMoney, <span class="keyword">int</span> *optimalSolution)</span> </span>&#123;</div><div class="line">    BUCutRod(rodLen2Price, curRodLen, optimalRodTotalMoney, optimalSolution);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"长度为"</span> &lt;&lt; curRodLen &lt;&lt; <span class="string">"的杠条最大收益为:"</span> &lt;&lt; optimalRodTotalMoney[curRodLen] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最优方案的杠条长度分别为:"</span>;</div><div class="line">    <span class="keyword">while</span> (curRodLen != <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; optimalSolution[curRodLen] &lt;&lt; <span class="string">" "</span>;</div><div class="line">        curRodLen -= optimalSolution[curRodLen];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>恰当定义子问题“规模”的概念，使得任何子问题的求解都只依赖于“更小的”子问题的求解。因此，我们可以将子问题按照规模顺序，由小至大顺序进行求解。当求解某个子问题时，它所依赖的那些更小的子问题都已求解完毕，结果已经保存。每个子问题只需求解一次，当我们求解它时，它的所有前提子问题都已求解完成。<br>由于没有频繁的递归函数调用的开销，自底向上方法的时间复杂度函数通常具有更小的系数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Those who cannot remember the past are condemned to repeat it.&lt;br&gt;动态规划
    
    </summary>
    
      <category term="算法" scheme="http://blog.lxmoses.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang代码规范</title>
    <link href="http://blog.lxmoses.com/2017/06/07/golang%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://blog.lxmoses.com/2017/06/07/golang代码规范/</id>
    <published>2017-06-07T08:57:02.000Z</published>
    <updated>2017-06-07T08:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://studygolang.com/articles/4346" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;http://studygolang.com/articles/4346&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="编程规范" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Session与cookie</title>
    <link href="http://blog.lxmoses.com/2017/05/15/session%E4%B8%8Ecookie/"/>
    <id>http://blog.lxmoses.com/2017/05/15/session与cookie/</id>
    <published>2017-05-15T08:06:10.000Z</published>
    <updated>2017-05-15T08:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://harttle.com/2015/08/10/cookie-session.html" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;http://harttle.com/2015/08/10/cookie-session.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux原子操作与锁</title>
    <link href="http://blog.lxmoses.com/2017/04/13/Linux%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8E%E9%94%81/"/>
    <id>http://blog.lxmoses.com/2017/04/13/Linux原子操作与锁/</id>
    <published>2017-04-13T04:11:59.000Z</published>
    <updated>2017-04-13T06:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>Linux 中最简单的同步方法就是原子操作。原子 意味着临界段被包含在 API 函数中。不需要额外的锁定，因为 API 函数已经包含了锁定。由于 C 不能实现原子操作，因此 Linux 依靠底层架构来提供这项功能。各种底层架构存在很大差异，因此原子函数的实现方法也各不相同。一些方法完全通过汇编语言来实现，而另一些方法依靠 c 语言并且使用 local_irq_save 和 local_irq_restore 禁用中断。<br>当需要保护的数据非常简单时，例如一个计数器，原子运算符是种理想的方法。尽管原理简单，原子 API 提供了许多针对不同情形的运算符。</p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量的本质也是一个计数器，用来记录对某个资源（如共享内存）的存取状况。用来协调不同进程间的数据对象，最主要的应用是共享内存方式的进程间通信。<br>Linux2.6.26下定义的信号量结构体：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> semaphore &#123;</div><div class="line">	<span class="keyword">spinlock_t</span>                lock;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>             count;</div><div class="line">	<span class="keyword">struct</span> list_head        wait_list;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>从以上信号量的定义中，可以看到信号量底层使用到了spinlock的锁定机制，这个spinlock主要用来确保对count成员的原子性的操作(count–)和测试(count &gt; 0)。</p>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>两种形式的制约关系</p>
<h4 id="间接相互制约关系（互斥）"><a href="#间接相互制约关系（互斥）" class="headerlink" title="间接相互制约关系（互斥）"></a>间接相互制约关系（互斥）</h4><p>若某一进程要求使用某种资源，而该资源正好被另一进程使用，并且该资源不允许两个进程同时使用，那么该进程只好等待已占有的资源的进程释放资源后再使用。这种制约关系可以用“进程-资源-进程”的形式表示。例如，打印机资源，进程互斥经典问题中生产者-生产者问题。</p>
<h4 id="直接相互制约关系（同步）"><a href="#直接相互制约关系（同步）" class="headerlink" title="直接相互制约关系（同步）"></a>直接相互制约关系（同步）</h4><p>某一进程若收不到另一进程提供的必要信息就不能继续运行下去，表明了两个进程之间在某些点上要交换信息，相互交流运行情况。这种制约关系的进本形式是“进程-进程”。例如生产者与消费者问题，生产者生产产品并放入缓冲池，消费者从缓冲池取走产品进行消费。这两者就是同步关系。</p>
<p>区分互斥和同步只需记住，同类进程即为互斥关系，不同类进程即为同步关系。<br>临界资源：同时只允许一个进程使用的资源。<br>临界区：进程中用于访问临界资源的代码段，又称临界段。<br>每个进程的临界区代码可以不同，临界区代码由于要访问临界资源，因此要在进入临界区之前进行检查，至于每个进程对临界资源进行怎样的操作，这和临界资源及互斥同步管理是无关的。<br>Linux 2.6.26中mutex的定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> mutex &#123;</div><div class="line">	<span class="comment">/* 1: unlocked, 0: locked, negative: locked, possible waiters */</span></div><div class="line">	<span class="keyword">atomic_t</span>                  count;<span class="comment">//原子操作类型变量</span></div><div class="line">	<span class="keyword">spinlock_t</span>                wait_lock;<span class="comment">//自旋锁类型变量</span></div><div class="line">	<span class="keyword">struct</span> list_head          wait_list;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_MUTEXES</span></div><div class="line">	<span class="keyword">struct</span> thread_info        *owner;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">char</span>                *name;</div><div class="line">	<span class="keyword">void</span>                      *magic;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_LOCK_ALLOC</span></div><div class="line">	<span class="keyword">struct</span> lockdep_map         dep_map;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><br>对比前面的struct semaphore，struct mutex除了增加了几个作为debug用途的成员变量外，和semaphore几乎长得一样。但是mutex的引入主要是为了提供互斥机制，以避免多个进程同时在一个临界区中运行。<br>可以把互斥锁看成二值信号量。</p>
<h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>自旋锁也是实现保护共享资源的一种锁机制，与互斥锁比较类似，都是为了解决对某资源的互斥使用。无论是互斥锁还是自旋锁，在任何时刻最多只有一个保持者。也就是说，任何时刻最多只有一个执行单元获得锁。两者的不同之处是，对于互斥锁而言，如果资源已经被占用，其它的资源申请进程只能进入sleep状态。但是自旋锁不会引起调用者sleep，如果自旋锁已经被别的执行单元保持，调用者就一直循环在等待该自旋锁的保持者是否释放该锁。</p>
<h4 id="自旋锁一般原理"><a href="#自旋锁一般原理" class="headerlink" title="自旋锁一般原理"></a>自旋锁一般原理</h4><p>跟互斥锁一样，一个执行单元要想访问被自旋锁保护的共享资源，必须先得到锁，在访问完共享资源后，必须释放锁。如果在获取自旋锁时，没有任何执行单元保持该锁，那么将立即得到锁；如果在获取自旋锁时锁已经有保持者，那么获取锁操作将自旋在那里，直到该自旋锁的保持者释放了锁。由此我们可以看出，自旋锁是一种比较低级的保护数据结构或代码片段的原始方式，这种锁可能存在两个问题：死锁和过多占用cpu资源。</p>
<h4 id="自旋锁适用情况"><a href="#自旋锁适用情况" class="headerlink" title="自旋锁适用情况"></a>自旋锁适用情况</h4><p>自旋锁比较适用于锁使用者保持锁时间比较短的情况，正是由于自旋锁使用者一般保持较短的锁时间，因此选择自选而不是睡眠是非常必要的，因为自旋锁的效率远高于互斥锁。信号量和读写信号量适用于保持时间较长的情况，它们会导致调用者sleep，因此只能在进程上下文使用。而自旋锁适合于保持时间非常短的情况，它可以再任何上下文使用。如果被保护的共享资源只在进程上下文访问，使用信号量保护该共享资源非常合适，如果对共享资源的访问时间非常短，自旋锁也可以。但是如果被保护的共享资源需要在中断上下文访问（包括底半部即中断处理句柄和顶半部即软中断），就必须使用自旋锁。自旋锁保持期间是抢占失效的，而信号量和读写信号量保持期间是可以被抢占的。自旋锁只有在内核可抢占或SMP（多处理器）的情况下才真正需要，在单CPU且不可抢占的内核下，自旋锁的所有操作都是空操作。另外格外注意一点：自旋锁不能递归使用。</p>
<h3 id="互斥锁和信号量与自旋锁的区别"><a href="#互斥锁和信号量与自旋锁的区别" class="headerlink" title="互斥锁和信号量与自旋锁的区别"></a>互斥锁和信号量与自旋锁的区别</h3><p>信号量。互斥锁允许进程sleep属于睡眠锁，自旋锁不允许调用者sleep，而是让其循环等待</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在硬件层面，CPU提供了原子操作、关中断、锁内存总线的机制；OS基于这几个CPU硬件机制，就能够实现锁；再基于锁，就能够实现各种各样的同步机制（信号量等等）。<br>原子锁不仅提供了一种锁定机制，同时也提供了算术或 bitwise 操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原子操作&quot;&gt;&lt;a href=&quot;#原子操作&quot; class=&quot;headerlink&quot; title=&quot;原子操作&quot;&gt;&lt;/a&gt;原子操作&lt;/h2&gt;&lt;p&gt;Linux 中最简单的同步方法就是原子操作。原子 意味着临界段被包含在 API 函数中。不需要额外的锁定，因为 API 函数
    
    </summary>
    
      <category term="同步" scheme="http://blog.lxmoses.com/categories/%E5%90%8C%E6%AD%A5/"/>
    
    
      <category term="linux" scheme="http://blog.lxmoses.com/tags/linux/"/>
    
      <category term="原子操作" scheme="http://blog.lxmoses.com/tags/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
    
      <category term="锁" scheme="http://blog.lxmoses.com/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux延时实现</title>
    <link href="http://blog.lxmoses.com/2017/04/11/linux%E5%BB%B6%E6%97%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.lxmoses.com/2017/04/11/linux延时实现/</id>
    <published>2017-04-11T09:10:38.000Z</published>
    <updated>2017-04-11T09:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="https://toutiao.io/posts/354999/app_preview" target="_blank" rel="external">这里</a><br>有时候有些纠结啊。觉得底层的东西太多，太麻烦，想专注上层开发;偏偏又对底层实现好奇而且有时候不知道底层实现又一头雾水。<br>嗯，顺其自然吧。。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;https://toutiao.io/posts/354999/app_preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;br&gt;有时候有些纠结啊。觉得底层的东西太多，太麻烦，想专注上层开发;偏偏又对底层实现好
    
    </summary>
    
      <category term="linux-kernel" scheme="http://blog.lxmoses.com/categories/linux-kernel/"/>
    
    
      <category term="延时" scheme="http://blog.lxmoses.com/tags/%E5%BB%B6%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>Go-匿名字段</title>
    <link href="http://blog.lxmoses.com/2017/04/11/go-%E5%8C%BF%E5%90%8D%E5%AD%97%E6%AE%B5/"/>
    <id>http://blog.lxmoses.com/2017/04/11/go-匿名字段/</id>
    <published>2017-04-11T06:12:20.000Z</published>
    <updated>2017-04-11T06:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>package main</p>
<p>import “fmt”</p>
<p>type Base struct {<br>    Name string<br>    Age  int<br>}</p>
<p>func (b * Base) Test() {<br>    fmt.Println(“test successfully”)<br>}</p>
<p>type Child struct {<br>    Base // 匿名字段， 默认把Base的所有字段都继承过来了。 这样看起来才像真正的继承<br>    Age  int<br>}</p>
<p>func main() {<br>    c := new(Child)<br>    c.Name = “hello” // 可以直接使用Base中的字段<br>    c.Age = 20       // 如果有重复的， 则最外的优先</p>
<pre><code>fmt.Println(c.Name)     // hello
fmt.Println(c.Age)      // 20
fmt.Println(c.Base.Age) // 要访问Base中的，可以这样写 0
c.Test()
</code></pre><p>}<br>go语言中的”继承“并不是真正的意义上的继承，确切地说是组合。匿名字段让习惯了C++/java之类的程序员用go更加得心应手。<br>作为一门年轻的语言，不得不说go语言对程序员还是非常友好的.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;package main&lt;/p&gt;
&lt;p&gt;import “fmt”&lt;/p&gt;
&lt;p&gt;type Base struct {&lt;br&gt;    Name string&lt;br&gt;    Age  int&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;func (b * Base) Test() {&lt;br&gt;   
    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="面向对象编程" scheme="http://blog.lxmoses.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Go-Timer</title>
    <link href="http://blog.lxmoses.com/2017/04/11/go-Timer/"/>
    <id>http://blog.lxmoses.com/2017/04/11/go-Timer/</id>
    <published>2017-04-11T03:00:05.000Z</published>
    <updated>2017-04-11T05:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><p>首先有必要了解下go中Time的定义:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Time <span class="keyword">struct</span> &#123;</div><div class="line">	<span class="comment">// sec gives the number of seconds elapsed since</span></div><div class="line">	<span class="comment">// January 1, year 1 00:00:00 UTC.</span></div><div class="line">	sec <span class="keyword">int64</span></div><div class="line">	<span class="comment">// nsec specifies a non-negative nanosecond</span></div><div class="line">	<span class="comment">// offset within the second named by Seconds.</span></div><div class="line">	<span class="comment">// It must be in the range [0, 999999999].</span></div><div class="line">	nsec <span class="keyword">int32</span></div><div class="line">	<span class="comment">// loc specifies the Location that should be used to</span></div><div class="line">	<span class="comment">// determine the minute, hour, month, day, and year</span></div><div class="line">	<span class="comment">// that correspond to this Time.</span></div><div class="line">	<span class="comment">// The nil location means UTC.</span></div><div class="line">	<span class="comment">// All UTC times are represented with loc==nil, never loc==&amp;utcLoc.</span></div><div class="line">	loc *Location</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到go语言中对于时间的定义：基于元年一月一日零点零分开始计算，精确到纳秒级别，至于底层是否能真正精确到这个级别就不得而知了。<br>还有一个重要的概念是Location,我在本地测试时区是CST，即大中华标准时间.<br>同时，go还提供了很多方便的辅助函数。<br>比较函数:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// After reports whether the time instant t is after u.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">After</span><span class="params">(u Time)</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> t.sec &gt; u.sec || t.sec == u.sec &amp;&amp; t.nsec &gt; u.nsec</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Before reports whether the time instant t is before u.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Before</span><span class="params">(u Time)</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> t.sec &lt; u.sec || t.sec == u.sec &amp;&amp; t.nsec &lt; u.nsec</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Equal reports whether t and u represent the same time instant.</span></div><div class="line"><span class="comment">// Two times can be equal even if they are in different locations.</span></div><div class="line"><span class="comment">// For example, 6:00 +0200 CEST and 4:00 UTC are Equal.</span></div><div class="line"><span class="comment">// Do not use == with Time values.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Equal</span><span class="params">(u Time)</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> t.sec == u.sec &amp;&amp; t.nsec == u.nsec</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>加减运算：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Add</span><span class="params">(d Duration)</span> <span class="title">Time</span></span> &#123;</div><div class="line">	t.sec += <span class="keyword">int64</span>(d / <span class="number">1e9</span>)</div><div class="line">	nsec := t.nsec + <span class="keyword">int32</span>(d%<span class="number">1e9</span>)</div><div class="line">	<span class="keyword">if</span> nsec &gt;= <span class="number">1e9</span> &#123;</div><div class="line">		t.sec++</div><div class="line">		nsec -= <span class="number">1e9</span></div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> nsec &lt; <span class="number">0</span> &#123;</div><div class="line">		t.sec--</div><div class="line">		nsec += <span class="number">1e9</span></div><div class="line">	&#125;</div><div class="line">	t.nsec = nsec</div><div class="line">	<span class="keyword">return</span> t</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Sub</span><span class="params">(u Time)</span> <span class="title">Duration</span></span> &#123;</div><div class="line">	d := Duration(t.sec-u.sec)*Second + Duration(t.nsec-u.nsec)</div><div class="line">	<span class="comment">// Check for overflow or underflow.</span></div><div class="line">	<span class="keyword">switch</span> &#123;</div><div class="line">	<span class="keyword">case</span> u.Add(d).Equal(t):</div><div class="line">		<span class="keyword">return</span> d <span class="comment">// d is correct</span></div><div class="line">	<span class="keyword">case</span> t.Before(u):</div><div class="line">		<span class="keyword">return</span> minDuration <span class="comment">// t - u is negative out of range</span></div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="keyword">return</span> maxDuration <span class="comment">// t - u is positive out of range</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">AddDate</span><span class="params">(years <span class="keyword">int</span>, months <span class="keyword">int</span>, days <span class="keyword">int</span>)</span> <span class="title">Time</span></span> &#123;</div><div class="line">	year, month, day := t.Date()</div><div class="line">	hour, min, sec := t.Clock()</div><div class="line">	<span class="keyword">return</span> Date(year+years, month+Month(months), day+days, hour, min, sec, <span class="keyword">int</span>(t.nsec), t.Location())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>看下定时器的定义:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The Timer type represents a single event.</span></div><div class="line"><span class="comment">// When the Timer expires, the current time will be sent on C,</span></div><div class="line"><span class="comment">// unless the Timer was created by AfterFunc.</span></div><div class="line"><span class="comment">// A Timer must be created with NewTimer or AfterFunc.</span></div><div class="line"><span class="keyword">type</span> Timer <span class="keyword">struct</span> &#123;</div><div class="line">	C &lt;-<span class="keyword">chan</span> Time</div><div class="line">	r runtimeTimer</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>根据文档内容，定时器是一个单独的事件，除非调用AfterFunc，当超时时，C会接收到当前时间。定时器只能通过NewTimer或者AfterFunc创建。<br>启动定时器，和停止定时器:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">startTimer</span><span class="params">( * runtimeTimer)</span></span></div><div class="line"><span class="title">func</span> <span class="title">stopTimer</span><span class="params">( * runtimeTimer)</span> <span class="title">bool</span></div></pre></td></tr></table></figure>
<p>NewTimer 和 AfterFunc<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NewTimer creates a new Timer that will send</span></div><div class="line"><span class="comment">// the current time on its channel after at least duration d.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTimer</span><span class="params">(d Duration)</span> * <span class="title">Timer</span></span> &#123;</div><div class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> Time, <span class="number">1</span>)</div><div class="line">	t := &amp;Timer&#123;</div><div class="line">		C: c,</div><div class="line">		r: runtimeTimer&#123;</div><div class="line">			when: when(d),</div><div class="line">			f:  sendTime,</div><div class="line">			arg:  c,</div><div class="line">		&#125;,</div><div class="line">	&#125;</div><div class="line">	startTimer(&amp;t.r)</div><div class="line">	<span class="keyword">return</span> t</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">AfterFunc</span><span class="params">(d Duration, f <span class="keyword">func</span>()</span>) * <span class="title">Timer</span></span> &#123;</div><div class="line">	t := &amp;Timer&#123;</div><div class="line">		r: runtimeTimer&#123;</div><div class="line">			when: when(d),</div><div class="line">			f:    goFunc,</div><div class="line">			arg:  f,</div><div class="line">		&#125;,</div><div class="line">	&#125;</div><div class="line">	startTimer(&amp;t.r)</div><div class="line">	<span class="keyword">return</span> t</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>NewTimer初始化一个定时器,当超时之后会调用sendTime函数发送当前时间;AfterFunc接受一个func作为参数,当时间到了之后,执行func。</p>
<p>重设定时器<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t * Timer)</span> <span class="title">Reset</span><span class="params">(d Duration)</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> t.r.f == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(<span class="string">"time: Reset called on uninitialized Timer"</span>)</div><div class="line">	&#125;</div><div class="line">	w := when(d)</div><div class="line">	active := stopTimer(&amp;t.r)</div><div class="line">	t.r.when = w</div><div class="line">	startTimer(&amp;t.r)</div><div class="line">	<span class="keyword">return</span> active</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>After函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// After waits for the duration to elapse and then sends the current time</span></div><div class="line"><span class="comment">// on the returned channel.</span></div><div class="line"><span class="comment">// It is equivalent to NewTimer(d).C.</span></div><div class="line"><span class="comment">// The underlying Timer is not recovered by the garbage collector</span></div><div class="line"><span class="comment">// until the timer fires. If efficiency is a concern, use NewTimer</span></div><div class="line"><span class="comment">// instead and call Timer.Stop if the timer is no longer needed.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">After</span><span class="params">(d Duration)</span> &lt;-<span class="title">chan</span> <span class="title">Time</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> NewTimer(d).C</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>释放定时器资源<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Stop prevents the Timer from firing.</span></div><div class="line"><span class="comment">// It returns true if the call stops the timer, false if the timer has already</span></div><div class="line"><span class="comment">// expired or been stopped.</span></div><div class="line"><span class="comment">// Stop does not close the channel, to prevent a read from the channel succeeding</span></div><div class="line"><span class="comment">// incorrectly.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// To prevent a timer created with NewTimer from firing after a call to Stop,</span></div><div class="line"><span class="comment">// check the return value and drain the channel.</span></div><div class="line"><span class="comment">// For example, assuming the program has not received from t.C already:</span></div><div class="line"><span class="comment">//	if !t.Stop() &#123;</span></div><div class="line"><span class="comment">//		&lt;-t.C</span></div><div class="line"><span class="comment">//	&#125;</span></div><div class="line"><span class="comment">// This cannot be done concurrent to other receives from the Timer's</span></div><div class="line"><span class="comment">// channel.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// For a timer created with AfterFunc(d, f), if t.Stop returns false, then the timer</span></div><div class="line"><span class="comment">// has already expired and the function f has been started in its own goroutine;</span></div><div class="line"><span class="comment">// Stop does not wait for f to complete before returning.</span></div><div class="line"><span class="comment">// If the caller needs to know whether f is completed, it must coordinate</span></div><div class="line"><span class="comment">// with f explicitly.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t * Timer)</span> <span class="title">Stop</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> t.r.f == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(<span class="string">"time: Stop called on uninitialized Timer"</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> stopTimer(&amp;t.r)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Time&quot;&gt;&lt;a href=&quot;#Time&quot; class=&quot;headerlink&quot; title=&quot;Time&quot;&gt;&lt;/a&gt;Time&lt;/h2&gt;&lt;p&gt;首先有必要了解下go中Time的定义:&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="定时器" scheme="http://blog.lxmoses.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>支付反馈可重入</title>
    <link href="http://blog.lxmoses.com/2017/04/07/%E6%94%AF%E4%BB%98%E5%8F%8D%E9%A6%88%E5%8F%AF%E9%87%8D%E5%85%A5/"/>
    <id>http://blog.lxmoses.com/2017/04/07/支付反馈可重入/</id>
    <published>2017-04-07T08:04:17.000Z</published>
    <updated>2017-04-07T08:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做支付,支付平台通知支付结果时，可能会重复通知。<br>为了解决这一问题，有三种思路。 锁，事务，缓存队列。<br>这里选择用缓存队列结合chan实现支付重复反馈可重入<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputTradeno = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</div><div class="line"><span class="keyword">var</span> outputStatus = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanLoop</span><span class="params">()</span></span>&#123;</div><div class="line">	 hashmap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">10000</span>)</div><div class="line">	 <span class="keyword">var</span> queue common.StringFIFO</div><div class="line">	 queue.Init(<span class="number">10000</span>)</div><div class="line">	 <span class="keyword">for</span> &#123;</div><div class="line">		tradeno := &lt;- inputTradeno</div><div class="line">		<span class="keyword">if</span> _, ok := hashmap[tradeno]; ok&#123;</div><div class="line">			outputStatus &lt;- <span class="literal">true</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> queue.Full()&#123;</div><div class="line">				oldestTradeno, _ := queue.Pop()</div><div class="line">				<span class="built_in">delete</span>(hashmap, oldestTradeno)</div><div class="line">			&#125;</div><div class="line">			queue.Push(tradeno)</div><div class="line">			hashmap[tradeno] = <span class="keyword">struct</span> &#123;&#125;&#123;&#125;</div><div class="line">			outputStatus &lt;- <span class="literal">false</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">look</span><span class="params">(tradeno <span class="keyword">string</span>)</span> <span class="title">bool</span></span>&#123;</div><div class="line">	inputTradeno &lt;- tradeno</div><div class="line">	ret := &lt;- outputStatus</div><div class="line">	<span class="keyword">return</span> ret</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">go</span> chanLoop()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">wftNotify</span><span class="params">(c * gin.Context)</span></span>&#123;</div><div class="line">	<span class="comment">//检验威富通是否重复通知</span></div><div class="line">	<span class="keyword">if</span> look(notifyReq.Out_trade_no)&#123;</div><div class="line">	<span class="comment">//已经缓存当前订单，说明威富通重复通知</span></div><div class="line">		common.LogError(<span class="string">"该订单已经处理"</span>)</div><div class="line">		c.Writer.WriteString(wxpay.WFT_RETURN_MSG_SUCCESS)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做支付,支付平台通知支付结果时，可能会重复通知。&lt;br&gt;为了解决这一问题，有三种思路。 锁，事务，缓存队列。&lt;br&gt;这里选择用缓存队列结合chan实现支付重复反馈可重入&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="并发控制" scheme="http://blog.lxmoses.com/tags/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    
      <category term="channel" scheme="http://blog.lxmoses.com/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>C++闭包探索</title>
    <link href="http://blog.lxmoses.com/2017/03/31/c-%E9%97%AD%E5%8C%85%E6%8E%A2%E7%B4%A2/"/>
    <id>http://blog.lxmoses.com/2017/03/31/c-闭包探索/</id>
    <published>2017-03-31T08:09:18.000Z</published>
    <updated>2017-03-31T08:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 利用c++类嵌套内部类实现闭包</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> ITest</div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">()</span></span></div><div class="line">		&#123;</div><div class="line">			process();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">virtual</span> ~ITest()&#123;&#125;</div><div class="line">	<span class="keyword">protected</span>:</div><div class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"><span class="function">ITest * <span class="title">test</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">class</span> Test: <span class="keyword">public</span> ITest</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">public</span>:</div><div class="line">			<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span></div><div class="line">			&#123;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"嵌套内部类:"</span> &lt;&lt; <span class="string">" Count is "</span> &lt;&lt; count++ &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *  利用函数内部类实现闭包</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*Func)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</div><div class="line"></div><div class="line"><span class="function">Func <span class="title">testFunc</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">100</span>;</div><div class="line"></div><div class="line">	<span class="keyword">class</span> Test</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">public</span>:</div><div class="line">			<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * pName = <span class="literal">NULL</span>)</span></span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(pName == <span class="literal">NULL</span>)&#123;</div><div class="line">					pName = <span class="string">"moses"</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"函数内部类:"</span>&lt;&lt; pName &lt;&lt; <span class="string">" Count is "</span>&lt;&lt; count-- &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">			&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> Test::process;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * c++新特性lambda表达式实现闭包</div><div class="line"> */</div><div class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">const</span> <span class="keyword">char</span> *)&gt; lambdaTest()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">100</span>;</div><div class="line"></div><div class="line">	<span class="keyword">auto</span> func = [count] (<span class="keyword">const</span> <span class="keyword">char</span> * pName = <span class="literal">NULL</span>) <span class="keyword">mutable</span> &#123;</div><div class="line">		<span class="keyword">if</span>(pName == <span class="literal">NULL</span>)&#123;</div><div class="line">			pName = <span class="string">"moses"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"lambda : "</span> &lt;&lt; pName &lt;&lt; <span class="string">" Count is "</span> &lt;&lt; count-- &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> func;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="c++" scheme="http://blog.lxmoses.com/tags/c/"/>
    
      <category term="闭包" scheme="http://blog.lxmoses.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Reflection-Go</title>
    <link href="http://blog.lxmoses.com/2017/03/31/reflection-go/"/>
    <id>http://blog.lxmoses.com/2017/03/31/reflection-go/</id>
    <published>2017-03-31T03:15:35.000Z</published>
    <updated>2017-03-31T05:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射简介"><a href="#反射简介" class="headerlink" title="反射简介"></a>反射简介</h2><p>Reflection(反射)在计算机中表示 程序能够检查自身结构的能力，尤其是类型。 它是元编程的一种形式。<br>本文中，我们主要理解Go语言中的的反射运作机制。每个编程语言的反射模型不大相同，很多语言根本不支持反射(C、C++)。笔者在学校主要就是学的C/C++,因此对于反射这个概念不是很清晰，最近接触Go语言，所以从go的角度探索下反射, 下文中谈到“反射”时，默认为时Go语言中的反射。</p>
<h2 id="类型和接口"><a href="#类型和接口" class="headerlink" title="类型和接口"></a>类型和接口</h2><p>反射建立在类型系统之上，因此我们从类型基础知识说起。<br>Go是静态语言。每个变量都有且只有一个静态类型，在编译时就已经确定。<br>关于类型，一个重要的分类是接口类型（interface），每个接口类型都代表固定的方法集合。一个接口变量可以指向（接口变量类似于C中的指针）任何类型的具体值，只要这个值实现了该接口类型的所有方法。<br>一个非常非常重要的接口类型是空接口，即:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span>&#123;&#125;	</div></pre></td></tr></table></figure><br>它代表一个空集，没有任何方法。由于任何具体的值都有零个或更多个方法，因此类型为interface{}的变量能够存储任何值。<br>有人说，Go的接口是动态类型的。这个说法是错误的！接口变量也是静态类型的，它永远只有一个相同的静态类型。如果在运行时它存储的值发生了变化，这个必须满足接口类型的方法集合。这是Go的特性。</p>
<h2 id="接口变量的表示"><a href="#接口变量的表示" class="headerlink" title="接口变量的表示"></a>接口变量的表示</h2><p>interface变量存储一对值:赋给改变量的具体的值、值类型的描述符。更确切的说，值就是实现该接口的底层数据，类型就是底层数据类型的描述。举个例子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r io.Reader</div><div class="line">tyy, err := os.OpenFile(<span class="string">"/dev/tty"</span>, os.O_RDWR, <span class="number">0</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">r = tty</div></pre></td></tr></table></figure><br>在这个例子中，变量r在结构上包含一个(key, value)对:(tty, <em> os.File)。注意：类型os.File不仅仅实现了Read方法。虽然接口变量只提供Read函数的调用权，但是底层的值包含了关于这个值的所有类型消息。所以我们能够做这样的类型转换:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> w io.Writer</div><div class="line">w = r.(io.Writer)</div></pre></td></tr></table></figure><br>上面的第二行代码是一个类型断言，它判定变量r内部的实际值也继承了io.Writer接口，所以才能被赋值给w。赋值之后，w就指向了(tty, </em> os.File）对，和变量r指向的是同一个(value, type)对。<br>不管底层具体值的方法集有多大，由于接口的静态类型限制，接口变量只能调用特定的一些方法。<br>继续看下面的代码:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> empty <span class="keyword">interface</span>&#123;&#125;</div><div class="line">empty = w</div></pre></td></tr></table></figure><br>这里的空接口变量也包含(tty, * os.File)对。这一点很容易理解:空接口变量可以存储任何具体值以及该值的所有描述信息。<br>这里没有使用类型断言,因为w满足空接口的所有方法。另外需要注意的一点是，(value, type)对中的type必须是具体的类型(struct 或 基本类型),不能是接口类型。</p>
<h2 id="反射可以将“接口类型变量”转换为“反射类型”对象"><a href="#反射可以将“接口类型变量”转换为“反射类型”对象" class="headerlink" title="反射可以将“接口类型变量”转换为“反射类型”对象"></a>反射可以将“接口类型变量”转换为“反射类型”对象</h2><p>这里反射类型指reflect.Type和reflect.Value。<br>首先了解下reflect包的两种类型Type和Value。这两种类型使访问接口内的数据成为可能。它们对应两个简单的方法，分别是reflect.TypeOf和reflect.ValueOf,分别是用来读取接口变量的reflect.Type和reflect.Value部分。<br>首先，我们看下reflect.TypeOf:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"reflect"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">	fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(x))</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>这行代码会打印出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>: <span class="keyword">float64</span></div></pre></td></tr></table></figure><br>为什么没看到接口？ 这段代码看起来只是把一个float64类型的变量x传递给reflect.TypeOf,事实上查阅一下TypeOf的文档:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Type</span></span></div></pre></td></tr></table></figure><br>我们调用reflect.TypeOf(x)时，x被存储在一个空接口变量中被传递过去，然后reflect.TypeOf对空接口变量进行拆解，恢复其类型信息。<br>函数reflect.ValueOf也会对底层的值进行恢复:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">fmt.Println(<span class="string">"value:"</span>, reflect.ValueOf(x))</div></pre></td></tr></table></figure><br>上面这段代码会打印出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">value: &lt;<span class="keyword">float64</span> Value&gt;</div></pre></td></tr></table></figure><br>类型 reflect.Type 和 reflect.Value 都有很多方法，我们可以检查和使用它们。这里我们举几个例子。类型 reflect.Value 有一个方法 Type()，它会返回一个 reflect.Type 类型的对象。Type和 Value都有一个名为 Kind 的方法，它会返回一个常量，表示底层数据的类型，常见值有：Uint、Float64、Slice等。Value类型也有一些类似于Int、Float的方法，用来提取底层的数据。Int方法用来提取 int64, Float方法用来提取 float64，参考下面的代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">fmt.Println(<span class="string">"type:"</span>, v.Type())</div><div class="line">fmt.Println(<span class="string">"kind is float64:"</span>, v.Kind() == reflect.Float64)</div><div class="line">fmt.Println(<span class="string">"value:"</span>, v.Float())</div></pre></td></tr></table></figure><br>上面这段代码会打印出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>: <span class="keyword">float64</span></div><div class="line">kind is <span class="keyword">float64</span>: <span class="literal">true</span></div><div class="line">value: <span class="number">3.4</span></div></pre></td></tr></table></figure><br>反射库提供了很多值得列出来单独讨论的属性。首先是介绍下Value 的 getter 和 setter 方法。为了保证API 的精简，这两个方法操作的是某一组类型范围最大的那个。比如，处理任何含符号整型数，都使用 int64。也就是说 Value 类型的Int 方法返回值为 int64类型，SetInt 方法接收的参数类型也是 int64 类型。实际使用时，可能需要转化为实际的类型。<br>第二个属性是反射类型变量（reflection object）的 Kind 方法 会返回底层数据的类型，而不是静态类型。如果一个反射类型对象包含一个用户定义的整型数,看代码:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></div><div class="line"><span class="keyword">var</span> x MyInt = <span class="number">7</span></div><div class="line">v := relect.ValueOf(x)</div></pre></td></tr></table></figure><br>上面的代码中，虽然变量 v 的静态类型是MyInt，不是 int，Kind 方法仍然返回 reflect.Int。换句话说， Kind 方法不会像 Type 方法一样区分 MyInt 和 int。</p>
<h2 id="反射可以将“反射类型对象”转换为“接口类型变量”"><a href="#反射可以将“反射类型对象”转换为“接口类型变量”" class="headerlink" title="反射可以将“反射类型对象”转换为“接口类型变量”"></a>反射可以将“反射类型对象”转换为“接口类型变量”</h2><p>根据一个 reflect.Value 类型的变量，我们可以使用 Interface 方法恢复其接口类型的值。事实上，这个方法会把 type 和 value 信息打包并填充到一个接口变量中，然后返回。其函数声明如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Interface returns v's value as an interface&#123;&#125;.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Interface</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;</div></pre></td></tr></table></figure><br>然后我们可以通过断言，恢复底层的具体值:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">y := v.Interface().(<span class="keyword">float64</span>)</div><div class="line">fmt.Println(y)</div></pre></td></tr></table></figure><br>事实上，我们可以更好地利用这一特性。标准库中的 fmt.Println 和 fmt.Printf 等函数都接收空接口变量作为参数，fmt 包内部会对接口变量进行拆包（前面的例子中，我们也做过类似的操作）。因此，fmt 包的打印函数在打印 reflect.Value 类型变量的数据时，只需要把 Interface 方法的结果传给 格式化打印程序:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Println(v.Interface())</div></pre></td></tr></table></figure></p>
<h2 id="如果要修改“反射类型对象”，其值必须是“可写的”-settable"><a href="#如果要修改“反射类型对象”，其值必须是“可写的”-settable" class="headerlink" title="如果要修改“反射类型对象”，其值必须是“可写的”(settable)"></a>如果要修改“反射类型对象”，其值必须是“可写的”(settable)</h2><p>“可写性”有些类似于寻址能力，但是更严格。它是反射类型变量的一种属性，赋予该变量修改底层存储数据的能力。“可写性”最终是由一个事实决定的：反射对象是否存储了原始值。举个代码例子：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">v.SetFLoat(<span class="number">7.1</span>)</div></pre></td></tr></table></figure><br>如果这行代码能够成功执行，它不会更新 x ，虽然看起来变量 v 是根据 x 创建的。相反，它会更新 x 存在于 反射对象 v 内部的一个拷贝，而变量 x 本身完全不受影响。这会造成迷惑，并且没有任何意义，所以是不合法的。“可写性”就是为了避免这个问题而设计的。<br>上面的代码中，我们把变量 x 的一个拷贝传递给函数，因此不期望它会改变 x 的值。如果期望函数 f 能够修改变量 x，我们必须传递 x 的地址（即指向 x 的指针）给函数 f，如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(&amp;x)</div></pre></td></tr></table></figure><br>反射的工作机制是一样的。如果你想通过反射修改变量x，就要把想要修改的变量的指针传递给反射库。<br>首先，像通常一样初始化变量x，然后创建一个指向它的反射对象，名字为p:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></div><div class="line">p := reflect.ValueOf(&amp;x)</div><div class="line">fmt.Println(<span class="string">"type of p:"</span>, p.Type())</div><div class="line">fmt.Println(<span class="string">"settability of p:"</span>, p.CanSet())</div></pre></td></tr></table></figure><br>这段代码的输出是:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> of p: * <span class="keyword">float64</span></div><div class="line">settability of p: <span class="literal">false</span></div></pre></td></tr></table></figure><br>反射对象p是不可写的，但是我们也无意修改p，事实上我们要修改的是 * p。为了得到p指向的数据，可以调用Value类型的Elem方法。Elem方法能够对指针进行“解引用”,然后将结果存储到Value类型对象v中:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v := p.Elem()</div><div class="line">fmt.Printlen(<span class="string">"settability of v:"</span>, v.CanSet())</div></pre></td></tr></table></figure><br>上面这段代码的输出:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">settability of v: <span class="literal">true</span></div></pre></td></tr></table></figure><br>由于变量v代表x，因此我们可以使用v.SetFloat修改x的值:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v.SetFloat(<span class="number">7.1</span>)</div><div class="line">fmt.Println(v.Interface())</div><div class="line">fmt.Println(x)</div></pre></td></tr></table></figure><br>上面的代码输出如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">7.1</span></div><div class="line"><span class="number">7.1</span></div></pre></td></tr></table></figure><br>反射不太容易理解，reflect.Type 和 reflect.Value 会混淆正在执行的程序，但是它做的事情正是编程语言做的事情。记住：只要反射对象要修改它们表示的对象，就必须获取它们表示的对象的地址。</p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>把反射应用到结构体时，常用的方式是 使用反射修改一个结构体的某些字段。只要拥有结构体的地址，我们就可以修改它的字段。<br>下面是一个简单的例子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</div><div class="line">	A <span class="keyword">int</span></div><div class="line">	B <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line">t := T&#123;<span class="number">23</span>, <span class="string">"skidoo"</span>&#125;</div><div class="line">s := reflect.ValueOf(&amp;t).Elem()</div><div class="line">	typeOfT := s.Type()</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; s.NumField(); i++ &#123;</div><div class="line">		f := s.Field(i)</div><div class="line">		fmt.Printf(<span class="string">"%d: %s %s = %v\n"</span>, i,</div><div class="line">			typeOfT.Field(i).Name, f.Type(), f.Interface())</div><div class="line">	&#125;</div></pre></td></tr></table></figure><br>上面这段代码的输出如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>: A <span class="keyword">int</span> = <span class="number">23</span></div><div class="line"><span class="number">1</span>: B <span class="keyword">string</span> = skidoo</div></pre></td></tr></table></figure><br>这里有一点需要指出:变量 T 的字段都是首字母大写的（暴露到外部），因为struct中只有暴露到外部的字段才是“可写的”。<br>由于变量 s 包含一个“可写的”反射对象，我们可以修改结构体的字段:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.Field(<span class="number">0</span>).SetInt(<span class="number">77</span>)</div><div class="line">s.Field(<span class="number">1</span>).SetString(<span class="string">"Sunset Strip"</span>)</div><div class="line">fmt.Println(<span class="string">"t is now"</span>, t)</div></pre></td></tr></table></figure><br>上面的代码输出如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t is now &#123;<span class="number">77</span> Sunset Strip&#125;</div></pre></td></tr></table></figure><br>如果变量s是通过t，而不是&amp;t创建的，调用SetInt和SetString将会失败，因为t的字段是不可写的。<br>顺便一提，struct中的tag可以通过反射获得:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tag := s.Field(<span class="number">0</span>).Tag.Get(<span class="string">"testtag"</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;反射简介&quot;&gt;&lt;a href=&quot;#反射简介&quot; class=&quot;headerlink&quot; title=&quot;反射简介&quot;&gt;&lt;/a&gt;反射简介&lt;/h2&gt;&lt;p&gt;Reflection(反射)在计算机中表示 程序能够检查自身结构的能力，尤其是类型。 它是元编程的一种形式。&lt;br&gt;本文中，
    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="reflecttion" scheme="http://blog.lxmoses.com/tags/reflecttion/"/>
    
  </entry>
  
  <entry>
    <title>Goroutine &amp; Channel</title>
    <link href="http://blog.lxmoses.com/2017/03/22/goroutine/"/>
    <id>http://blog.lxmoses.com/2017/03/22/goroutine/</id>
    <published>2017-03-22T10:03:39.000Z</published>
    <updated>2017-03-22T10:27:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习go语言，go语言一大特性就是并发。 参见<a href="http://hustcat.github.io/channel/" target="_blank" rel="external">这篇博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习go语言，go语言一大特性就是并发。 参见&lt;a href=&quot;http://hustcat.github.io/channel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇博客&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="并发" scheme="http://blog.lxmoses.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Do-While妙用</title>
    <link href="http://blog.lxmoses.com/2017/03/15/do-while%E5%A6%99%E7%94%A8/"/>
    <id>http://blog.lxmoses.com/2017/03/15/do-while妙用/</id>
    <published>2017-03-15T03:07:05.000Z</published>
    <updated>2017-03-15T03:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于do-while，笔者之前一直停留在学习c++基础语法时的理解，然而后面读框架代码时经常看到do…while(0)这样的用法，当时不理解这样用的用意。<br>纸上得来终觉浅，绝知此事要躬行。 当我们看技术书籍或者看一些优秀的项目源码时，对于很多小地方可能也就是一目置之，自己亲身经历一次才会深刻的明白，这里也提醒自己以后多多注意细节。<br>最近在实现一个类的初始化函数如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> MapFactory::init()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">bool</span> ret = <span class="literal">false</span>;</div><div class="line">	ret = initSimple();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initMiddle();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initHard();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initSpecial();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>当时笔者在写上面这段代码时就感觉好麻烦，好多的return语句。<br>然而，我们可以巧妙地借用下循环里break的思路，优化如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> MapFactory::init()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">bool</span> ret = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">do</span>&#123;</div><div class="line">		ret = initSimple();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initMiddle();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initHard();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initSpecial();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">while</span>(<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>当然上面的例子并没有恰当地表现出这个技巧的实用之处，因为上面的代码在每一次调用之时无外乎失败就直接返回，但是假如子初始化函数失败还需要释放资源，比如指针之类的。嗯，自行体会。</p>
<p>之前在阅读的代码中看到的do…while(0)代码更为常见的是红定义中，参加下面代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) do&#123; delete p; p = NULL;&#125; while(0)</span></div></pre></td></tr></table></figure><br>假设这里去掉do…while(0),<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) delete p; p = NULL;</span></div></pre></td></tr></table></figure><br>注意下面宏调用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != p) SAFE_DELETE(p)</div><div class="line"><span class="keyword">else</span> <span class="keyword">do</span> something</div></pre></td></tr></table></figure><br>这里如果是下面的定义方式，程序编译会报错，这里的do-while相当于提供了一种健壮的宏定义方式，至于个中细节，自行体会。<br>最后我想说的是，程序就像是一件艺术品，没有最好的代码实现， 只有更好，更优雅的代码。只有在一次又一次的实战中不断总结，才能不断提升自己。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于do-while，笔者之前一直停留在学习c++基础语法时的理解，然而后面读框架代码时经常看到do…while(0)这样的用法，当时不理解这样用的用意。&lt;br&gt;纸上得来终觉浅，绝知此事要躬行。 当我们看技术书籍或者看一些优秀的项目源码时，对于很多小地方可能也就是一目置之，
    
    </summary>
    
      <category term="编程技巧" scheme="http://blog.lxmoses.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="编程技巧" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>关于随机数</title>
    <link href="http://blog.lxmoses.com/2017/03/14/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://blog.lxmoses.com/2017/03/14/关于随机数/</id>
    <published>2017-03-14T08:14:40.000Z</published>
    <updated>2017-03-14T08:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在设计一个随机数时遇到了一些问题：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>(<span class="number">10</span>);</div><div class="line"><span class="keyword">int</span> index = <span class="built_in">floor</span>(CCRANDOM_0_1() * <span class="built_in">array</span>.size)</div></pre></td></tr></table></figure><br>就是xcode里上面简单的几行代码，让我纠结很久。经过测试，主要原因是，xcode里float或者double转换成int时不能正确转换，至于原因，在下搜索很久都没找到答案， 暂时就这样不了了之吧。<br>嗯，于是发现了c++ 11关于随机数的新特性，上述代码改为如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></div><div class="line"></div><div class="line">srand(time(<span class="literal">NULL</span>));</div><div class="line"><span class="built_in">std</span>::default_random_engine e;</div><div class="line"><span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; u(<span class="number">0</span>, <span class="built_in">array</span>.size());</div><div class="line"><span class="keyword">auto</span> index = u(e);</div></pre></td></tr></table></figure><br>路漫漫其修远兮。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在设计一个随机数时遇到了一些问题：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div
    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="c++" scheme="http://blog.lxmoses.com/tags/c/"/>
    
      <category term="随机数" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Javascript继承详解</title>
    <link href="http://blog.lxmoses.com/2017/03/13/javascript%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.lxmoses.com/2017/03/13/javascript继承详解/</id>
    <published>2017-03-13T03:42:40.000Z</published>
    <updated>2017-03-13T03:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近要用cocos2d-js开发游戏，所以有必要学习下js，在此mark下js的继承。<br>参见三生石上的系列博客：<br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html" target="_blank" rel="external">javascript继承详解(一)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/08/1519251.html" target="_blank" rel="external">javascript继承详解(二)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/09/1519890.html" target="_blank" rel="external">javascript继承详解(三)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/13/1522647.html" target="_blank" rel="external">javascript继承详解(四)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/14/1523523.html" target="_blank" rel="external">javascript继承详解(五)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/15/1524263.html" target="_blank" rel="external">javascript继承详解(六)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于最近要用cocos2d-js开发游戏，所以有必要学习下js，在此mark下js的继承。&lt;br&gt;参见三生石上的系列博客：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&quot; 
    
    </summary>
    
      <category term="js" scheme="http://blog.lxmoses.com/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.lxmoses.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2d-Js游戏引擎在各平台运行概要</title>
    <link href="http://blog.lxmoses.com/2017/03/10/cocos2d-js%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%9C%A8%E5%90%84%E5%B9%B3%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%A6%82%E8%A6%81/"/>
    <id>http://blog.lxmoses.com/2017/03/10/cocos2d-js游戏引擎在各平台运行概要/</id>
    <published>2017-03-10T02:49:24.000Z</published>
    <updated>2017-03-10T02:51:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://forum.cocos.com/t/cocos2d-js/23080" target="_blank" rel="external">转自这里 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://forum.cocos.com/t/cocos2d-js/23080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转自这里 &lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
      <category term="cocos2d-JS" scheme="http://blog.lxmoses.com/tags/cocos2d-JS/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2dx打包apk</title>
    <link href="http://blog.lxmoses.com/2017/03/09/cocos2dx%E6%89%93%E5%8C%85apk/"/>
    <id>http://blog.lxmoses.com/2017/03/09/cocos2dx打包apk/</id>
    <published>2017-03-09T03:54:18.000Z</published>
    <updated>2017-03-09T06:02:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天晚上第一次开始着手将cocos2dx project打包apk，在此记录下。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h4><p>下载jdk，并安装</p>
<h4 id="ndk"><a href="#ndk" class="headerlink" title="ndk"></a>ndk</h4><p>下载ndk，并解压</p>
<h3 id="android-sdk"><a href="#android-sdk" class="headerlink" title="android sdk"></a>android sdk</h3><p>下载android, sdk并解压</p>
<h4 id="ant"><a href="#ant" class="headerlink" title="ant"></a>ant</h4><p>下载ant, 并解压</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>进入cocos目录，运行setup.py,按提示操作即可。</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>进入cocos工程主目录，利用cocos工具编译如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos compile -p android --ap android-25<span class="comment">#--ap代表sdk版本</span></div></pre></td></tr></table></figure><br>上面的步骤会在cocos工程文件里生成一个apk文件，大功告成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天晚上第一次开始着手将cocos2dx project打包apk，在此记录下。&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;h4 id=&quot;jdk&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2dx内存管理机制</title>
    <link href="http://blog.lxmoses.com/2017/03/06/cocos2dx%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.lxmoses.com/2017/03/06/cocos2dx内存管理机制/</id>
    <published>2017-03-06T09:28:26.000Z</published>
    <updated>2017-03-07T02:08:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>cocos2dx里的所有节点对象都继承自Ref<br>下面是Ref的源代码核心部分摘录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Ref</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">retain</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Ref * <span class="title">autorelease</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getReferenceCount</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">	Ref();</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">virtual</span> ~Ref();</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> _referenceCount;</div><div class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> AutoreleasePool;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Ref::Ref(): _referenceCount(<span class="number">1</span>)&#123;&#125;</div><div class="line">Ref::~Ref() &#123;&#125;</div><div class="line"><span class="keyword">void</span> Ref::retain()</div><div class="line">&#123;</div><div class="line">	assert(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should be greater than 0"</span>);</div><div class="line">	++_referenceCount;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> Ref::release()</div><div class="line">&#123;</div><div class="line">	assert(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should be greater than 0"</span>);</div><div class="line">	--_referenceCount;</div><div class="line">	<span class="keyword">if</span>(_referenceCount == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">delete</span> <span class="keyword">this</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">Ref * Ref::autorelease()</div><div class="line">&#123;</div><div class="line">	PoolManager::getInstance()-&gt;getCurrentPool()-&gt;addObject(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Ref::getReferenceCount() <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> _referenceCount;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>可以看到Ref主要就是运用了引用计数，在一个节点的create函数中通常都会都会调用autorelease,在这个函数中调用的是AutoreleasePool的addObject方法。<br>下面是AutoreleasePool以及PoolManager的源代码实现核心部分摘录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> AutoreleasePool</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	AutoreleasePool();<span class="comment">//warning Don't create an autorelease pool in heap, create it in stack.</span></div><div class="line">	AutoreleasePool(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name);</div><div class="line">	~AutoreleasePool();</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addObject</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Ref *&gt; _managedObjectArray;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> _name;</div><div class="line">&#125;</div><div class="line">AutoreleasePool::AutoreleasePool() : _name(<span class="string">""</span>)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.reserve(<span class="number">150</span>);</div><div class="line">	PoolManager::getInstance()-&gt;push(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">AutoreleasePool::AutoreleasePool(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name):_name(name)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.reserve(<span class="number">150</span>);</div><div class="line">	PoolManager::getInstance()-&gt;push(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">AutoreleasePool::~AutoreleasePool()</div><div class="line">&#123;</div><div class="line">	clear();</div><div class="line">	PoolManager::getInstance()-&gt;pop();</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> AutoreleasePool::addObject(Ref * object)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.push_back(object);</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> AutoreleasePool::clear()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Ref*&gt; releasings;</div><div class="line">	releasings.swap(_managedObjectArray);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;obj : releasings)</div><div class="line">	&#123;</div><div class="line">		obj-&gt;release();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> PoolManager</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">static</span> PoolManager * <span class="title">getInstance</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">AutoreleasePool * <span class="title">getCurrentPool</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> AutoreleasePool;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	PoolManager();</div><div class="line">	~PoolManager();</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(AutoreleasePool * pool)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</div><div class="line">	<span class="keyword">static</span> PoolManager * s_singleInstance;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AutoreleasePool *&gt; _releasePoolStack;</div><div class="line">&#125;</div><div class="line">PoolManager * PoolManager::getInstance()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (s_singleInstance == <span class="literal">nullptr</span>)</div><div class="line">	&#123;</div><div class="line">		s_singleInstance = <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) PoolManager();</div><div class="line">		<span class="comment">// Add the first auto release pool</span></div><div class="line">		<span class="keyword">new</span> AutoreleasePool(<span class="string">"cocos2d autorelease pool"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> s_singleInstance;</div><div class="line">&#125;</div><div class="line">PoolManager::PoolManager()</div><div class="line">&#123;</div><div class="line">	_releasePoolStack.reserve(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">PoolManager::~PoolManager()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(!_releasePoolStack.empty())</div><div class="line">	&#123;</div><div class="line">		AutoreleasePool * pool = _releasePoolStack.back();</div><div class="line">		<span class="keyword">delete</span> pool;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">PoolManager::getCurrentPool() <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> _releasePoolStack.back();</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> PoolManager::push(AutoreleasePool * pool)</div><div class="line">&#123;</div><div class="line">	    _releasePoolStack.push_back(pool);</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> PoolManager::pop()</div><div class="line">&#123;</div><div class="line">	assert(!_releasePoolStack.empty());</div><div class="line">	_releasePoolStack.pop_back();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>总结：<br>1.autorelease()的实质是将对象加入自动释放池，对象的引用计数不会立刻减1，在自动释放池被回收时对象执行release()。<br>2.autorelease()只有在自动释放池被释放时才会进行一次释放操作，如果对象释放的次数超过了应有的次数，则这个错误在调用autorelease()时并不会被发现，只有当自动释放池被释放时（通常也就是游戏的每一帧结束时），游戏才会崩溃。在这种情况下，定位错误就变得十分困难了。例如，在游戏中，一个对象含有1个引用计数，但是却被调用了两次autorelease()。在第二次调用autorelease()时，游戏会继续执行这一帧，结束游戏时才会崩溃，很难及时找到出错的地点。因此，我们建议在开发过程中应该避免滥用autorelease()，只在工厂方法等不得不用的情况下使用，尽量以release()来释放对象引用。<br>3.autorelease()并不是毫无代价的，其背后的释放池机制同样需要占用内存和CPU资源。过多的使用autorelease()会增加自动释放池的管理和释放池维护对象存取释放的支出。在内存和CPU资源本就不足的程序中使得系统资源更加紧张。此时就需要我们合理创建自动释放池管理对象autorelease。<br>不用的对象推荐使用release()来释放对象引用，立即回收。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cocos2dx里的所有节点对象都继承自Ref&lt;br&gt;下面是Ref的源代码核心部分摘录&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;
    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="内存管理" scheme="http://blog.lxmoses.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
  </entry>
  
  <entry>
    <title>Lambda--C++</title>
    <link href="http://blog.lxmoses.com/2017/03/02/lambda-c/"/>
    <id>http://blog.lxmoses.com/2017/03/02/lambda-c/</id>
    <published>2017-03-02T14:33:08.000Z</published>
    <updated>2017-03-02T14:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>参见<a href="https://www.devbean.net/2012/05/cpp11-lambda/" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参见&lt;a href=&quot;https://www.devbean.net/2012/05/cpp11-lambda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="lambda" scheme="http://blog.lxmoses.com/tags/lambda/"/>
    
  </entry>
  
</feed>
