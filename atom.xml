<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟云</title>
  
  <subtitle>let it be</subtitle>
  <link href="http://blog.lxmoses.com/atom.xml" rel="self"/>
  
  <link href="http://blog.lxmoses.com/"/>
  <updated>2021-05-06T16:15:16.297Z</updated>
  <id>http://blog.lxmoses.com/</id>
  
  <author>
    <name>moses</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Machine Learning Is Fun</title>
    <link href="http://blog.lxmoses.com/2021/05/07/machine-learning-is-fun/"/>
    <id>http://blog.lxmoses.com/2021/05/07/machine-learning-is-fun/</id>
    <published>2021-05-06T16:12:50.000Z</published>
    <updated>2021-05-06T16:15:16.297Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.machinelearningisfun.com/">machine learning is fun</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.machinelearningisfun.com/&quot;&gt;machine learning is fun&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="机器学习" scheme="http://blog.lxmoses.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>排序总结</title>
    <link href="http://blog.lxmoses.com/2020/09/19/%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.lxmoses.com/2020/09/19/%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-19T11:47:56.000Z</published>
    <updated>2020-09-19T11:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> size = <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 外层循环循环size-1次</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> swapped <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// 内层循环从切片头部开始循环比较相邻元素大小</span></span><br><span class="line"><span class="comment">// 如果arr[j] &gt; arr[j+1]交换之 确保每次循环后最大的元素会排到最后</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; size<span class="number">-1</span>-i; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">swapped = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !swapped &#123;</span><br><span class="line"><span class="comment">// 本次循环没有交换 此时切片已经有序</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectionSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> size = <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">var</span> minIndex <span class="keyword">int</span></span><br><span class="line"><span class="comment">// 外层循环循环size-1次</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size<span class="number">-1</span>; i++ &#123;</span><br><span class="line">minIndex = i</span><br><span class="line"><span class="comment">// 内层循环每次找出最小的元素</span></span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; size; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; arr[minIndex] &#123;</span><br><span class="line">minIndex = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> minIndex != i &#123;</span><br><span class="line"><span class="comment">// 将本次找到的最小元素放入对应位置</span></span><br><span class="line">arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertionSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> size = <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 外层循环size-1次 从切片的第二个元素开始逐一为每个元素找到合适的插入位置</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; size; i++ &#123;</span><br><span class="line">current := arr[i]</span><br><span class="line"><span class="keyword">for</span> preIndex := i - <span class="number">1</span>; preIndex &gt;= <span class="number">0</span>; preIndex-- &#123;</span><br><span class="line"><span class="keyword">if</span> arr[preIndex] &gt; current &#123;</span><br><span class="line"><span class="comment">// 继续往前找 并挪动位置</span></span><br><span class="line">arr[preIndex+<span class="number">1</span>] = arr[preIndex]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 找到合适的插入位置</span></span><br><span class="line">arr[preIndex+<span class="number">1</span>] = current</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shellSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> size = <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 初始化间隙位size/2 逐步减少间隙 直至间隙为1</span></span><br><span class="line"><span class="keyword">for</span> gap := size / <span class="number">2</span>; gap &gt;= <span class="number">1</span>; gap = gap / <span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">//将切片变为间隔h个元素有序</span></span><br><span class="line"><span class="keyword">for</span> i := gap; i &lt; size; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> current = arr[i]</span><br><span class="line"><span class="keyword">for</span> preIndex := i; preIndex-gap &gt;= <span class="number">0</span>; preIndex = preIndex - gap &#123;</span><br><span class="line"><span class="keyword">if</span> current &lt; arr[preIndex-gap] &#123;</span><br><span class="line">arr[preIndex] = arr[preIndex-gap]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">arr[preIndex] = current</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">_quickSort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> _<span class="title">quickSort</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> left &lt; right &#123;</span><br><span class="line"><span class="comment">// 将切片分为两个部分</span></span><br><span class="line"><span class="comment">// 使得[left-&gt;pivot-1]的元素都小于等于arr[pivot], [pivot+1-&gt;right]的元素都大于arr[pivot]</span></span><br><span class="line">pivot := partition(arr, left, right)</span><br><span class="line"><span class="comment">// 对左右两个部分重复上述过程</span></span><br><span class="line">_quickSort(arr, left, pivot<span class="number">-1</span>)</span><br><span class="line">_quickSort(arr, pivot+<span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 选取array[left]作为分割基准点</span></span><br><span class="line">i, j, pivot := left, right, arr[left]</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 从右往左扫描 直到某个元素小于等于pivot</span></span><br><span class="line"><span class="keyword">for</span> i &lt; j &amp;&amp; arr[j] &gt; pivot &#123;</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从左往右扫描 直到某个元素大于pivot</span></span><br><span class="line"><span class="keyword">for</span> i &lt; j &amp;&amp; arr[i] &lt;= pivot &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt; j &#123;</span><br><span class="line"><span class="comment">// 此时可以肯定 arr[j] &lt;= pivot 同时 arr[i] &gt; pivot, 交换a[i], a[j]</span></span><br><span class="line">arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 扫描完毕</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[i], arr[left] = arr[left], arr[i]</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(arr []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> size = <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">if</span> size &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// 只有一个值 无需排序</span></span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分成左右两组 分别继续归并排序</span></span><br><span class="line"><span class="keyword">var</span> mid = size / <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> left = mergeSort(arr[:mid])</span><br><span class="line"><span class="keyword">var</span> right = mergeSort(arr[mid:])</span><br><span class="line"><span class="comment">// 合并左右两组排序结果</span></span><br><span class="line"><span class="keyword">return</span> merge(left, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(left, right []<span class="keyword">int</span>)</span> <span class="params">(result []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">l, r := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> l &lt; <span class="built_in">len</span>(left) &amp;&amp; r &lt; <span class="built_in">len</span>(right) &#123;</span><br><span class="line"><span class="keyword">if</span> left[l] &lt;= right[r] &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, left[l])</span><br><span class="line">l++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, right[r])</span><br><span class="line">r++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, left[l:]...)</span><br><span class="line">result = <span class="built_in">append</span>(result, right[r:]...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> size = <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 构建大顶堆</span></span><br><span class="line"><span class="keyword">for</span> i := size/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line"><span class="comment">// 从第一个非叶子节点从下至上, 从左到右调整结构</span></span><br><span class="line">adjustHeap(arr, i, size)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下沉堆定元素+重新调整堆结构</span></span><br><span class="line"><span class="keyword">for</span> i := size - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">arr[<span class="number">0</span>], arr[i] = arr[i], arr[<span class="number">0</span>]</span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adjustHeap</span><span class="params">(arr []<span class="keyword">int</span>, i, size <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> tmp = arr[i]</span><br><span class="line"><span class="keyword">for</span> k := i*<span class="number">2</span> + <span class="number">1</span>; k &lt; size; k = k*<span class="number">2</span> + <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">//从i结点的左子结点开始，也就是2i+1处开始</span></span><br><span class="line"><span class="keyword">if</span> k+<span class="number">1</span> &lt; size &amp;&amp; arr[k] &lt; arr[k+<span class="number">1</span>] &#123;</span><br><span class="line"><span class="comment">//如果左子结点小于右子结点，k指向右子结点</span></span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arr[k] &gt; tmp &#123;</span><br><span class="line"><span class="comment">//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）</span></span><br><span class="line">arr[i] = arr[k]</span><br><span class="line">i = k</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将temp值放到最终的位置</span></span><br><span class="line">arr[i] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非比较类型排序"><a href="#非比较类型排序" class="headerlink" title="非比较类型排序"></a>非比较类型排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计数排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countingSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> maxValue = maxValue(arr)</span><br><span class="line"><span class="comment">// 分配一个能容纳0-maxValue整数的切片</span></span><br><span class="line"><span class="keyword">var</span> bucket = <span class="built_in">make</span>([]<span class="keyword">int</span>, maxValue+<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 将每个元素直接存到对应位置</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line">bucket[value] += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sortedIndex := <span class="number">0</span></span><br><span class="line"><span class="comment">// 存放元素位置的顺序就是元素排序后的顺序</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> bucket &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> bucket[i] &gt; <span class="number">0</span> &#123;</span><br><span class="line">arr[sortedIndex] = i</span><br><span class="line">bucket[i]--</span><br><span class="line">sortedIndex++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序 计数排序的升级版 利用函数映射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bucketSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//桶数</span></span><br><span class="line"><span class="keyword">var</span> size = <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">var</span> maxValue = maxValue(arr)</span><br><span class="line"><span class="comment">//二维切片</span></span><br><span class="line">buckets := <span class="built_in">make</span>([][]<span class="keyword">int</span>, size)</span><br><span class="line"><span class="comment">//分配入桶</span></span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">index = arr[i] * (size - <span class="number">1</span>) / maxValue <span class="comment">//函数映射</span></span><br><span class="line">buckets[index] = <span class="built_in">append</span>(buckets[index], arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按顺序遍历桶取出数据</span></span><br><span class="line">tmpPos := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">bucketLen := <span class="built_in">len</span>(buckets[i])</span><br><span class="line"><span class="keyword">if</span> bucketLen &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 桶内排序</span></span><br><span class="line"><span class="comment">// 此处实现插入排序方式，其实可以用任意其他排序方式</span></span><br><span class="line">insertionSort(buckets[i])</span><br><span class="line"><span class="built_in">copy</span>(arr[tmpPos:], buckets[i])</span><br><span class="line">tmpPos += bucketLen</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组最大元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxValue</span><span class="params">(arr []<span class="keyword">int</span>)</span> <span class="params">(max <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line"><span class="keyword">if</span> value &gt; max &#123;</span><br><span class="line">max = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="comment">// 将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零</span></span><br><span class="line"><span class="comment">// 然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</span></span><br><span class="line"><span class="comment">// 基数排序的方式可以采用LSD（Least significant digital）或MSD（Most significant digital）</span></span><br><span class="line"><span class="comment">// LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。</span></span><br><span class="line"><span class="comment">// 下面是实现的LSD版本</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">radixSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">size     = <span class="built_in">len</span>(arr)</span><br><span class="line">tmp      = <span class="built_in">make</span>([]<span class="keyword">int</span>, size, size)</span><br><span class="line">radix    = <span class="number">1</span></span><br><span class="line">maxDigit = maxDigit(arr)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, j, k <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>; i &lt; maxDigit; i++ &#123; <span class="comment">//进行maxDigit次排序</span></span><br><span class="line"><span class="comment">// count index 0-&gt;9对应每个位上的数字</span></span><br><span class="line"><span class="comment">// count value 对应每个位上数字出现次数</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> j = <span class="number">0</span>; j &lt; size; j++ &#123;</span><br><span class="line">k = (arr[j] / radix) % <span class="number">10</span></span><br><span class="line">count[k]++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">count[j] = count[j<span class="number">-1</span>] + count[j]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 逆序</span></span><br><span class="line"><span class="keyword">for</span> j = size - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j-- &#123;</span><br><span class="line">k = (arr[j] / radix) % <span class="number">10</span></span><br><span class="line">tmp[count[k]<span class="number">-1</span>] = arr[j]</span><br><span class="line">count[k]--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j = <span class="number">0</span>; j &lt; size; j++ &#123;</span><br><span class="line">arr[j] = tmp[j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十进制位数增加</span></span><br><span class="line">radix = radix * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组元素的十进制位数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDigit</span><span class="params">(arr []<span class="keyword">int</span>)</span> <span class="params">(ret <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> radix = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line"><span class="keyword">for</span> value &gt;= radix &#123;</span><br><span class="line">radix = radix * <span class="number">10</span></span><br><span class="line">ret++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    
    <category term="算法" scheme="http://blog.lxmoses.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>走迷宫</title>
    <link href="http://blog.lxmoses.com/2020/06/30/%E8%B5%B0%E8%BF%B7%E5%AE%AB/"/>
    <id>http://blog.lxmoses.com/2020/06/30/%E8%B5%B0%E8%BF%B7%E5%AE%AB/</id>
    <published>2020-06-30T08:22:52.000Z</published>
    <updated>2020-06-30T08:26:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">定义一个二维数组N*M（其中2&lt;=N&lt;=10;2&lt;=M&lt;=10），如5 × 5数组下所示：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int maze[5][5] = &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        0, 1, 0, 0, 0,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        0, 1, 0, 1, 0,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        0, 0, 0, 0, 0,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        0, 1, 1, 1, 0,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        0, 0, 0, 1, 0,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。入口点为[0,0],既第一空格是可以走的路。</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line"></span><br><span class="line">一个N × M的二维数组，表示一个迷宫。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line">左上角到右下角的最短路径，格式如样例所示。</span><br><span class="line"></span><br><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line">0 1 0 0 0</span><br><span class="line"></span><br><span class="line">0 1 0 1 0</span><br><span class="line"></span><br><span class="line">0 0 0 0 0</span><br><span class="line"></span><br><span class="line">0 1 1 1 0</span><br><span class="line"></span><br><span class="line">0 0 0 1 0</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line">(0, 0)</span><br><span class="line"></span><br><span class="line">(1, 0)</span><br><span class="line"></span><br><span class="line">(2, 0)</span><br><span class="line"></span><br><span class="line">(2, 1)</span><br><span class="line"></span><br><span class="line">(2, 2)</span><br><span class="line"></span><br><span class="line">(2, 3)</span><br><span class="line"></span><br><span class="line">(2, 4)</span><br><span class="line"></span><br><span class="line">(3, 4)</span><br><span class="line"></span><br><span class="line">(4, 4)</span><br></pre></td></tr></table></figure><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入两个整数，分别表示二位数组的行数，列数。再输入相应的数组，其中的1表示墙壁，0表示可以走的路。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左上角到右下角的最短路径，格式如样例所示。</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 1 1 1 0</span><br><span class="line">0 0 0 1 0</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(0,0)</span><br><span class="line">(1,0)</span><br><span class="line">(2,0)</span><br><span class="line">(2,1)</span><br><span class="line">(2,2)</span><br><span class="line">(2,3)</span><br><span class="line">(2,4)</span><br><span class="line">(3,4)</span><br><span class="line">(4,4)</span><br></pre></td></tr></table></figure><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> m, n <span class="keyword">int</span></span><br><span class="line">        _, err := fmt.Scan(&amp;m)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Scan(&amp;n)</span><br><span class="line">        matrix := <span class="built_in">make</span>([][]<span class="keyword">int</span>, m)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> matrix &#123;</span><br><span class="line">            matrix[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; m; i++ &#123;</span><br><span class="line">            <span class="keyword">for</span> j := <span class="number">0</span>; j &lt;n; j++ &#123;</span><br><span class="line">                fmt.Scan(&amp;matrix[i][j])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bestPath = <span class="literal">nil</span></span><br><span class="line">        path = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">        findPath(matrix, <span class="number">0</span>, <span class="number">0</span>, m, n)</span><br><span class="line">        <span class="keyword">for</span> _, p := <span class="keyword">range</span> bestPath &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;(%d,%d)\n&quot;</span>, p.row, p.col)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Position <span class="keyword">struct</span> &#123;</span><br><span class="line">    row <span class="keyword">int</span></span><br><span class="line">    col <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    path []*Position</span><br><span class="line">    bestPath []*Position</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findPath</span><span class="params">(matrix [][]<span class="keyword">int</span>, i, j,  m, n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bestPath) == m + n - <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    matrix[i][j] = <span class="number">1</span></span><br><span class="line">    path = <span class="built_in">append</span>(path, &amp;Position&#123;i, j&#125;)</span><br><span class="line">    <span class="keyword">if</span> i == m <span class="number">-1</span> &amp;&amp; j == n <span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bestPath) == <span class="number">0</span> || <span class="built_in">len</span>(bestPath) &gt; <span class="built_in">len</span>(path) &#123;</span><br><span class="line">            bestPath = path</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; matrix[i<span class="number">-1</span>][j] == <span class="number">0</span>  &#123;</span><br><span class="line">        findPath(matrix, i<span class="number">-1</span>, j,  m, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i &lt; m <span class="number">-1</span> &amp;&amp; matrix[i+<span class="number">1</span>][j] == <span class="number">0</span> &#123;</span><br><span class="line">         findPath(matrix, i+<span class="number">1</span>, j, m,  n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> j &gt; <span class="number">0</span> &amp;&amp; matrix[i][j<span class="number">-1</span>] == <span class="number">0</span> &#123;</span><br><span class="line">         findPath(matrix, i, j<span class="number">-1</span>, m, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> j &lt; n <span class="number">-1</span> &amp;&amp; matrix[i][j+<span class="number">1</span>] == <span class="number">0</span> &#123;</span><br><span class="line">        findPath(matrix, i, j+<span class="number">1</span>,  m, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        matrix[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    path = path[<span class="number">0</span>:<span class="built_in">len</span>(path)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
    <category term="算法" scheme="http://blog.lxmoses.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>埃及分数</title>
    <link href="http://blog.lxmoses.com/2020/06/30/%E5%9F%83%E5%8F%8A%E5%88%86%E6%95%B0/"/>
    <id>http://blog.lxmoses.com/2020/06/30/%E5%9F%83%E5%8F%8A%E5%88%86%E6%95%B0/</id>
    <published>2020-06-30T03:56:28.000Z</published>
    <updated>2020-06-30T04:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分子为1的分数称为埃及分数。现输入一个真分数(分子比分母小的分数，叫做真分数)，请将该分数分解为埃及分数。如：8/11 = 1/2+1/5+1/55+1/110。</span><br></pre></td></tr></table></figure><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个真分数，String型</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出分解后的string</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8/11</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1/2+1/5+1/55+1/110</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="/images/equation.svg"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> a, b <span class="keyword">int</span></span><br><span class="line">        _, err := fmt.Scanf(<span class="string">&quot;%d/%d&quot;</span>, &amp;a, &amp;b)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> x = gcd(a, b)</span><br><span class="line">a /= x</span><br><span class="line">b /= x</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> try <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> result []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> b % a == <span class="number">0</span> &amp;&amp; try &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, b / a)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p =  b/a + <span class="number">1</span></span><br><span class="line">result = <span class="built_in">append</span>(result, p)</span><br><span class="line">a = a * p - b</span><br><span class="line">b *= p</span><br><span class="line">try = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, v := <span class="keyword">range</span> result &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;1/%d&quot;</span>, v)</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(result) - <span class="number">1</span> &#123;</span><br><span class="line">                fmt.Print(<span class="string">&quot;+&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fmt.Print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">1</span> || b == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> min <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">if</span> a &gt;= b &#123;</span><br><span class="line">        min = b</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        min = a</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= min; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> a % i == <span class="number">0</span> &amp;&amp; b % i == <span class="number">0</span> &#123;</span><br><span class="line">            a /= i</span><br><span class="line">            b /= i</span><br><span class="line">            min /= i</span><br><span class="line">            result *= i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>最长公共字符串</title>
    <link href="http://blog.lxmoses.com/2020/06/30/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://blog.lxmoses.com/2020/06/30/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-06-30T01:28:47.000Z</published>
    <updated>2020-06-30T01:32:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算两个字符串的最大公共字串的长度，字符不区分大小写</span><br></pre></td></tr></table></figure><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入两个字符串</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asdfas</span><br><span class="line">werasdfaswer</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> m, n <span class="keyword">string</span></span><br><span class="line">        <span class="keyword">if</span> _, err := fmt.Scan(&amp;m); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> _, err := fmt.Scan(&amp;n); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        m = strings.ToLower(m)</span><br><span class="line">        n = strings.ToLower(n)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> max <span class="keyword">int</span></span><br><span class="line">        <span class="keyword">var</span> dp [][]<span class="keyword">int</span> = <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="built_in">len</span>(m)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">            dp[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(n)+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(m); i++ &#123;</span><br><span class="line">            <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(n); j++ &#123;</span><br><span class="line">                <span class="keyword">if</span> m[i<span class="number">-1</span>] == n[j<span class="number">-1</span>] &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> dp[i][j] &gt; max &#123;</span><br><span class="line">                    max = dp[i][j]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fmt.Println(max)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> m, n <span class="keyword">string</span></span><br><span class="line">        <span class="keyword">if</span> _, err := fmt.Scan(&amp;m); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _, err := fmt.Scan(&amp;n); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> longStr, shortStr <span class="keyword">string</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m) &gt;= <span class="built_in">len</span>(n) &#123;</span><br><span class="line">            longStr = strings.ToLower(m)</span><br><span class="line">            shortStr = strings.ToLower(n)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            shortStr = strings.ToLower(m)</span><br><span class="line">            longStr = strings.ToLower(n)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> maxLen <span class="keyword">int</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(shortStr); i++ &#123;</span><br><span class="line">            <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(shortStr) - i; j++ &#123;</span><br><span class="line">                <span class="keyword">if</span> strings.Contains(longStr, shortStr[i:i+j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> maxLen &lt; j &#123;</span><br><span class="line">                        maxLen = j</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Println(maxLen)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
    <category term="算法" scheme="http://blog.lxmoses.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>火车进站</title>
    <link href="http://blog.lxmoses.com/2020/06/29/%E7%81%AB%E8%BD%A6%E8%BF%9B%E7%AB%99/"/>
    <id>http://blog.lxmoses.com/2020/06/29/%E7%81%AB%E8%BD%A6%E8%BF%9B%E7%AB%99/</id>
    <published>2020-06-29T11:03:24.000Z</published>
    <updated>2020-06-29T11:08:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个正整数N代表火车数量，0&lt;N&lt;10，接下来输入火车入站的序列，一共N辆火车，每辆火车以数字1-9编号，火车站只有一个方向进出，同时停靠在火车站的列车中，只有后进站的出站了，先进站的才能出站。要求以字典序排序输出火车出站的序列号。</span><br></pre></td></tr></table></figure><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有多组测试用例，每一组第一行输入一个正整数N（0&lt;N&lt;10），第二行包括N个正整数，范围为1到9。</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出以字典序从小到大排序的火车出站序列号，每个编号以空格隔开，每个输出序列换行，具体见sample。</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> stack []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stack)</span> <span class="title">push</span><span class="params">(v <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">*s = <span class="built_in">append</span>(*s, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stack)</span> <span class="title">pop</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">l := <span class="built_in">len</span>(*s)</span><br><span class="line">result := (*s)[l<span class="number">-1</span>]</span><br><span class="line">*s = (*s)[<span class="number">0</span> : l<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stack)</span> <span class="title">unshift</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">result := (*s)[<span class="number">0</span>]</span><br><span class="line">*s = (*s)[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stack)</span> <span class="title">empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(*s) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> N <span class="keyword">uint8</span></span><br><span class="line">_, err := fmt.Scan(&amp;N)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> trainList = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, N)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">uint8</span>(<span class="number">0</span>); i &lt; N; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> train <span class="keyword">string</span></span><br><span class="line">fmt.Scan(&amp;train)</span><br><span class="line">trainList = <span class="built_in">append</span>(trainList, train)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre := stack(trainList)</span><br><span class="line">in := stack&#123;&#125;</span><br><span class="line">out := stack&#123;&#125;</span><br><span class="line">handle(pre, in, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort.Strings(results)</span><br><span class="line"><span class="keyword">for</span> _, result := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">results []<span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(pre, in, out stack)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> pre.empty() &amp;&amp; in.empty() &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, strings.Join(out, <span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !pre.empty() &#123;</span><br><span class="line">prec := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(pre))</span><br><span class="line">inc := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(in))</span><br><span class="line">outc := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(out))</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(prec, pre)</span><br><span class="line"><span class="built_in">copy</span>(inc, in)</span><br><span class="line"><span class="built_in">copy</span>(outc, out)</span><br><span class="line"></span><br><span class="line">pres := stack(prec)</span><br><span class="line">ins := stack(inc)</span><br><span class="line">outs := stack(outc)</span><br><span class="line"></span><br><span class="line">ins.push(pres.unshift())</span><br><span class="line">handle(pres, ins, outs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !in.empty() &#123;</span><br><span class="line">prec := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(pre))</span><br><span class="line">inc := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(in))</span><br><span class="line">outc := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(out))</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(prec, pre)</span><br><span class="line"><span class="built_in">copy</span>(inc, in)</span><br><span class="line"><span class="built_in">copy</span>(outc, out)</span><br><span class="line"></span><br><span class="line">pres := stack(prec)</span><br><span class="line">ins := stack(inc)</span><br><span class="line">outs := stack(outc)</span><br><span class="line"></span><br><span class="line">outs.push(ins.pop())</span><br><span class="line">handle(pres, ins, outs)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
    <category term="算法" scheme="http://blog.lxmoses.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于Ipv4和ipv6</title>
    <link href="http://blog.lxmoses.com/2019/03/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8Eipv4%E5%92%8Cipv6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.lxmoses.com/2019/03/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8Eipv4%E5%92%8Cipv6%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2019-03-07T08:09:05.000Z</published>
    <updated>2019-03-07T08:21:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>服务器监听10000端口, 客户端可以建立tcp连接但是服务端始终无法收到数据.</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>笔者首先排查了客户端程序, 发现整个过程没什么问题, 客户端成功的建立了tcp连接并且发送了数据. 随后笔者在服务端加日志发现服务器并没有accept任何连接. 猜测可能是端口占用问题，果然发现迅雷占用了10000端口.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>让笔者纳闷的是为什么端口被占用却没有报错.<br>原来迅雷占用了10000端口, 但是netstat显示迅雷占用的ipv4, 服务器监听端口的时候会监听ipv4/ipv6连接. 虽然ipv4被占用了但是还是成功的监听了ipv6端口. 当客户端建立连接时选择的是ipv4端口, 所以便出现了上述让笔者感觉怪异的现象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;服务器监听10000端口, 客户端可以建立tcp连接但是服务端始终无法收到数据.&lt;/p&gt;
&lt;h2 id=&quot;排查&quot;&gt;&lt;a href=&quot;#排查&quot;</summary>
      
    
    
    
    <category term="网络编程" scheme="http://blog.lxmoses.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程技巧" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://blog.lxmoses.com/2018/05/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://blog.lxmoses.com/2018/05/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2018-05-21T12:02:18.000Z</published>
    <updated>2018-05-21T13:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Those who cannot remember the past are condemned to repeat it.<br>动态规划算法的核心是记住已经求过的解，记住求解的方式有两种：自顶向下的备忘录法和自底向上。</p><h2 id="小试牛刀-杠条切割问题"><a href="#小试牛刀-杠条切割问题" class="headerlink" title="小试牛刀-杠条切割问题"></a>小试牛刀-杠条切割问题</h2><p><img src="/images/%E6%9D%A0%E6%9D%A1%E5%88%87%E5%89%B2.png"><br>上图节选自算法导论。</p><h3 id="经典朴素递归"><a href="#经典朴素递归" class="headerlink" title="经典朴素递归"></a>经典朴素递归</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CutRod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (curRodLen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=curRodLen; ++curRodLen) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = rodLen2Price[i] + <span class="built_in">CutRod</span>(rodLen2Price, curRodLen-i);</span><br><span class="line">        q = q &lt; tmp ? tmp : q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自顶向下递归实现的CutRod效率很差，原因在于CutRod反复地用相同的参数值对自身进行递归调用，即它反复求解相同的子问题。而且由于递归调用次数太多会栈溢出。</p><h3 id="动态规划-自顶向下"><a href="#动态规划-自顶向下" class="headerlink" title="动态规划-自顶向下"></a>动态规划-自顶向下</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MemorizedCutRodAux</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen, <span class="keyword">int</span> *optimalRodTotalMoney)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用MemorizedCutRodAux&quot;</span>&lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (optimalRodTotalMoney[curRodLen] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> optimalRodTotalMoney[curRodLen];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (curRodLen == <span class="number">0</span>) &#123;</span><br><span class="line">        q = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=curRodLen ; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = rodLen2Price[i] + <span class="built_in">MemorizedCutRodAux</span>(rodLen2Price, curRodLen-i, optimalRodTotalMoney);</span><br><span class="line">            q = (q &lt; tmp ? tmp : q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    optimalRodTotalMoney[curRodLen] = q;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MemorizedCutRod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * optimalRodTotalMoney = <span class="keyword">new</span> <span class="keyword">int</span>[curRodLen + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= curRodLen; ++i) &#123;</span><br><span class="line">        optimalRodTotalMoney[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">MemorizedCutRodAux</span>(rodLen2Price, curRodLen, optimalRodTotalMoney);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法仍按自然的递归形式编写过程，但过程会保存每个子问题的解。当需要一个子问题的解时，过程首先检查是否已经保存过此解。如果是，则直接返回保存的值，从而节省了计算时间；否则，按通常方式计算这个子问题。</p><h3 id="动态规划-自底向上"><a href="#动态规划-自底向上" class="headerlink" title="动态规划-自底向上"></a>动态规划-自底向上</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BUCutRod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen, <span class="keyword">int</span> * optimalRodTotalMoney, <span class="keyword">int</span> *optimalSolution)</span> </span>&#123;</span><br><span class="line">    optimalRodTotalMoney[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=curRodLen; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> q = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = rodLen2Price[j] + optimalRodTotalMoney[i-j];</span><br><span class="line">            <span class="keyword">if</span> (q &lt; tmp) &#123;</span><br><span class="line">                q = tmp;</span><br><span class="line">                optimalSolution[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        optimalRodTotalMoney[i] = q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintBUCutRod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *rodLen2Price, <span class="keyword">int</span> curRodLen, <span class="keyword">int</span> * optimalRodTotalMoney, <span class="keyword">int</span> *optimalSolution)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BUCutRod</span>(rodLen2Price, curRodLen, optimalRodTotalMoney, optimalSolution);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;长度为&quot;</span> &lt;&lt; curRodLen &lt;&lt; <span class="string">&quot;的杠条最大收益为:&quot;</span> &lt;&lt; optimalRodTotalMoney[curRodLen] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最优方案的杠条长度分别为:&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (curRodLen != <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; optimalSolution[curRodLen] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        curRodLen -= optimalSolution[curRodLen];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恰当定义子问题“规模”的概念，使得任何子问题的求解都只依赖于“更小的”子问题的求解。因此，我们可以将子问题按照规模顺序，由小至大顺序进行求解。当求解某个子问题时，它所依赖的那些更小的子问题都已求解完毕，结果已经保存。每个子问题只需求解一次，当我们求解它时，它的所有前提子问题都已求解完成。<br>由于没有频繁的递归函数调用的开销，自底向上方法的时间复杂度函数通常具有更小的系数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Those who cannot remember the past are condemned to repeat it.&lt;br&gt;动态规划</summary>
      
    
    
    
    <category term="算法" scheme="http://blog.lxmoses.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang代码规范</title>
    <link href="http://blog.lxmoses.com/2017/06/07/golang%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://blog.lxmoses.com/2017/06/07/golang%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2017-06-07T08:57:02.000Z</published>
    <updated>2017-06-07T08:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://studygolang.com/articles/4346">这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转自&lt;a href=&quot;http://studygolang.com/articles/4346&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="编程规范" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Session与cookie</title>
    <link href="http://blog.lxmoses.com/2017/05/15/session%E4%B8%8Ecookie/"/>
    <id>http://blog.lxmoses.com/2017/05/15/session%E4%B8%8Ecookie/</id>
    <published>2017-05-15T08:06:10.000Z</published>
    <updated>2017-05-15T08:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://harttle.com/2015/08/10/cookie-session.html">这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转自&lt;a href=&quot;http://harttle.com/2015/08/10/cookie-session.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux原子操作与锁</title>
    <link href="http://blog.lxmoses.com/2017/04/13/Linux%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8E%E9%94%81/"/>
    <id>http://blog.lxmoses.com/2017/04/13/Linux%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8E%E9%94%81/</id>
    <published>2017-04-13T04:11:59.000Z</published>
    <updated>2017-04-13T06:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>Linux 中最简单的同步方法就是原子操作。原子 意味着临界段被包含在 API 函数中。不需要额外的锁定，因为 API 函数已经包含了锁定。由于 C 不能实现原子操作，因此 Linux 依靠底层架构来提供这项功能。各种底层架构存在很大差异，因此原子函数的实现方法也各不相同。一些方法完全通过汇编语言来实现，而另一些方法依靠 c 语言并且使用 local_irq_save 和 local_irq_restore 禁用中断。<br>当需要保护的数据非常简单时，例如一个计数器，原子运算符是种理想的方法。尽管原理简单，原子 API 提供了许多针对不同情形的运算符。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量的本质也是一个计数器，用来记录对某个资源（如共享内存）的存取状况。用来协调不同进程间的数据对象，最主要的应用是共享内存方式的进程间通信。<br>Linux2.6.26下定义的信号量结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> &#123;</span></span><br><span class="line"><span class="keyword">spinlock_t</span>                lock;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>             count;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">wait_list</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从以上信号量的定义中，可以看到信号量底层使用到了spinlock的锁定机制，这个spinlock主要用来确保对count成员的原子性的操作(count–)和测试(count &gt; 0)。</p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>两种形式的制约关系</p><h4 id="间接相互制约关系（互斥）"><a href="#间接相互制约关系（互斥）" class="headerlink" title="间接相互制约关系（互斥）"></a>间接相互制约关系（互斥）</h4><p>若某一进程要求使用某种资源，而该资源正好被另一进程使用，并且该资源不允许两个进程同时使用，那么该进程只好等待已占有的资源的进程释放资源后再使用。这种制约关系可以用“进程-资源-进程”的形式表示。例如，打印机资源，进程互斥经典问题中生产者-生产者问题。</p><h4 id="直接相互制约关系（同步）"><a href="#直接相互制约关系（同步）" class="headerlink" title="直接相互制约关系（同步）"></a>直接相互制约关系（同步）</h4><p>某一进程若收不到另一进程提供的必要信息就不能继续运行下去，表明了两个进程之间在某些点上要交换信息，相互交流运行情况。这种制约关系的进本形式是“进程-进程”。例如生产者与消费者问题，生产者生产产品并放入缓冲池，消费者从缓冲池取走产品进行消费。这两者就是同步关系。</p><p>区分互斥和同步只需记住，同类进程即为互斥关系，不同类进程即为同步关系。<br>临界资源：同时只允许一个进程使用的资源。<br>临界区：进程中用于访问临界资源的代码段，又称临界段。<br>每个进程的临界区代码可以不同，临界区代码由于要访问临界资源，因此要在进入临界区之前进行检查，至于每个进程对临界资源进行怎样的操作，这和临界资源及互斥同步管理是无关的。<br>Linux 2.6.26中mutex的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> &#123;</span></span><br><span class="line"><span class="comment">/* 1: unlocked, 0: locked, negative: locked, possible waiters */</span></span><br><span class="line"><span class="keyword">atomic_t</span>                  count;<span class="comment">//原子操作类型变量</span></span><br><span class="line"><span class="keyword">spinlock_t</span>                wait_lock;<span class="comment">//自旋锁类型变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>          <span class="title">wait_list</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_MUTEXES</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span>        *<span class="title">owner</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>                *name;</span><br><span class="line"><span class="keyword">void</span>                      *magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_LOCK_ALLOC</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lockdep_map</span>         <span class="title">dep_map</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对比前面的struct semaphore，struct mutex除了增加了几个作为debug用途的成员变量外，和semaphore几乎长得一样。但是mutex的引入主要是为了提供互斥机制，以避免多个进程同时在一个临界区中运行。<br>可以把互斥锁看成二值信号量。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>自旋锁也是实现保护共享资源的一种锁机制，与互斥锁比较类似，都是为了解决对某资源的互斥使用。无论是互斥锁还是自旋锁，在任何时刻最多只有一个保持者。也就是说，任何时刻最多只有一个执行单元获得锁。两者的不同之处是，对于互斥锁而言，如果资源已经被占用，其它的资源申请进程只能进入sleep状态。但是自旋锁不会引起调用者sleep，如果自旋锁已经被别的执行单元保持，调用者就一直循环在等待该自旋锁的保持者是否释放该锁。</p><h4 id="自旋锁一般原理"><a href="#自旋锁一般原理" class="headerlink" title="自旋锁一般原理"></a>自旋锁一般原理</h4><p>跟互斥锁一样，一个执行单元要想访问被自旋锁保护的共享资源，必须先得到锁，在访问完共享资源后，必须释放锁。如果在获取自旋锁时，没有任何执行单元保持该锁，那么将立即得到锁；如果在获取自旋锁时锁已经有保持者，那么获取锁操作将自旋在那里，直到该自旋锁的保持者释放了锁。由此我们可以看出，自旋锁是一种比较低级的保护数据结构或代码片段的原始方式，这种锁可能存在两个问题：死锁和过多占用cpu资源。</p><h4 id="自旋锁适用情况"><a href="#自旋锁适用情况" class="headerlink" title="自旋锁适用情况"></a>自旋锁适用情况</h4><p>自旋锁比较适用于锁使用者保持锁时间比较短的情况，正是由于自旋锁使用者一般保持较短的锁时间，因此选择自选而不是睡眠是非常必要的，因为自旋锁的效率远高于互斥锁。信号量和读写信号量适用于保持时间较长的情况，它们会导致调用者sleep，因此只能在进程上下文使用。而自旋锁适合于保持时间非常短的情况，它可以再任何上下文使用。如果被保护的共享资源只在进程上下文访问，使用信号量保护该共享资源非常合适，如果对共享资源的访问时间非常短，自旋锁也可以。但是如果被保护的共享资源需要在中断上下文访问（包括底半部即中断处理句柄和顶半部即软中断），就必须使用自旋锁。自旋锁保持期间是抢占失效的，而信号量和读写信号量保持期间是可以被抢占的。自旋锁只有在内核可抢占或SMP（多处理器）的情况下才真正需要，在单CPU且不可抢占的内核下，自旋锁的所有操作都是空操作。另外格外注意一点：自旋锁不能递归使用。</p><h3 id="互斥锁和信号量与自旋锁的区别"><a href="#互斥锁和信号量与自旋锁的区别" class="headerlink" title="互斥锁和信号量与自旋锁的区别"></a>互斥锁和信号量与自旋锁的区别</h3><p>信号量。互斥锁允许进程sleep属于睡眠锁，自旋锁不允许调用者sleep，而是让其循环等待</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在硬件层面，CPU提供了原子操作、关中断、锁内存总线的机制；OS基于这几个CPU硬件机制，就能够实现锁；再基于锁，就能够实现各种各样的同步机制（信号量等等）。<br>原子锁不仅提供了一种锁定机制，同时也提供了算术或 bitwise 操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原子操作&quot;&gt;&lt;a href=&quot;#原子操作&quot; class=&quot;headerlink&quot; title=&quot;原子操作&quot;&gt;&lt;/a&gt;原子操作&lt;/h2&gt;&lt;p&gt;Linux 中最简单的同步方法就是原子操作。原子 意味着临界段被包含在 API 函数中。不需要额外的锁定，因为 API 函数</summary>
      
    
    
    
    <category term="同步" scheme="http://blog.lxmoses.com/categories/%E5%90%8C%E6%AD%A5/"/>
    
    
    <category term="linux" scheme="http://blog.lxmoses.com/tags/linux/"/>
    
    <category term="原子操作" scheme="http://blog.lxmoses.com/tags/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
    
    <category term="锁" scheme="http://blog.lxmoses.com/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux延时实现</title>
    <link href="http://blog.lxmoses.com/2017/04/11/linux%E5%BB%B6%E6%97%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.lxmoses.com/2017/04/11/linux%E5%BB%B6%E6%97%B6%E5%AE%9E%E7%8E%B0/</id>
    <published>2017-04-11T09:10:38.000Z</published>
    <updated>2017-04-11T09:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="https://toutiao.io/posts/354999/app_preview">这里</a><br>有时候有些纠结啊。觉得底层的东西太多，太麻烦，想专注上层开发;偏偏又对底层实现好奇而且有时候不知道底层实现又一头雾水。<br>嗯，顺其自然吧。。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转自&lt;a href=&quot;https://toutiao.io/posts/354999/app_preview&quot;&gt;这里&lt;/a&gt;&lt;br&gt;有时候有些纠结啊。觉得底层的东西太多，太麻烦，想专注上层开发;偏偏又对底层实现好奇而且有时候不知道底层实现又一头雾水。&lt;br&gt;嗯，顺其自然吧。</summary>
      
    
    
    
    <category term="linux-kernel" scheme="http://blog.lxmoses.com/categories/linux-kernel/"/>
    
    
    <category term="延时" scheme="http://blog.lxmoses.com/tags/%E5%BB%B6%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>Go-匿名字段</title>
    <link href="http://blog.lxmoses.com/2017/04/11/go-%E5%8C%BF%E5%90%8D%E5%AD%97%E6%AE%B5/"/>
    <id>http://blog.lxmoses.com/2017/04/11/go-%E5%8C%BF%E5%90%8D%E5%AD%97%E6%AE%B5/</id>
    <published>2017-04-11T06:12:20.000Z</published>
    <updated>2017-04-11T06:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>package main</p><p>import “fmt”</p><p>type Base struct {<br>    Name string<br>    Age  int<br>}</p><p>func (b * Base) Test() {<br>    fmt.Println(“test successfully”)<br>}</p><p>type Child struct {<br>    Base // 匿名字段， 默认把Base的所有字段都继承过来了。 这样看起来才像真正的继承<br>    Age  int<br>}</p><p>func main() {<br>    c := new(Child)<br>    c.Name = “hello” // 可以直接使用Base中的字段<br>    c.Age = 20       // 如果有重复的， 则最外的优先</p><pre><code>fmt.Println(c.Name)     // hellofmt.Println(c.Age)      // 20fmt.Println(c.Base.Age) // 要访问Base中的，可以这样写 0c.Test()</code></pre><p>}<br>go语言中的”继承“并不是真正的意义上的继承，确切地说是组合。匿名字段让习惯了C++/java之类的程序员用go更加得心应手。<br>作为一门年轻的语言，不得不说go语言对程序员还是非常友好的.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;package main&lt;/p&gt;
&lt;p&gt;import “fmt”&lt;/p&gt;
&lt;p&gt;type Base struct {&lt;br&gt;    Name string&lt;br&gt;    Age  int&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;func (b * Base) Test() {&lt;br&gt;   </summary>
      
    
    
    
    <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
    <category term="面向对象编程" scheme="http://blog.lxmoses.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Go-Timer</title>
    <link href="http://blog.lxmoses.com/2017/04/11/go-Timer/"/>
    <id>http://blog.lxmoses.com/2017/04/11/go-Timer/</id>
    <published>2017-04-11T03:00:05.000Z</published>
    <updated>2017-04-11T05:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><p>首先有必要了解下go中Time的定义:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Time <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// sec gives the number of seconds elapsed since</span></span><br><span class="line"><span class="comment">// January 1, year 1 00:00:00 UTC.</span></span><br><span class="line">sec <span class="keyword">int64</span></span><br><span class="line"><span class="comment">// nsec specifies a non-negative nanosecond</span></span><br><span class="line"><span class="comment">// offset within the second named by Seconds.</span></span><br><span class="line"><span class="comment">// It must be in the range [0, 999999999].</span></span><br><span class="line">nsec <span class="keyword">int32</span></span><br><span class="line"><span class="comment">// loc specifies the Location that should be used to</span></span><br><span class="line"><span class="comment">// determine the minute, hour, month, day, and year</span></span><br><span class="line"><span class="comment">// that correspond to this Time.</span></span><br><span class="line"><span class="comment">// The nil location means UTC.</span></span><br><span class="line"><span class="comment">// All UTC times are represented with loc==nil, never loc==&amp;utcLoc.</span></span><br><span class="line">loc *Location</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到go语言中对于时间的定义：基于元年一月一日零点零分开始计算，精确到纳秒级别，至于底层是否能真正精确到这个级别就不得而知了。<br>还有一个重要的概念是Location,我在本地测试时区是CST，即大中华标准时间.<br>同时，go还提供了很多方便的辅助函数。<br>比较函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// After reports whether the time instant t is after u.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">After</span><span class="params">(u Time)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> t.sec &gt; u.sec || t.sec == u.sec &amp;&amp; t.nsec &gt; u.nsec</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Before reports whether the time instant t is before u.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Before</span><span class="params">(u Time)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> t.sec &lt; u.sec || t.sec == u.sec &amp;&amp; t.nsec &lt; u.nsec</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Equal reports whether t and u represent the same time instant.</span></span><br><span class="line"><span class="comment">// Two times can be equal even if they are in different locations.</span></span><br><span class="line"><span class="comment">// For example, 6:00 +0200 CEST and 4:00 UTC are Equal.</span></span><br><span class="line"><span class="comment">// Do not use == with Time values.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Equal</span><span class="params">(u Time)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> t.sec == u.sec &amp;&amp; t.nsec == u.nsec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加减运算：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Add</span><span class="params">(d Duration)</span> <span class="title">Time</span></span> &#123;</span><br><span class="line">t.sec += <span class="keyword">int64</span>(d / <span class="number">1e9</span>)</span><br><span class="line">nsec := t.nsec + <span class="keyword">int32</span>(d%<span class="number">1e9</span>)</span><br><span class="line"><span class="keyword">if</span> nsec &gt;= <span class="number">1e9</span> &#123;</span><br><span class="line">t.sec++</span><br><span class="line">nsec -= <span class="number">1e9</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nsec &lt; <span class="number">0</span> &#123;</span><br><span class="line">t.sec--</span><br><span class="line">nsec += <span class="number">1e9</span></span><br><span class="line">&#125;</span><br><span class="line">t.nsec = nsec</span><br><span class="line"><span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">Sub</span><span class="params">(u Time)</span> <span class="title">Duration</span></span> &#123;</span><br><span class="line">d := Duration(t.sec-u.sec)*Second + Duration(t.nsec-u.nsec)</span><br><span class="line"><span class="comment">// Check for overflow or underflow.</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> u.Add(d).Equal(t):</span><br><span class="line"><span class="keyword">return</span> d <span class="comment">// d is correct</span></span><br><span class="line"><span class="keyword">case</span> t.Before(u):</span><br><span class="line"><span class="keyword">return</span> minDuration <span class="comment">// t - u is negative out of range</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> maxDuration <span class="comment">// t - u is positive out of range</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span> <span class="title">AddDate</span><span class="params">(years <span class="keyword">int</span>, months <span class="keyword">int</span>, days <span class="keyword">int</span>)</span> <span class="title">Time</span></span> &#123;</span><br><span class="line">year, month, day := t.Date()</span><br><span class="line">hour, min, sec := t.Clock()</span><br><span class="line"><span class="keyword">return</span> Date(year+years, month+Month(months), day+days, hour, min, sec, <span class="keyword">int</span>(t.nsec), t.Location())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>看下定时器的定义:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Timer type represents a single event.</span></span><br><span class="line"><span class="comment">// When the Timer expires, the current time will be sent on C,</span></span><br><span class="line"><span class="comment">// unless the Timer was created by AfterFunc.</span></span><br><span class="line"><span class="comment">// A Timer must be created with NewTimer or AfterFunc.</span></span><br><span class="line"><span class="keyword">type</span> Timer <span class="keyword">struct</span> &#123;</span><br><span class="line">C &lt;-<span class="keyword">chan</span> Time</span><br><span class="line">r runtimeTimer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据文档内容，定时器是一个单独的事件，除非调用AfterFunc，当超时时，C会接收到当前时间。定时器只能通过NewTimer或者AfterFunc创建。<br>启动定时器，和停止定时器:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startTimer</span><span class="params">( * runtimeTimer)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stopTimer</span><span class="params">( * runtimeTimer)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure><p>NewTimer 和 AfterFunc</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewTimer creates a new Timer that will send</span></span><br><span class="line"><span class="comment">// the current time on its channel after at least duration d.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTimer</span><span class="params">(d Duration)</span> * <span class="title">Timer</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> Time, <span class="number">1</span>)</span><br><span class="line">t := &amp;Timer&#123;</span><br><span class="line">C: c,</span><br><span class="line">r: runtimeTimer&#123;</span><br><span class="line">when: when(d),</span><br><span class="line">f:  sendTime,</span><br><span class="line">arg:  c,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">startTimer(&amp;t.r)</span><br><span class="line"><span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AfterFunc</span><span class="params">(d Duration, f <span class="keyword">func</span>()</span>) * <span class="title">Timer</span></span> &#123;</span><br><span class="line">t := &amp;Timer&#123;</span><br><span class="line">r: runtimeTimer&#123;</span><br><span class="line">when: when(d),</span><br><span class="line">f:    goFunc,</span><br><span class="line">arg:  f,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">startTimer(&amp;t.r)</span><br><span class="line"><span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NewTimer初始化一个定时器,当超时之后会调用sendTime函数发送当前时间;AfterFunc接受一个func作为参数,当时间到了之后,执行func。</p><p>重设定时器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t * Timer)</span> <span class="title">Reset</span><span class="params">(d Duration)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t.r.f == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;time: Reset called on uninitialized Timer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">w := when(d)</span><br><span class="line">active := stopTimer(&amp;t.r)</span><br><span class="line">t.r.when = w</span><br><span class="line">startTimer(&amp;t.r)</span><br><span class="line"><span class="keyword">return</span> active</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// After waits for the duration to elapse and then sends the current time</span></span><br><span class="line"><span class="comment">// on the returned channel.</span></span><br><span class="line"><span class="comment">// It is equivalent to NewTimer(d).C.</span></span><br><span class="line"><span class="comment">// The underlying Timer is not recovered by the garbage collector</span></span><br><span class="line"><span class="comment">// until the timer fires. If efficiency is a concern, use NewTimer</span></span><br><span class="line"><span class="comment">// instead and call Timer.Stop if the timer is no longer needed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">After</span><span class="params">(d Duration)</span> &lt;-<span class="title">chan</span> <span class="title">Time</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> NewTimer(d).C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放定时器资源</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stop prevents the Timer from firing.</span></span><br><span class="line"><span class="comment">// It returns true if the call stops the timer, false if the timer has already</span></span><br><span class="line"><span class="comment">// expired or been stopped.</span></span><br><span class="line"><span class="comment">// Stop does not close the channel, to prevent a read from the channel succeeding</span></span><br><span class="line"><span class="comment">// incorrectly.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To prevent a timer created with NewTimer from firing after a call to Stop,</span></span><br><span class="line"><span class="comment">// check the return value and drain the channel.</span></span><br><span class="line"><span class="comment">// For example, assuming the program has not received from t.C already:</span></span><br><span class="line"><span class="comment">//if !t.Stop() &#123;</span></span><br><span class="line"><span class="comment">//&lt;-t.C</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// This cannot be done concurrent to other receives from the Timer&#x27;s</span></span><br><span class="line"><span class="comment">// channel.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For a timer created with AfterFunc(d, f), if t.Stop returns false, then the timer</span></span><br><span class="line"><span class="comment">// has already expired and the function f has been started in its own goroutine;</span></span><br><span class="line"><span class="comment">// Stop does not wait for f to complete before returning.</span></span><br><span class="line"><span class="comment">// If the caller needs to know whether f is completed, it must coordinate</span></span><br><span class="line"><span class="comment">// with f explicitly.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t * Timer)</span> <span class="title">Stop</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t.r.f == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;time: Stop called on uninitialized Timer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stopTimer(&amp;t.r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Time&quot;&gt;&lt;a href=&quot;#Time&quot; class=&quot;headerlink&quot; title=&quot;Time&quot;&gt;&lt;/a&gt;Time&lt;/h2&gt;&lt;p&gt;首先有必要了解下go中Time的定义:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
    <category term="定时器" scheme="http://blog.lxmoses.com/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>支付反馈可重入</title>
    <link href="http://blog.lxmoses.com/2017/04/07/%E6%94%AF%E4%BB%98%E5%8F%8D%E9%A6%88%E5%8F%AF%E9%87%8D%E5%85%A5/"/>
    <id>http://blog.lxmoses.com/2017/04/07/%E6%94%AF%E4%BB%98%E5%8F%8D%E9%A6%88%E5%8F%AF%E9%87%8D%E5%85%A5/</id>
    <published>2017-04-07T08:04:17.000Z</published>
    <updated>2017-04-07T08:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做支付,支付平台通知支付结果时，可能会重复通知。<br>为了解决这一问题，有三种思路。 锁，事务，缓存队列。<br>这里选择用缓存队列结合chan实现支付重复反馈可重入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inputTradeno = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">var</span> outputStatus = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">chanLoop</span><span class="params">()</span></span>&#123;</span><br><span class="line"> hashmap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">10000</span>)</span><br><span class="line"> <span class="keyword">var</span> queue common.StringFIFO</span><br><span class="line"> queue.Init(<span class="number">10000</span>)</span><br><span class="line"> <span class="keyword">for</span> &#123;</span><br><span class="line">tradeno := &lt;- inputTradeno</span><br><span class="line"><span class="keyword">if</span> _, ok := hashmap[tradeno]; ok&#123;</span><br><span class="line">outputStatus &lt;- <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> queue.Full()&#123;</span><br><span class="line">oldestTradeno, _ := queue.Pop()</span><br><span class="line"><span class="built_in">delete</span>(hashmap, oldestTradeno)</span><br><span class="line">&#125;</span><br><span class="line">queue.Push(tradeno)</span><br><span class="line">hashmap[tradeno] = <span class="keyword">struct</span> &#123;&#125;&#123;&#125;</span><br><span class="line">outputStatus &lt;- <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">look</span><span class="params">(tradeno <span class="keyword">string</span>)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">inputTradeno &lt;- tradeno</span><br><span class="line">ret := &lt;- outputStatus</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> chanLoop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wftNotify</span><span class="params">(c * gin.Context)</span></span>&#123;</span><br><span class="line"><span class="comment">//检验威富通是否重复通知</span></span><br><span class="line"><span class="keyword">if</span> look(notifyReq.Out_trade_no)&#123;</span><br><span class="line"><span class="comment">//已经缓存当前订单，说明威富通重复通知</span></span><br><span class="line">common.LogError(<span class="string">&quot;该订单已经处理&quot;</span>)</span><br><span class="line">c.Writer.WriteString(wxpay.WFT_RETURN_MSG_SUCCESS)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在做支付,支付平台通知支付结果时，可能会重复通知。&lt;br&gt;为了解决这一问题，有三种思路。 锁，事务，缓存队列。&lt;br&gt;这里选择用缓存队列结合chan实现支付重复反馈可重入&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
    <category term="并发控制" scheme="http://blog.lxmoses.com/tags/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    
    <category term="channel" scheme="http://blog.lxmoses.com/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>C++闭包探索</title>
    <link href="http://blog.lxmoses.com/2017/03/31/c-%E9%97%AD%E5%8C%85%E6%8E%A2%E7%B4%A2/"/>
    <id>http://blog.lxmoses.com/2017/03/31/c-%E9%97%AD%E5%8C%85%E6%8E%A2%E7%B4%A2/</id>
    <published>2017-03-31T08:09:18.000Z</published>
    <updated>2017-03-31T08:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 利用c++类嵌套内部类实现闭包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITest</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">process</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">ITest</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ITest * <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span> <span class="keyword">public</span> ITest</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;嵌套内部类:&quot;</span> &lt;&lt; <span class="string">&quot; Count is &quot;</span> &lt;&lt; count++ &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  利用函数内部类实现闭包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*Func)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Func <span class="title">testFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * pName = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pName == <span class="literal">NULL</span>)&#123;</span><br><span class="line">pName = <span class="string">&quot;moses&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;函数内部类:&quot;</span>&lt;&lt; pName &lt;&lt; <span class="string">&quot; Count is &quot;</span>&lt;&lt; count-- &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Test::process;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * c++新特性lambda表达式实现闭包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">std::function&lt;<span class="title">void</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span>&gt; <span class="title">lambdaTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> func = [count] (<span class="keyword">const</span> <span class="keyword">char</span> * pName = <span class="literal">NULL</span>) <span class="keyword">mutable</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(pName == <span class="literal">NULL</span>)&#123;</span><br><span class="line">pName = <span class="string">&quot;moses&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;lambda : &quot;</span> &lt;&lt; pName &lt;&lt; <span class="string">&quot; Count is &quot;</span> &lt;&lt; count-- &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> func;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
    <category term="c++" scheme="http://blog.lxmoses.com/tags/c/"/>
    
    <category term="闭包" scheme="http://blog.lxmoses.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Reflection-Go</title>
    <link href="http://blog.lxmoses.com/2017/03/31/reflection-go/"/>
    <id>http://blog.lxmoses.com/2017/03/31/reflection-go/</id>
    <published>2017-03-31T03:15:35.000Z</published>
    <updated>2017-03-31T05:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射简介"><a href="#反射简介" class="headerlink" title="反射简介"></a>反射简介</h2><p>Reflection(反射)在计算机中表示 程序能够检查自身结构的能力，尤其是类型。 它是元编程的一种形式。<br>本文中，我们主要理解Go语言中的的反射运作机制。每个编程语言的反射模型不大相同，很多语言根本不支持反射(C、C++)。笔者在学校主要就是学的C/C++,因此对于反射这个概念不是很清晰，最近接触Go语言，所以从go的角度探索下反射, 下文中谈到“反射”时，默认为时Go语言中的反射。</p><h2 id="类型和接口"><a href="#类型和接口" class="headerlink" title="类型和接口"></a>类型和接口</h2><p>反射建立在类型系统之上，因此我们从类型基础知识说起。<br>Go是静态语言。每个变量都有且只有一个静态类型，在编译时就已经确定。<br>关于类型，一个重要的分类是接口类型（interface），每个接口类型都代表固定的方法集合。一个接口变量可以指向（接口变量类似于C中的指针）任何类型的具体值，只要这个值实现了该接口类型的所有方法。<br>一个非常非常重要的接口类型是空接口，即:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>它代表一个空集，没有任何方法。由于任何具体的值都有零个或更多个方法，因此类型为interface{}的变量能够存储任何值。<br>有人说，Go的接口是动态类型的。这个说法是错误的！接口变量也是静态类型的，它永远只有一个相同的静态类型。如果在运行时它存储的值发生了变化，这个必须满足接口类型的方法集合。这是Go的特性。</p><h2 id="接口变量的表示"><a href="#接口变量的表示" class="headerlink" title="接口变量的表示"></a>接口变量的表示</h2><p>interface变量存储一对值:赋给改变量的具体的值、值类型的描述符。更确切的说，值就是实现该接口的底层数据，类型就是底层数据类型的描述。举个例子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r io.Reader</span><br><span class="line">tyy, err := os.OpenFile(<span class="string">&quot;/dev/tty&quot;</span>, os.O_RDWR, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">r = tty</span><br></pre></td></tr></table></figure><p>在这个例子中，变量r在结构上包含一个(key, value)对:(tty, * os.File)。注意：类型os.File不仅仅实现了Read方法。虽然接口变量只提供Read函数的调用权，但是底层的值包含了关于这个值的所有类型消息。所以我们能够做这样的类型转换:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w io.Writer</span><br><span class="line">w = r.(io.Writer)</span><br></pre></td></tr></table></figure><p>上面的第二行代码是一个类型断言，它判定变量r内部的实际值也继承了io.Writer接口，所以才能被赋值给w。赋值之后，w就指向了(tty, * os.File）对，和变量r指向的是同一个(value, type)对。<br>不管底层具体值的方法集有多大，由于接口的静态类型限制，接口变量只能调用特定的一些方法。<br>继续看下面的代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">empty = w</span><br></pre></td></tr></table></figure><p>这里的空接口变量也包含(tty, * os.File)对。这一点很容易理解:空接口变量可以存储任何具体值以及该值的所有描述信息。<br>这里没有使用类型断言,因为w满足空接口的所有方法。另外需要注意的一点是，(value, type)对中的type必须是具体的类型(struct 或 基本类型),不能是接口类型。</p><h2 id="反射可以将“接口类型变量”转换为“反射类型”对象"><a href="#反射可以将“接口类型变量”转换为“反射类型”对象" class="headerlink" title="反射可以将“接口类型变量”转换为“反射类型”对象"></a>反射可以将“接口类型变量”转换为“反射类型”对象</h2><p>这里反射类型指reflect.Type和reflect.Value。<br>首先了解下reflect包的两种类型Type和Value。这两种类型使访问接口内的数据成为可能。它们对应两个简单的方法，分别是reflect.TypeOf和reflect.ValueOf,分别是用来读取接口变量的reflect.Type和reflect.Value部分。<br>首先，我们看下reflect.TypeOf:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, reflect.TypeOf(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这行代码会打印出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span>: <span class="keyword">float64</span></span><br></pre></td></tr></table></figure><p>为什么没看到接口？ 这段代码看起来只是把一个float64类型的变量x传递给reflect.TypeOf,事实上查阅一下TypeOf的文档:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure><p>我们调用reflect.TypeOf(x)时，x被存储在一个空接口变量中被传递过去，然后reflect.TypeOf对空接口变量进行拆解，恢复其类型信息。<br>函数reflect.ValueOf也会对底层的值进行恢复:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></span><br><span class="line">fmt.Println(<span class="string">&quot;value:&quot;</span>, reflect.ValueOf(x))</span><br></pre></td></tr></table></figure><p>上面这段代码会打印出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value: &lt;<span class="keyword">float64</span> Value&gt;</span><br></pre></td></tr></table></figure><p>类型 reflect.Type 和 reflect.Value 都有很多方法，我们可以检查和使用它们。这里我们举几个例子。类型 reflect.Value 有一个方法 Type()，它会返回一个 reflect.Type 类型的对象。Type和 Value都有一个名为 Kind 的方法，它会返回一个常量，表示底层数据的类型，常见值有：Uint、Float64、Slice等。Value类型也有一些类似于Int、Float的方法，用来提取底层的数据。Int方法用来提取 int64, Float方法用来提取 float64，参考下面的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, v.Type())</span><br><span class="line">fmt.Println(<span class="string">&quot;kind is float64:&quot;</span>, v.Kind() == reflect.Float64)</span><br><span class="line">fmt.Println(<span class="string">&quot;value:&quot;</span>, v.Float())</span><br></pre></td></tr></table></figure><p>上面这段代码会打印出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span>: <span class="keyword">float64</span></span><br><span class="line">kind is <span class="keyword">float64</span>: <span class="literal">true</span></span><br><span class="line">value: <span class="number">3.4</span></span><br></pre></td></tr></table></figure><p>反射库提供了很多值得列出来单独讨论的属性。首先是介绍下Value 的 getter 和 setter 方法。为了保证API 的精简，这两个方法操作的是某一组类型范围最大的那个。比如，处理任何含符号整型数，都使用 int64。也就是说 Value 类型的Int 方法返回值为 int64类型，SetInt 方法接收的参数类型也是 int64 类型。实际使用时，可能需要转化为实际的类型。<br>第二个属性是反射类型变量（reflection object）的 Kind 方法 会返回底层数据的类型，而不是静态类型。如果一个反射类型对象包含一个用户定义的整型数,看代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> x MyInt = <span class="number">7</span></span><br><span class="line">v := relect.ValueOf(x)</span><br></pre></td></tr></table></figure><p>上面的代码中，虽然变量 v 的静态类型是MyInt，不是 int，Kind 方法仍然返回 reflect.Int。换句话说， Kind 方法不会像 Type 方法一样区分 MyInt 和 int。</p><h2 id="反射可以将“反射类型对象”转换为“接口类型变量”"><a href="#反射可以将“反射类型对象”转换为“接口类型变量”" class="headerlink" title="反射可以将“反射类型对象”转换为“接口类型变量”"></a>反射可以将“反射类型对象”转换为“接口类型变量”</h2><p>根据一个 reflect.Value 类型的变量，我们可以使用 Interface 方法恢复其接口类型的值。事实上，这个方法会把 type 和 value 信息打包并填充到一个接口变量中，然后返回。其函数声明如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interface returns v&#x27;s value as an interface&#123;&#125;.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Interface</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以通过断言，恢复底层的具体值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y := v.Interface().(<span class="keyword">float64</span>)</span><br><span class="line">fmt.Println(y)</span><br></pre></td></tr></table></figure><p>事实上，我们可以更好地利用这一特性。标准库中的 fmt.Println 和 fmt.Printf 等函数都接收空接口变量作为参数，fmt 包内部会对接口变量进行拆包（前面的例子中，我们也做过类似的操作）。因此，fmt 包的打印函数在打印 reflect.Value 类型变量的数据时，只需要把 Interface 方法的结果传给 格式化打印程序:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(v.Interface())</span><br></pre></td></tr></table></figure><h2 id="如果要修改“反射类型对象”，其值必须是“可写的”-settable"><a href="#如果要修改“反射类型对象”，其值必须是“可写的”-settable" class="headerlink" title="如果要修改“反射类型对象”，其值必须是“可写的”(settable)"></a>如果要修改“反射类型对象”，其值必须是“可写的”(settable)</h2><p>“可写性”有些类似于寻址能力，但是更严格。它是反射类型变量的一种属性，赋予该变量修改底层存储数据的能力。“可写性”最终是由一个事实决定的：反射对象是否存储了原始值。举个代码例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line">v.SetFLoat(<span class="number">7.1</span>)</span><br></pre></td></tr></table></figure><p>如果这行代码能够成功执行，它不会更新 x ，虽然看起来变量 v 是根据 x 创建的。相反，它会更新 x 存在于 反射对象 v 内部的一个拷贝，而变量 x 本身完全不受影响。这会造成迷惑，并且没有任何意义，所以是不合法的。“可写性”就是为了避免这个问题而设计的。<br>上面的代码中，我们把变量 x 的一个拷贝传递给函数，因此不期望它会改变 x 的值。如果期望函数 f 能够修改变量 x，我们必须传递 x 的地址（即指向 x 的指针）给函数 f，如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(&amp;x)</span><br></pre></td></tr></table></figure><p>反射的工作机制是一样的。如果你想通过反射修改变量x，就要把想要修改的变量的指针传递给反射库。<br>首先，像通常一样初始化变量x，然后创建一个指向它的反射对象，名字为p:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></span><br><span class="line">p := reflect.ValueOf(&amp;x)</span><br><span class="line">fmt.Println(<span class="string">&quot;type of p:&quot;</span>, p.Type())</span><br><span class="line">fmt.Println(<span class="string">&quot;settability of p:&quot;</span>, p.CanSet())</span><br></pre></td></tr></table></figure><p>这段代码的输出是:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> of p: * <span class="keyword">float64</span></span><br><span class="line">settability of p: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>反射对象p是不可写的，但是我们也无意修改p，事实上我们要修改的是 * p。为了得到p指向的数据，可以调用Value类型的Elem方法。Elem方法能够对指针进行“解引用”,然后将结果存储到Value类型对象v中:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v := p.Elem()</span><br><span class="line">fmt.Printlen(<span class="string">&quot;settability of v:&quot;</span>, v.CanSet())</span><br></pre></td></tr></table></figure><p>上面这段代码的输出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">settability of v: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>由于变量v代表x，因此我们可以使用v.SetFloat修改x的值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v.SetFloat(<span class="number">7.1</span>)</span><br><span class="line">fmt.Println(v.Interface())</span><br><span class="line">fmt.Println(x)</span><br></pre></td></tr></table></figure><p>上面的代码输出如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.1</span></span><br><span class="line"><span class="number">7.1</span></span><br></pre></td></tr></table></figure><p>反射不太容易理解，reflect.Type 和 reflect.Value 会混淆正在执行的程序，但是它做的事情正是编程语言做的事情。记住：只要反射对象要修改它们表示的对象，就必须获取它们表示的对象的地址。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>把反射应用到结构体时，常用的方式是 使用反射修改一个结构体的某些字段。只要拥有结构体的地址，我们就可以修改它的字段。<br>下面是一个简单的例子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">A <span class="keyword">int</span></span><br><span class="line">B <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">t := T&#123;<span class="number">23</span>, <span class="string">&quot;skidoo&quot;</span>&#125;</span><br><span class="line">s := reflect.ValueOf(&amp;t).Elem()</span><br><span class="line">typeOfT := s.Type()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; s.NumField(); i++ &#123;</span><br><span class="line">f := s.Field(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d: %s %s = %v\n&quot;</span>, i,</span><br><span class="line">typeOfT.Field(i).Name, f.Type(), f.Interface())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码的输出如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: A <span class="keyword">int</span> = <span class="number">23</span></span><br><span class="line"><span class="number">1</span>: B <span class="keyword">string</span> = skidoo</span><br></pre></td></tr></table></figure><p>这里有一点需要指出:变量 T 的字段都是首字母大写的（暴露到外部），因为struct中只有暴露到外部的字段才是“可写的”。<br>由于变量 s 包含一个“可写的”反射对象，我们可以修改结构体的字段:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.Field(<span class="number">0</span>).SetInt(<span class="number">77</span>)</span><br><span class="line">s.Field(<span class="number">1</span>).SetString(<span class="string">&quot;Sunset Strip&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;t is now&quot;</span>, t)</span><br></pre></td></tr></table></figure><p>上面的代码输出如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t is now &#123;<span class="number">77</span> Sunset Strip&#125;</span><br></pre></td></tr></table></figure><p>如果变量s是通过t，而不是&amp;t创建的，调用SetInt和SetString将会失败，因为t的字段是不可写的。<br>顺便一提，struct中的tag可以通过反射获得:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag := s.Field(<span class="number">0</span>).Tag.Get(<span class="string">&quot;testtag&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;反射简介&quot;&gt;&lt;a href=&quot;#反射简介&quot; class=&quot;headerlink&quot; title=&quot;反射简介&quot;&gt;&lt;/a&gt;反射简介&lt;/h2&gt;&lt;p&gt;Reflection(反射)在计算机中表示 程序能够检查自身结构的能力，尤其是类型。 它是元编程的一种形式。&lt;br&gt;本文中，</summary>
      
    
    
    
    <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
    <category term="reflecttion" scheme="http://blog.lxmoses.com/tags/reflecttion/"/>
    
  </entry>
  
  <entry>
    <title>Goroutine &amp; Channel</title>
    <link href="http://blog.lxmoses.com/2017/03/22/goroutine/"/>
    <id>http://blog.lxmoses.com/2017/03/22/goroutine/</id>
    <published>2017-03-22T10:03:39.000Z</published>
    <updated>2017-03-22T10:27:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习go语言，go语言一大特性就是并发。 参见<a href="http://hustcat.github.io/channel/">这篇博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在学习go语言，go语言一大特性就是并发。 参见&lt;a href=&quot;http://hustcat.github.io/channel/&quot;&gt;这篇博客&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
    <category term="并发" scheme="http://blog.lxmoses.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Do-While妙用</title>
    <link href="http://blog.lxmoses.com/2017/03/15/do-while%E5%A6%99%E7%94%A8/"/>
    <id>http://blog.lxmoses.com/2017/03/15/do-while%E5%A6%99%E7%94%A8/</id>
    <published>2017-03-15T03:07:05.000Z</published>
    <updated>2017-03-15T03:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于do-while，笔者之前一直停留在学习c++基础语法时的理解，然而后面读框架代码时经常看到do…while(0)这样的用法，当时不理解这样用的用意。<br>纸上得来终觉浅，绝知此事要躬行。 当我们看技术书籍或者看一些优秀的项目源码时，对于很多小地方可能也就是一目置之，自己亲身经历一次才会深刻的明白，这里也提醒自己以后多多注意细节。<br>最近在实现一个类的初始化函数如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MapFactory::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line">ret = <span class="built_in">initSimple</span>();</span><br><span class="line"><span class="keyword">if</span>(!ret)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">initMiddle</span>();</span><br><span class="line"><span class="keyword">if</span>(!ret)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">initHard</span>();</span><br><span class="line"><span class="keyword">if</span>(!ret)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">initSpecial</span>();</span><br><span class="line"><span class="keyword">if</span>(!ret)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时笔者在写上面这段代码时就感觉好麻烦，好多的return语句。<br>然而，我们可以巧妙地借用下循环里break的思路，优化如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MapFactory::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">ret = <span class="built_in">initSimple</span>();</span><br><span class="line"><span class="keyword">if</span>(!ret)&#123;</span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">initMiddle</span>();</span><br><span class="line"><span class="keyword">if</span>(!ret)&#123;</span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">initHard</span>();</span><br><span class="line"><span class="keyword">if</span>(!ret)&#123;</span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">initSpecial</span>();</span><br><span class="line"><span class="keyword">if</span>(!ret)&#123;</span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然上面的例子并没有恰当地表现出这个技巧的实用之处，因为上面的代码在每一次调用之时无外乎失败就直接返回，但是假如子初始化函数失败还需要释放资源，比如指针之类的。嗯，自行体会。</p><p>之前在阅读的代码中看到的do…while(0)代码更为常见的是红定义中，参加下面代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) do&#123; delete p; p = NULL;&#125; while(0)</span></span><br></pre></td></tr></table></figure><p>假设这里去掉do…while(0),</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) delete p; p = NULL;</span></span><br></pre></td></tr></table></figure><p>注意下面宏调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != p) <span class="built_in">SAFE_DELETE</span>(p)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">do</span> something</span><br></pre></td></tr></table></figure><p>这里如果是下面的定义方式，程序编译会报错，这里的do-while相当于提供了一种健壮的宏定义方式，至于个中细节，自行体会。<br>最后我想说的是，程序就像是一件艺术品，没有最好的代码实现， 只有更好，更优雅的代码。只有在一次又一次的实战中不断总结，才能不断提升自己。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于do-while，笔者之前一直停留在学习c++基础语法时的理解，然而后面读框架代码时经常看到do…while(0)这样的用法，当时不理解这样用的用意。&lt;br&gt;纸上得来终觉浅，绝知此事要躬行。 当我们看技术书籍或者看一些优秀的项目源码时，对于很多小地方可能也就是一目置之，</summary>
      
    
    
    
    <category term="编程技巧" scheme="http://blog.lxmoses.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="编程技巧" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>关于随机数</title>
    <link href="http://blog.lxmoses.com/2017/03/14/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://blog.lxmoses.com/2017/03/14/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2017-03-14T08:14:40.000Z</published>
    <updated>2017-03-14T08:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在设计一个随机数时遇到了一些问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">array</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="built_in">floor</span>(<span class="built_in">CCRANDOM_0_1</span>() * array.size)</span><br></pre></td></tr></table></figure><p>就是xcode里上面简单的几行代码，让我纠结很久。经过测试，主要原因是，xcode里float或者double转换成int时不能正确转换，至于原因，在下搜索很久都没找到答案， 暂时就这样不了了之吧。<br>嗯，于是发现了c++ 11关于随机数的新特性，上述代码改为如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">std::default_random_engine e;</span><br><span class="line"><span class="function">std::uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; <span class="title">u</span><span class="params">(<span class="number">0</span>, array.size())</span></span>;</span><br><span class="line"><span class="keyword">auto</span> index = <span class="built_in">u</span>(e);</span><br></pre></td></tr></table></figure><p>路漫漫其修远兮。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在设计一个随机数时遇到了一些问题：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
    <category term="c++" scheme="http://blog.lxmoses.com/tags/c/"/>
    
    <category term="随机数" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
</feed>
