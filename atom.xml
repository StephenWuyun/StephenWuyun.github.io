<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟云</title>
  <subtitle>let it be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lxmoses.com/"/>
  <updated>2017-03-22T10:06:22.000Z</updated>
  <id>http://blog.lxmoses.com/</id>
  
  <author>
    <name>moses</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Goroutine &amp; Channel</title>
    <link href="http://blog.lxmoses.com/2017/03/22/goroutine/"/>
    <id>http://blog.lxmoses.com/2017/03/22/goroutine/</id>
    <published>2017-03-22T10:03:39.000Z</published>
    <updated>2017-03-22T10:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习go语言，go语言一大特性就是并发。 参见&lt;a href=”<a href="http://hustcat.github.io/channel/&gt;这篇博客" target="_blank" rel="external">http://hustcat.github.io/channel/&gt;这篇博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习go语言，go语言一大特性就是并发。 参见&amp;lt;a href=”&lt;a href=&quot;http://hustcat.github.io/channel/&amp;gt;这篇博客&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hustcat.g
    
    </summary>
    
      <category term="go" scheme="http://blog.lxmoses.com/categories/go/"/>
    
    
      <category term="并发" scheme="http://blog.lxmoses.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Do-While妙用</title>
    <link href="http://blog.lxmoses.com/2017/03/15/do-while%E5%A6%99%E7%94%A8/"/>
    <id>http://blog.lxmoses.com/2017/03/15/do-while妙用/</id>
    <published>2017-03-15T03:07:05.000Z</published>
    <updated>2017-03-15T03:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于do-while，笔者之前一直停留在学习c++基础语法时的理解，然而后面读框架代码时经常看到do…while(0)这样的用法，当时不理解这样用的用意。<br>纸上得来终觉浅，绝知此事要躬行。 当我们看技术书籍或者看一些优秀的项目源码时，对于很多小地方可能也就是一目置之，自己亲身经历一次才会深刻的明白，这里也提醒自己以后多多注意细节。<br>最近在实现一个类的初始化函数如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> MapFactory::init()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">bool</span> ret = <span class="literal">false</span>;</div><div class="line">	ret = initSimple();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initMiddle();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initHard();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ret = initSpecial();</div><div class="line">	<span class="keyword">if</span>(!ret)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>当时笔者在写上面这段代码时就感觉好麻烦，好多的return语句。<br>然而，我们可以巧妙地借用下循环里break的思路，优化如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> MapFactory::init()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">bool</span> ret = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">do</span>&#123;</div><div class="line">		ret = initSimple();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initMiddle();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initHard();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = initSpecial();</div><div class="line">		<span class="keyword">if</span>(!ret)&#123;</div><div class="line">			<span class="comment">//return false;</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">while</span>(<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>当然上面的例子并没有恰当地表现出这个技巧的实用之处，因为上面的代码在每一次调用之时无外乎失败就直接返回，但是假如子初始化函数失败还需要释放资源，比如指针之类的。嗯，自行体会。</p>
<p>之前在阅读的代码中看到的do…while(0)代码更为常见的是红定义中，参加下面代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) do&#123; delete p; p = NULL;&#125; while(0)</span></div></pre></td></tr></table></figure><br>假设这里去掉do…while(0),<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) delete p; p = NULL;</span></div></pre></td></tr></table></figure><br>注意下面宏调用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != p) SAFE_DELETE(p)</div><div class="line"><span class="keyword">else</span> <span class="keyword">do</span> something</div></pre></td></tr></table></figure><br>这里如果是下面的定义方式，程序编译会报错，这里的do-while相当于提供了一种健壮的宏定义方式，至于个中细节，自行体会。<br>最后我想说的是，程序就像是一件艺术品，没有最好的代码实现， 只有更好，更优雅的代码。只有在一次又一次的实战中不断总结，才能不断提升自己。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于do-while，笔者之前一直停留在学习c++基础语法时的理解，然而后面读框架代码时经常看到do…while(0)这样的用法，当时不理解这样用的用意。&lt;br&gt;纸上得来终觉浅，绝知此事要躬行。 当我们看技术书籍或者看一些优秀的项目源码时，对于很多小地方可能也就是一目置之，
    
    </summary>
    
      <category term="编程技巧" scheme="http://blog.lxmoses.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="编程技巧" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>关于随机数</title>
    <link href="http://blog.lxmoses.com/2017/03/14/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://blog.lxmoses.com/2017/03/14/关于随机数/</id>
    <published>2017-03-14T08:14:40.000Z</published>
    <updated>2017-03-14T08:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在设计一个随机数时遇到了一些问题：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>(<span class="number">10</span>);</div><div class="line"><span class="keyword">int</span> index = <span class="built_in">floor</span>(CCRANDOM_0_1() * <span class="built_in">array</span>.size)</div></pre></td></tr></table></figure><br>就是xcode里上面简单的几行代码，让我纠结很久。经过测试，主要原因是，xcode里float或者double转换成int时不能正确转换，至于原因，在下搜索很久都没找到答案， 暂时就这样不了了之吧。<br>嗯，于是发现了c++ 11关于随机数的新特性，上述代码改为如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></div><div class="line"></div><div class="line">srand(time(<span class="literal">NULL</span>));</div><div class="line"><span class="built_in">std</span>::default_random_engine e;</div><div class="line"><span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; u(<span class="number">0</span>, <span class="built_in">array</span>.size());</div><div class="line"><span class="keyword">auto</span> index = u(e);</div></pre></td></tr></table></figure><br>路漫漫其修远兮。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在设计一个随机数时遇到了一些问题：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div
    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="随机数" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
      <category term="c++" scheme="http://blog.lxmoses.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Javascript继承详解</title>
    <link href="http://blog.lxmoses.com/2017/03/13/javascript%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.lxmoses.com/2017/03/13/javascript继承详解/</id>
    <published>2017-03-13T03:42:40.000Z</published>
    <updated>2017-03-13T03:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近要用cocos2d-js开发游戏，所以有必要学习下js，在此mark下js的继承。<br>参见三生石上的系列博客：<br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html" target="_blank" rel="external">javascript继承详解(一)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/08/1519251.html" target="_blank" rel="external">javascript继承详解(二)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/09/1519890.html" target="_blank" rel="external">javascript继承详解(三)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/13/1522647.html" target="_blank" rel="external">javascript继承详解(四)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/14/1523523.html" target="_blank" rel="external">javascript继承详解(五)</a><br><a href="http://www.cnblogs.com/sanshi/archive/2009/07/15/1524263.html" target="_blank" rel="external">javascript继承详解(六)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于最近要用cocos2d-js开发游戏，所以有必要学习下js，在此mark下js的继承。&lt;br&gt;参见三生石上的系列博客：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&quot; 
    
    </summary>
    
      <category term="js" scheme="http://blog.lxmoses.com/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.lxmoses.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2d-Js游戏引擎在各平台运行概要</title>
    <link href="http://blog.lxmoses.com/2017/03/10/cocos2d-js%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%9C%A8%E5%90%84%E5%B9%B3%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%A6%82%E8%A6%81/"/>
    <id>http://blog.lxmoses.com/2017/03/10/cocos2d-js游戏引擎在各平台运行概要/</id>
    <published>2017-03-10T02:49:24.000Z</published>
    <updated>2017-03-10T02:51:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://forum.cocos.com/t/cocos2d-js/23080" target="_blank" rel="external">转自这里 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://forum.cocos.com/t/cocos2d-js/23080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转自这里 &lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
      <category term="cocos2d-JS" scheme="http://blog.lxmoses.com/tags/cocos2d-JS/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2dx打包apk</title>
    <link href="http://blog.lxmoses.com/2017/03/09/cocos2dx%E6%89%93%E5%8C%85apk/"/>
    <id>http://blog.lxmoses.com/2017/03/09/cocos2dx打包apk/</id>
    <published>2017-03-09T03:54:18.000Z</published>
    <updated>2017-03-09T06:02:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天晚上第一次开始着手将cocos2dx project打包apk，在此记录下。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h4><p>下载jdk，并安装</p>
<h4 id="ndk"><a href="#ndk" class="headerlink" title="ndk"></a>ndk</h4><p>下载ndk，并解压</p>
<h3 id="android-sdk"><a href="#android-sdk" class="headerlink" title="android sdk"></a>android sdk</h3><p>下载android, sdk并解压</p>
<h4 id="ant"><a href="#ant" class="headerlink" title="ant"></a>ant</h4><p>下载ant, 并解压</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>进入cocos目录，运行setup.py,按提示操作即可。</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>进入cocos工程主目录，利用cocos工具编译如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos compile -p android --ap android-25<span class="comment">#--ap代表sdk版本</span></div></pre></td></tr></table></figure><br>上面的步骤会在cocos工程文件里生成一个apk文件，大功告成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天晚上第一次开始着手将cocos2dx project打包apk，在此记录下。&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;h4 id=&quot;jdk&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2dx内存管理机制</title>
    <link href="http://blog.lxmoses.com/2017/03/06/cocos2dx%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.lxmoses.com/2017/03/06/cocos2dx内存管理机制/</id>
    <published>2017-03-06T09:28:26.000Z</published>
    <updated>2017-03-07T02:08:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>cocos2dx里的所有节点对象都继承自Ref<br>下面是Ref的源代码核心部分摘录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Ref</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">retain</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Ref * <span class="title">autorelease</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getReferenceCount</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">	Ref();</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">virtual</span> ~Ref();</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> _referenceCount;</div><div class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> AutoreleasePool;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Ref::Ref(): _referenceCount(<span class="number">1</span>)&#123;&#125;</div><div class="line">Ref::~Ref() &#123;&#125;</div><div class="line"><span class="keyword">void</span> Ref::retain()</div><div class="line">&#123;</div><div class="line">	assert(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should be greater than 0"</span>);</div><div class="line">	++_referenceCount;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> Ref::release()</div><div class="line">&#123;</div><div class="line">	assert(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should be greater than 0"</span>);</div><div class="line">	--_referenceCount;</div><div class="line">	<span class="keyword">if</span>(_referenceCount == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">delete</span> <span class="keyword">this</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">Ref * Ref::autorelease()</div><div class="line">&#123;</div><div class="line">	PoolManager::getInstance()-&gt;getCurrentPool()-&gt;addObject(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Ref::getReferenceCount() <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> _referenceCount;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>可以看到Ref主要就是运用了引用计数，在一个节点的create函数中通常都会都会调用autorelease,在这个函数中调用的是AutoreleasePool的addObject方法。<br>下面是AutoreleasePool以及PoolManager的源代码实现核心部分摘录<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> AutoreleasePool</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	AutoreleasePool();<span class="comment">//warning Don't create an autorelease pool in heap, create it in stack.</span></div><div class="line">	AutoreleasePool(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name);</div><div class="line">	~AutoreleasePool();</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addObject</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Ref *&gt; _managedObjectArray;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> _name;</div><div class="line">&#125;</div><div class="line">AutoreleasePool::AutoreleasePool() : _name(<span class="string">""</span>)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.reserve(<span class="number">150</span>);</div><div class="line">	PoolManager::getInstance()-&gt;push(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">AutoreleasePool::AutoreleasePool(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name):_name(name)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.reserve(<span class="number">150</span>);</div><div class="line">	PoolManager::getInstance()-&gt;push(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">AutoreleasePool::~AutoreleasePool()</div><div class="line">&#123;</div><div class="line">	clear();</div><div class="line">	PoolManager::getInstance()-&gt;pop();</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> AutoreleasePool::addObject(Ref * object)</div><div class="line">&#123;</div><div class="line">	_managedObjectArray.push_back(object);</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> AutoreleasePool::clear()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Ref*&gt; releasings;</div><div class="line">	releasings.swap(_managedObjectArray);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;obj : releasings)</div><div class="line">	&#123;</div><div class="line">		obj-&gt;release();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> PoolManager</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">static</span> PoolManager * <span class="title">getInstance</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">AutoreleasePool * <span class="title">getCurrentPool</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> AutoreleasePool;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	PoolManager();</div><div class="line">	~PoolManager();</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(AutoreleasePool * pool)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</div><div class="line">	<span class="keyword">static</span> PoolManager * s_singleInstance;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AutoreleasePool *&gt; _releasePoolStack;</div><div class="line">&#125;</div><div class="line">PoolManager * PoolManager::getInstance()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (s_singleInstance == <span class="literal">nullptr</span>)</div><div class="line">	&#123;</div><div class="line">		s_singleInstance = <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) PoolManager();</div><div class="line">		<span class="comment">// Add the first auto release pool</span></div><div class="line">		<span class="keyword">new</span> AutoreleasePool(<span class="string">"cocos2d autorelease pool"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> s_singleInstance;</div><div class="line">&#125;</div><div class="line">PoolManager::PoolManager()</div><div class="line">&#123;</div><div class="line">	_releasePoolStack.reserve(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">PoolManager::~PoolManager()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(!_releasePoolStack.empty())</div><div class="line">	&#123;</div><div class="line">		AutoreleasePool * pool = _releasePoolStack.back();</div><div class="line">		<span class="keyword">delete</span> pool;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">PoolManager::getCurrentPool() <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> _releasePoolStack.back();</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> PoolManager::push(AutoreleasePool * pool)</div><div class="line">&#123;</div><div class="line">	    _releasePoolStack.push_back(pool);</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> PoolManager::pop()</div><div class="line">&#123;</div><div class="line">	assert(!_releasePoolStack.empty());</div><div class="line">	_releasePoolStack.pop_back();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>总结：<br>1.autorelease()的实质是将对象加入自动释放池，对象的引用计数不会立刻减1，在自动释放池被回收时对象执行release()。<br>2.autorelease()只有在自动释放池被释放时才会进行一次释放操作，如果对象释放的次数超过了应有的次数，则这个错误在调用autorelease()时并不会被发现，只有当自动释放池被释放时（通常也就是游戏的每一帧结束时），游戏才会崩溃。在这种情况下，定位错误就变得十分困难了。例如，在游戏中，一个对象含有1个引用计数，但是却被调用了两次autorelease()。在第二次调用autorelease()时，游戏会继续执行这一帧，结束游戏时才会崩溃，很难及时找到出错的地点。因此，我们建议在开发过程中应该避免滥用autorelease()，只在工厂方法等不得不用的情况下使用，尽量以release()来释放对象引用。<br>3.autorelease()并不是毫无代价的，其背后的释放池机制同样需要占用内存和CPU资源。过多的使用autorelease()会增加自动释放池的管理和释放池维护对象存取释放的支出。在内存和CPU资源本就不足的程序中使得系统资源更加紧张。此时就需要我们合理创建自动释放池管理对象autorelease。<br>不用的对象推荐使用release()来释放对象引用，立即回收。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cocos2dx里的所有节点对象都继承自Ref&lt;br&gt;下面是Ref的源代码核心部分摘录&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;
    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
      <category term="内存管理" scheme="http://blog.lxmoses.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Lambda--C++</title>
    <link href="http://blog.lxmoses.com/2017/03/02/lambda-c/"/>
    <id>http://blog.lxmoses.com/2017/03/02/lambda-c/</id>
    <published>2017-03-02T14:33:08.000Z</published>
    <updated>2017-03-02T14:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>参见<a href="https://www.devbean.net/2012/05/cpp11-lambda/" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参见&lt;a href=&quot;https://www.devbean.net/2012/05/cpp11-lambda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="lambda" scheme="http://blog.lxmoses.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>由Cocos2d-X工程入口窥见代理模式</title>
    <link href="http://blog.lxmoses.com/2017/03/02/%E7%94%B1Cocos2d-x%E5%B7%A5%E7%A8%8B%E5%85%A5%E5%8F%A3%E7%AA%A5%E8%A7%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.lxmoses.com/2017/03/02/由Cocos2d-x工程入口窥见代理模式/</id>
    <published>2017-03-02T05:29:02.000Z</published>
    <updated>2017-03-02T05:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://www.cnblogs.com/huashu/p/4446997.html" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;http://www.cnblogs.com/huashu/p/4446997.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/categories/cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="http://blog.lxmoses.com/tags/cocos2dx/"/>
    
      <category term="设计模式" scheme="http://blog.lxmoses.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>记一次Github域名解析异常</title>
    <link href="http://blog.lxmoses.com/2017/02/17/github%E5%9F%9F%E5%90%8D%E6%B1%A1%E6%9F%93/"/>
    <id>http://blog.lxmoses.com/2017/02/17/github域名污染/</id>
    <published>2017-02-17T09:44:52.000Z</published>
    <updated>2017-02-17T10:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天写完博客后部署至github时，老是报错。如下图所示：<br><img src="/images/部署报错.png" alt=""><br>ping github.com如下图所示：<br><img src="/images/github域名解析异常.png" alt=""><br>更改host文件之后，可正常部署。<br><img src="/images/修改hosts文件.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天写完博客后部署至github时，老是报错。如下图所示：&lt;br&gt;&lt;img src=&quot;/images/部署报错.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;ping github.com如下图所示：&lt;br&gt;&lt;img src=&quot;/images/github域名解析异常.png&quot; alt=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回家</title>
    <link href="http://blog.lxmoses.com/2017/02/17/%E5%9B%9E%E5%AE%B6/"/>
    <id>http://blog.lxmoses.com/2017/02/17/回家/</id>
    <published>2017-02-17T01:40:03.000Z</published>
    <updated>2017-02-17T04:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离上次回家已经一年了，放假之后意兴阑珊，买了车票就踏上了回家的路。<br>第一件事就是前往驾校继续学习科目三，每天早上六点半去驾校，冷！师傅是个好人，了解到我时间很紧的情况之后，将已经安排的三个名额让出一个给我，非常感谢！学车的时候师傅天天吼我，但是无所谓~ 我把所有能犯的错都犯了两遍最后完美通过考试。<br>考试之余就是玩游戏以及打麻将了，哈哈，带回来的书一次也没看！老家的小伙伴一直在催我回去打牌，科目三过了之后迫不及待回到老家。早上打，下午打，晚上打。今年玩的血战，技术不行，运气不行，带回家的两千五输完了，哈哈。<br>今年结婚的亲戚特别多，连着三四天都有亲戚结婚，忽然发现周围的小伙伴都结婚了，伯伯还说我这个是钱也输了，媳妇也没有，哈哈。<br>正月十二，去家里附近的餐馆过了个生。<br>预约到二月十五日考科目四，顺利通过科目四。<br>买的十六号晚上的票，领走前一天接到一个电话，五年来最大的好消息。 仿佛命运的转折点，这是转运的节奏么。<br>2016，很精彩。2017，我会有怎样的经历？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上次回家已经一年了，放假之后意兴阑珊，买了车票就踏上了回家的路。&lt;br&gt;第一件事就是前往驾校继续学习科目三，每天早上六点半去驾校，冷！师傅是个好人，了解到我时间很紧的情况之后，将已经安排的三个名额让出一个给我，非常感谢！学车的时候师傅天天吼我，但是无所谓~ 我把所有能犯
    
    </summary>
    
      <category term="随笔" scheme="http://blog.lxmoses.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://blog.lxmoses.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>DNS（域名系统）</title>
    <link href="http://blog.lxmoses.com/2017/01/07/DNS%EF%BC%88%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
    <id>http://blog.lxmoses.com/2017/01/07/DNS（域名系统）/</id>
    <published>2017-01-07T02:40:04.000Z</published>
    <updated>2017-01-07T11:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>DNS（域名系统）是一种用于TCP/IP应用程序的分布式数据库，它提供主机名字和IP地址之间的转换及有关电子邮件的选路信息。<br>从应用的角度上看，对DNS的访问是通过一个地址解析器（resolver）来完成的。在Unix主机中，该解析器主要是通过两个库函数gethostbyname（3）和gethostbyaddress（3）来访问的。</p>
<h2 id="DNS基础"><a href="#DNS基础" class="headerlink" title="DNS基础"></a>DNS基础</h2><p>DNS的名字空间和Unix的文件系统相似，也具有层次结构。下图显示了这种层次结构。<br><img src="/images/DNS的层次组织.jpg" alt=""><br>每个节点（上图中的圆圈）有一个至多63个字符长的标识。这棵树的树根是没有任何标识的特殊节点。命名标识中一律不区分大小写。命名树上任何一个节点的域名就是将从该节点到最高节点的域名串连起来，中间使用一个点“.”分割这些域名。域名树中的每个节点必须有一个唯一的域名，但域名树中的不同节点可使用相同的标识。<br>顶级域名被分为三个部分：<br>（1）arpa是一个用作地址到名字转换的特殊域<br>（2）7个3字符长的普通域，有些书也将这些域称为组织域。<br>（3）所有2字符长的域均是基于ISO3166中定义的国家代码，这些域被称为国家域，或地理域。 常见的me域名是前南斯拉夫地区西南部的国家黑山共和国（Montenegro，旧译“门的内哥罗”）的国家域名。现在也推出了一些新的域名，比如cloud顶级域名，属于国际通用新顶级域名，与.com、.net一样。然而.cloud域名行业特性更强，适合云计算设备、跳伞、天气预报等类型的企业或个人均可注册使用。<br>DNS的一个重要特征是DNS中域名中的授权，没有哪个机构来管理域名树中的每个标识，相反只有一个机构，即网络信息中心NIC负责分配顶级域和委派其他指定区域的授权机构。<br>一个独立管理的DNS子树称为一个区域。一个常见的区域是一个二级域，如noao.edu.许多二级域将它们的区域划分为更小的区域。例如大学可能根据不同的系来划分区域，公司可能根据不同的部门来划分区域。<br>一旦一个区域的授权机构被委派后，有它负责向该区域提供多个名字服务器。当一个新系统假如到一个区域中时，该区域的DNS管理者为该新系统申请一个域名和一个IP地址，并将它们加到名字服务器的数据库中。一个名字服务器负责一个或多个区域。一个区域的管理者必须为该区域提供一个主名字服务器和至少一个辅助名字服务器。主、辅名字服务器必须是独立和冗余的，以便当某个名字服务器发生故障不会影响该区域的名字服务。当一个新主机加入一个区域时，区域管理者将适当的信息（最少包括名字和IP地址）加入到运行在主名字服务器上的一个磁盘文件中，然后通知主名字服务器重新调入它的配置文件。辅名字服务器（通常是每隔3个小时）向主名字服务器询问是否有新数据。如果有新数据，则通过区域传送方式获得新数据。<br>当一个名字服务器没有请求的信息时，它必须与其它的名字服务器联系，这正是DNS的分布特性。然而，并不是每个名字服务器都知道如何同其他名字服务器联系。相反，每个名字服务器必须知道如何同根的名字服务器联系。所有的主名字服务器必须知道如何同根的名字服务器联系。跟服务器则知道所有二级域中的每个授权名字服务器的名字和位置（即IP地址）。这意味着这样一个反复的过程：正在处理请求的名字服务器与跟服务器联系，跟服务器告诉它与另一个名字服务器联系。<br>为了减少Internet上DNS的通信量，所有的名字服务器均使用高速缓存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;DNS（域名系统）是一种用于TCP/IP应用程序的分布式数据库，它提供主机名字和IP地址之间的转换及有关电子邮件的选路信息。&lt;br&gt;从应用的
    
    </summary>
    
      <category term="TCP/IP详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="DNS" scheme="http://blog.lxmoses.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>UDP（用户数据报协议）</title>
    <link href="http://blog.lxmoses.com/2017/01/06/UDP%EF%BC%88%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE%EF%BC%89/"/>
    <id>http://blog.lxmoses.com/2017/01/06/UDP（用户数据报协议）/</id>
    <published>2017-01-06T03:01:30.000Z</published>
    <updated>2017-01-06T07:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>UDP是一个简单地面向数据报的传输层协议：进程的每个输出操作正好产生一个UDP数据报，并组装成一份待发送的IP数据报。这与面向流字符的协议不同，如TCP,应用程序产生的全体数据与真正发送的单个IP数据报可能没有什么联系。<br>UDP数据报封装成一份IP数据报，如下图所示。<br><img src="/images/UDP封装.jpg" alt=""><br>UDP不提供可靠性：它把应用程序传给IP层的数据发送出去，但是并不保证它们能到达目的地。</p>
<h2 id="UDP首部"><a href="#UDP首部" class="headerlink" title="UDP首部"></a>UDP首部</h2><p>UDP首部的各字段如下图所示。<br><img src="/images/UDP首部.png" alt=""><br>端口号表示发送进程和接收进程。<br>UDP长度字段指的是UDP首部和UDP数据的字节长度。该字段的最小值为8字节（发送一份0字节的UDP数据报是ok的）。<br>UDP校验和，UDP和TCP在首部中都有覆盖它们首部和数据的检验和。UDP的检验和是可选的，而TCP的检验和是必需的。UDP的数据报的长度可以为奇数字节，但是检验和算法是把若干个16bit字相加。解决方法是必要时在最后增加填充字节0，这只是为了检验和的计算（也就是说，可能增加的填充字节不被传送）。其次，UDP数据报和TCP段都包括一个12字节长的伪首部，它是为了计算检验和而设置的。UDP校验和是一个端到端的校验和。它由发送端计算，然后由接收端验证。其目的是为了发现UDP首部和数据在发送端到接收端之间发生的任何改动。不要完全相信数据链路（如以太网，令牌环等）的CRC检验，应该始终打开端到端的检验和功能。而且如果你的数据很有价值，也不要完全相信UDP和TCP的校验和，因为这些都是简单地检验和，不能检测出所有可能发生的差错。</p>
<h2 id="UDP服务器的设计"><a href="#UDP服务器的设计" class="headerlink" title="UDP服务器的设计"></a>UDP服务器的设计</h2><h3 id="客户IP地址及端口号"><a href="#客户IP地址及端口号" class="headerlink" title="客户IP地址及端口号"></a>客户IP地址及端口号</h3><p>来自客户的事UDP数据报。IP首部包含源端和目的端IP地址，UDP首部包含了源端和目的端的UDP端口号。<br>这个特性允许一个交互UDP服务器对多个客户进行处理。给每个发送请求的客户端发回应答。</p>
<h3 id="目的IP地址"><a href="#目的IP地址" class="headerlink" title="目的IP地址"></a>目的IP地址</h3><p>一些应用程序需要知道数据报是发送给谁的，这要求操作系统从接收到的UDP数据报中将目的IP地址交给应用程序。不幸的是，并所有的操作系统都提供这个功能。</p>
<h3 id="UDP输入队列"><a href="#UDP输入队列" class="headerlink" title="UDP输入队列"></a>UDP输入队列</h3><p>通常程序所使用的每个UDP端口都与一个有限大小的输入队列相联系。这意味着，来自不同客户的差不多同时到达的请求将由UDP自动排队。接收到的UDP数据报以其接收顺序交给应用程序（在应用程序要求交送下一个数据报时）。然而，排队溢出造成内核中的UDP模块丢弃数据报的可能性是存在的。</p>
<h3 id="限制本地IP地址"><a href="#限制本地IP地址" class="headerlink" title="限制本地IP地址"></a>限制本地IP地址</h3><p>大多数UDP服务器在创建UDP端点时都使其本地IP地址具有通配符（wildcard）的特点。这就表明进入的UDP数据报如果其目的地为服务器端口，那么在任何本地接口均可接受到它。<br>当服务器创建端点时，它可以把其中一个主机本地IP地址包括广播地址指定为端点的本地IP地址。只有当目的IP地址与指定的地址相匹配时，进入的UDP数据报才能被送达这个端点。<br>有可能在相同的端口上启动不同的服务器，每个服务器具有不同的本地IP地址。但是，一般必须告诉系统应用程序重用相同的端口是没问题的。使用socket API时，必须指定SO_REUSEADDR选项。</p>
<h3 id="限制远端IP地址"><a href="#限制远端IP地址" class="headerlink" title="限制远端IP地址"></a>限制远端IP地址</h3><p>大多数系统允许UDP端点对远端地址进行限制。这说明端点将只能接收特定IP地址和端口号的UDP数据报。</p>
<h3 id="每个端口有多个接收者"><a href="#每个端口有多个接收者" class="headerlink" title="每个端口有多个接收者"></a>每个端口有多个接收者</h3><p>大多数的系统在某一时刻只允许一个程序端点与某个本地IP地址及UDP端口号关联。<br>在一个支持多播的系统上，这种情况将发生变化。多个端点可以使用同一个IP地址和UDP端口号，尽管应用程序通常必须告诉API是可行的。使用socket API时，必须指定SO_REUSEADDR选项。当UDP数据报到达目的IP地址为多播地址或广播地址，而且目的IP地址和端口号处有多个端点时，就向每个端点传送一份数据报的复制。但是如果UDP数据报到达的是一个单播地址，那么只向其中一个端点传送一份数据报的复制。选择哪个端点传送数据取决于各个不同的系统实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;UDP是一个简单地面向数据报的传输层协议：进程的每个输出操作正好产生一个UDP数据报，并组装成一份待发送的IP数据报。这与面向流字符的协议不
    
    </summary>
    
      <category term="TCP/IP详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="网络编程" scheme="http://blog.lxmoses.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="UDP" scheme="http://blog.lxmoses.com/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>在终端里查看外网Ip的方法</title>
    <link href="http://blog.lxmoses.com/2017/01/05/%E5%9C%A8%E7%BB%88%E7%AB%AF%E9%87%8C%E6%9F%A5%E7%9C%8B%E5%A4%96%E7%BD%91ip%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.lxmoses.com/2017/01/05/在终端里查看外网ip的方法/</id>
    <published>2017-01-05T04:36:29.000Z</published>
    <updated>2017-01-05T04:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="https://segmentfault.com/a/1190000000302955" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;https://segmentfault.com/a/1190000000302955&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="计算机基础" scheme="http://blog.lxmoses.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="IP" scheme="http://blog.lxmoses.com/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>IP:网际协议</title>
    <link href="http://blog.lxmoses.com/2017/01/04/IP-%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AE/"/>
    <id>http://blog.lxmoses.com/2017/01/04/IP-网际协议/</id>
    <published>2017-01-04T14:26:36.000Z</published>
    <updated>2017-01-06T11:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>IP是TCP/IP协议族中最为核心的协议。所有的TCP、UDP、ICMP、及IGMP数据都以IP数据报格式传输。<br>IP提供不可靠、无连接的数据报传送服务。<br>不可靠的意思是它不能保证IP数据报能成功到达目的地。任何要求的可靠性必须由上层来提供（如TCP）。<br>无连接这个术语的意思是IP并不维护任何关于后续数据报的状态信息。如果一信源向相同的信宿发送两个连续的数据报（先是A，然后是B），每个数据报都是独立地进行路由选择，可能选择不同的路线，因此B可能在A之前先到达。</p>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>互联网上的每个接口必须有一个唯一的Internet地址（IP地址）。IP地址具有一定的结构，五类不同的IP地址格式如下图所示。<br><img src="/images/五种不同格式的互联网地址.png" alt=""><br>有三类IP地址：单播地址（目的端为单个主机）、广播地址（目的端为给定网络上的所有主机）以及多播地址（目的端为同一组内的所有主机）</p>
<h2 id="IP首部"><a href="#IP首部" class="headerlink" title="IP首部"></a>IP首部</h2><p><img src="/images/IP数据报格式及首部中的各字段.jpg" alt=""><br>IP数据包的格式如上图所示, 普通的IP首部长为20个字节，除非含有选项字段。分析上图的首部，最高位在左边，记为0bit，最低位在右边，记为31bit。这种传输次序称作big endian字节序，由于TCP、IP首部中的所有二进制整数在网络中传输时都要求以这种次序，因此又称为网络字节序。以其他形式存储二进制整数的机器，例如little endian格式，则必须在传输数据之前把首部转换成网络字节序。<br>目前最常用的协议版本号是4，因此IP有时也称作IPV4.<br>首部长度指的是首部占32bit字的数目，包括任何选项。<br>服务类型（TOS)字段包括一个3bit的优先权字段（现在已被忽略），4bit的TOS字段和1bit未用但必须置为0.4bit的TOS分别代表：最小时延、最大吞吐量、最高可靠性和最小费用。<br>总长度字段是指整个IP数据报的长度，以字节为单位。由于该字段长16比特，所以IP数据报最长可达65535字节。<br>标识字段唯一地标识主机发送的每一份数据报。<br>TTL（time to live）生存时间字段设置了数据报可以经过的最多路由数器数。它指定了数据报的生存时间。TTL的初始值由源主机设置（通常为32或64），一旦经过一个处理它的路由器，它的值就减1。当该字段的值为0时，数据包就被丢弃，并发送ICMP报文通知源主机。<br>协议字段是一个长度为8bit的数值。1表示ICMP协议，2表示IGMP协议，6表示TCP协议，17表示UDP协议。<br>首部检验和字段是根据IP首部计算的校验码。具体可参见<a href="https://blog.lxmoses.com/2017/01/04/ip首部检验和/">这里</a><br>每一份IP数据报都包含源IP地址和目的IP地址。<br>最后一个是任选项，是数据报中的一个可变长的可选信息。</p>
<h2 id="IP路由选择"><a href="#IP路由选择" class="headerlink" title="IP路由选择"></a>IP路由选择</h2><p>此部分比较复杂，在以后的博文中会进行详细研究。</p>
<h2 id="子网寻址"><a href="#子网寻址" class="headerlink" title="子网寻址"></a>子网寻址</h2><p>现在所有的主机都要求支持子网编址。不是把IP地址看成单纯由单纯的一个网络号和一个主机号组成，而是把主机号再分成一个子网号和一个主机号。<br>这么做的原因是因为A类和B类地址为主机号分配了太多的空间，可分别容纳的主机数量为2的24次方-2和2的2的16次方-2（由于全0或全1的主机号是无效的，因此我们把总数-2）.事实上，在一个网络中人们并不安排这么多的主机。<br>从InterNIC获得某类IP网络号后，就由当地的系统管理员来进行分配，有他决定来决定是否建立子网，以及分配多少比特给子网号和主机号。<br>子网对外部路由器来说隐藏了内部网络阻止（一个校园或公司内部）的细节。<br>与30个C类地址，用一个包含30个子网的B类地址的好处是，它可以缩小Internet路由表的规模。</p>
<h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>子网掩码是一个32bit的值，其中值为1的比特留个网络号和子网号，为0的比特留给主机号。<br>尽管IP地址一般以点分十进制表示，但是子网掩码却经常用十六进制来表示。<br>给定子网掩码后，主机就可以确定IP数据报的目的是：<br>（1）本子网上的主机<br>（2）本网络中的其他主机<br>（3）其他网络上的主机</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;IP是TCP/IP协议族中最为核心的协议。所有的TCP、UDP、ICMP、及IGMP数据都以IP数据报格式传输。&lt;br&gt;IP提供不可靠、无连
    
    </summary>
    
      <category term="TCP/IP协议详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="网络编程" scheme="http://blog.lxmoses.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>IP首部检验和</title>
    <link href="http://blog.lxmoses.com/2017/01/04/ip%E9%A6%96%E9%83%A8%E6%A3%80%E9%AA%8C%E5%92%8C/"/>
    <id>http://blog.lxmoses.com/2017/01/04/ip首部检验和/</id>
    <published>2017-01-04T13:40:48.000Z</published>
    <updated>2017-01-06T11:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在发送数据时，为了计算数IP据报的校验和。应该按如下步骤：<br>（1）把IP数据报的校验和都置为0。<br>（2）把首部看成以16位为单位的数字组成，依次进行二进制反码求和。<br>（3）把得到的结果存入校验和字段中。<br>在接收数据时，计算数据报的校验和相对简单，按如下步骤：<br>（1）把首部看成以16位为单位的数字组成，依次进行二进制反码求和，包括校验和字段。<br>（2）检查计算出的校验和的结果是否等于零。<br>（3）如果等于零，说明被整除，校验是和正确。否则，校验和就是错误的，协议栈要抛弃这个数据包。<br>下面是校验代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="title">checksum</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> *buf,<span class="keyword">int</span> nword)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> sum;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(sum=<span class="number">0</span>;nword&gt;<span class="number">0</span>;nword--)&#123;</div><div class="line">		sum += *buf++;</div><div class="line">		sum = (sum&gt;&gt;<span class="number">16</span>) + (sum&amp;<span class="number">0xffff</span>);<span class="comment">//相加后最高位如果有进位，加到低位。</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ~sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">short</span> iph[]=&#123;<span class="number">0x4500</span>,<span class="number">0x00ad</span>,<span class="number">0x7755</span>,<span class="number">0x4000</span>,<span class="number">0x8006</span>,</div><div class="line">		<span class="number">0x0000</span>,<span class="number">0x0a97</span>,<span class="number">0x7819</span>,<span class="number">0x0a97</span>,<span class="number">0x781d</span>&#125;;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">short</span> cksum;</div><div class="line"></div><div class="line">	cksum=checksum(iph,<span class="number">20</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%X\n"</span>,cksum);</div><div class="line">	iph[<span class="number">5</span>]=cksum;</div><div class="line">	cksum=checksum(iph,<span class="number">20</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%X\n"</span>,cksum);</div><div class="line">	<span class="keyword">if</span>(cksum)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Checksum is incorrect!\n"</span>);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Checksum is correct!\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>上面的算法应该包含一些数理规律，对此笔者懒得追究了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在发送数据时，为了计算数IP据报的校验和。应该按如下步骤：&lt;br&gt;（1）把IP数据报的校验和都置为0。&lt;br&gt;（2）把首部看成以16位为单位的数字组成，依次进行二进制反码求和。&lt;br&gt;（3）把得到的结果存入校验和字段中。&lt;br&gt;在接收数据时，计算数据报的校验和相对简单，按如
    
    </summary>
    
      <category term="TCP/IP协议详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="网络编程" scheme="http://blog.lxmoses.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机数的表示和存储</title>
    <link href="http://blog.lxmoses.com/2017/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E6%95%B0%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://blog.lxmoses.com/2017/01/04/计算机中数的存储/</id>
    <published>2017-01-04T12:33:30.000Z</published>
    <updated>2017-01-04T12:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://www.cnblogs.com/lyfruit/archive/2013/04/07/3003376.html" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;http://www.cnblogs.com/lyfruit/archive/2013/04/07/3003376.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="计算机基础" scheme="http://blog.lxmoses.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="编码" scheme="http://blog.lxmoses.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP四层协议系统概述</title>
    <link href="http://blog.lxmoses.com/2017/01/04/TCP-IP%E5%9B%9B%E5%B1%82%E5%8D%8F%E8%AE%AE%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <id>http://blog.lxmoses.com/2017/01/04/TCP-IP四层协议系统概述/</id>
    <published>2017-01-04T02:10:50.000Z</published>
    <updated>2017-01-04T13:43:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/tcp-ip协议族的四个层次.jpg" alt=""><br>链路层，有时称为数据链路层或网络接口层，通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。它们一起处理与电缆（或其他任何传输媒介）的物理接口细节。<br>网络层，有时也称为互联网层，处理分组在网络中的活动，例如分组的选路。在tcp/ip协议族中，网络层协议包括ip协议（网际协议），icmp协议（internet互联网控制报文协议）以及IGMP协议（internet组管理协议）。<br>运输层，主要为两台主机上的应用程序提供端到端的通信。<br>应用层，负责处理特定的应用程序细节。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/tcp-ip协议族的四个层次.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;链路层，有时称为数据链路层或网络接口层，通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。它们一起处理与电缆（或其他任何传输媒介）的物理接口细节。&lt;br&gt;网络层，有时
    
    </summary>
    
      <category term="TCP/IP协议详解" scheme="http://blog.lxmoses.com/categories/TCP-IP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="网络编程" scheme="http://blog.lxmoses.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>最近的几次面试</title>
    <link href="http://blog.lxmoses.com/2017/01/03/%E9%9D%A2%E8%AF%95/"/>
    <id>http://blog.lxmoses.com/2017/01/03/面试/</id>
    <published>2017-01-03T14:13:02.000Z</published>
    <updated>2017-01-03T12:33:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从从老汤那里辞职回学校以后，放松了一段时间，然后又开始投简历。经历了几次面试。<br>由于快毕业了， 所以找工作的区域不再局限于成都，全国海投！<br>第一次笔试是北京一家叫做光合起源的公司hr通过qq给笔者发了一份面试题，挺简单的，都是一些基础知识。hr反馈说看笔者测试题做得不错，问我什么时候有空去北京去面试，笔者暂时走不开，就此搁置。<br>接下来是2016年12月一天之内的三次面试。<br>上午电话面试。上海一家游戏公司， 面试官主要问了一些算法的东西，无奈笔者对算法没有深入的探究，面试官简单地问了几句也觉得无趣，然后草草结束面试。<br>下午环球中心，启明星辰一面，首先让笔者做了一套面试题，内容大概是一些简单的编程知识以及linux常用命令。除了网络方面的东西都还应对的可以，第二天一面顺利通过。<br>然后匆匆赶去蜀都中心， 萤火虫游戏， 去这家公司的路途中感觉很熟悉，到了地方发现巧了， 大概半年前面过隔壁的游戏公司，当时拿到了offer但是hr说第一个月没工资，迫于生计，拒绝了。<br>言归正传， 到了公司以后还是做了一套面试题。 感觉这家公司面试题逼格比较高，笔者留下了一张照片。<br><img src="/images/萤火虫面试题.jpg" alt=""><br>智力题除了第四题，其他简单地想了下还是答上来了。 编程题比较偏算法，关于最短路径以及求点到直线的距离的算法不是很熟悉，没能写出来，只是简单地表述了下我的思路。<br>关于面试题第四题，笔者简单搜索了下，发现是自己高估了这道题的难度，主要是前面的都是类似脑筋急转弯之内的东西，突然来了个正常不习惯！！！下面是答案:<br>一个罐子：1个红球。另一个罐子：49个红球，50个篮球<br>笔试完了之后由于面试官开会，等了半个小时， 果然不出所料， 面试官问我acm， 无奈笔者acm只是水水地参与了一下，实在难登大雅之堂。面试官转问我tcp的细节，笔者比较偏向实用主义，对于网络编程，也是停留在读完unp卷一的水准， 面试官鄙视地说：“我很好奇你这两年干的啥啊”。 笔者无言以对。只是下定决心回来好好学习下常用的算法并且立马买了tcp/ip详解。<br>今天早上清晨吸着霾挤着地铁公交去启明星辰二面。 由于面试官开会， 等了一个小时。 面试官是成都分部技术方面的老大，这次面试对我触动挺大的。<br>笔者也经历了七八次面试吧，之前的面试官主要问的都是一些基础知识，但这次面试官主要问我项目经历。 笔者面试时精神属于高度集中的那种，而且潜意识里认为面试内容应该不会详细到业务这种程度，一时没领会到他要我详细描述项目这个意思，导致面试官有些不耐烦， 交流不是很顺畅。（最怕空气突然安静） 由于我没有及时细谈项目，面试官一度怀疑我根本是在编造项目经验！！！ 后来我重新详细地描述了下之前的项目经历， 然后面试官叫我重新发份简历到他的邮箱然后结合一面的面试官再决定是否给我三面的机会。<br>其实这些面试对我来说倒是不那么在意结果，毕竟类似这样的公司遍地都是。然而在这个过程中暴露了很多笔者自身的问题。<br>第一，笔者面试时心态不够平和，精神过度集中，导致表现出的思维不够灵活，表达能力偏弱。 以后的每一次面试都要以一副云淡风轻的态度淡然面对，虽然我是打工的，但人格层面并不比谁第一等，也没必要表现地那么卑微。<br>第二，现在的面试官经常会问一些常用的算法，这是笔者的短板，其实说来这些算法也不是多难，简单地准备一周应该能应对大部分面试官。 虽然在下认为其实工作中这些并没有什么卵用，但是这个社会就是这样，求职的人多了，面试官就会通过这些光环来刷人，笔者无力改变，只能接受。<br>第三，笔者为人处世的态度比较随意，与面试时高度紧张的态度相反，面试之前通常是毫无准备，简历也是比较随意， 以后需要多加注意。应该以一个成年人的态度来面对社会了。<br>谈不上优秀,也算不上渣。 人潮中，我是那么的普通。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从从老汤那里辞职回学校以后，放松了一段时间，然后又开始投简历。经历了几次面试。&lt;br&gt;由于快毕业了， 所以找工作的区域不再局限于成都，全国海投！&lt;br&gt;第一次笔试是北京一家叫做光合起源的公司hr通过qq给笔者发了一份面试题，挺简单的，都是一些基础知识。hr反馈说看笔者测试
    
    </summary>
    
      <category term="随笔" scheme="http://blog.lxmoses.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="面试" scheme="http://blog.lxmoses.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>C++的四种类型转换方式</title>
    <link href="http://blog.lxmoses.com/2016/12/29/c++%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%96%B9%E5%BC%8F/"/>
    <id>http://blog.lxmoses.com/2016/12/29/c++的四种类型转换方式/</id>
    <published>2016-12-28T22:40:23.000Z</published>
    <updated>2016-12-28T23:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>c++的四种强制类型转换，所以c++不是类型安全的。分别为：static_cast , dynamic_cast , const_cast , reinterpret_cast<br>使用C风格的强制转换可以把想要的任何东西转换成合乎心意的类型，那为什么还需要一个新的C++类型的强制转换呢？<br>新类型的强制转换可以提供更好的控制强制转换过程，允许控制各种不同种类的强制转换。C++中风格是static_cast<type>(content)。C++风格的强制转换其他的好处是，它们能更清晰的表明它们要干什么。程序员只要扫一眼这样的代码，就能立即知道一个强制转换的目的。</type></p>
<h2 id="四种类型转换的区别"><a href="#四种类型转换的区别" class="headerlink" title="四种类型转换的区别"></a>四种类型转换的区别</h2><h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><p>实现C++中内置基本数据类型之间的相互转换<br><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> c=<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">7.987</span>);</div></pre></td></tr></table></figure></p>
<h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h3><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> SA &#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> SA ra;</div><div class="line"><span class="comment">//ra.i = 10; //直接修改const类型，编译错误</span></div><div class="line">SA &amp;rb = <span class="keyword">const_cast</span>&lt;SA&amp;&gt;(ra);</div><div class="line">rb.i =<span class="number">10</span>;</div></pre></td></tr></table></figure>
<h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">（1）其他三种都是编译时完成的，dynamic_cast是运行时处理的，运行时要进行类型检查。</div><div class="line">（2）不能用于内置的基本数据类型的强制转换。</div><div class="line">（3）dynamic_cast转换如果成功的话返回的是指向类的指针或引用，转换失败的话则会返回NULL。</div><div class="line">（4）使用dynamic_cast进行转换的，基类中一定要有虚函数，否则编译不通过。</div><div class="line">（5）在类的转换时，在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的。在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全。向上转换即为指向子类对象的转化为指向父类对象。向下转换，即将父类指针转化子类指针。向下转换的成功与否还与将要转换的类型有关，即要转换的指针指向的对象的实际类型与转换以后的对象类型一定要相同，否则转换失败。</div></pre></td></tr></table></figure>
<h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">有着和C风格的强制转换同样的能力。它可以转化任何内置的数据类型为其他任何的数据类型，也可以转化任何指针类型为其他的类型。它甚至可以转化内置的数据类型为指针，无须考虑类型安全或者常量的情形。不到万不得已绝对不用。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;c++的四种强制类型转换，所以c++不是类型安全的。分别为：static_cast , dynamic_cast , const_cast 
    
    </summary>
    
      <category term="c++" scheme="http://blog.lxmoses.com/categories/c/"/>
    
    
      <category term="类型转换" scheme="http://blog.lxmoses.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
</feed>
